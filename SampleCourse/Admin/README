The following directories are obtained by combining the different contributions
by the authors in ../Material

Laboratory1: 
   2 problems taken from ../Material/Author4/*
   Three documents are produced: regular text, solutions and professor guide.

Laboratory2:
   1 problem taken from ../Material/Author5. It is bilingual, therefore
   2 versions of text, solution and professor guide need to be produced.

Laboratory3:
   Material taken from Author7 and combined with a wrapper index.xml file.
   This wrapper changes the title and metions a specific lab number. This is
   to illustrate how material can be written with no course in mind and then
   personalize it for course with a little wrapper and xincludes.

Theory1:
   Theory session where the slides are made available as PDF as well as
   de 2up format. This last one is produced automatically in this directory
   and independently of the author's directory (as long as
   the pdfjam package is installed, which provides pdfnup). The author uses
   some PPT and therefore no automatic processing is done (unless we fix
   a glitch in ooffice to do batch processing efficiently). The author is
   Author6

Theory2
   Similar scenario to the previous one but the slides are obtained with
   LaTeX processing. The 2up version in this case is locally produced 
   in the author's directory. This is simply to show the two options when
   compared to the previous one. The author is Author1

Theory3
   PDF document with slides produced using the Prosper LaTeX package. The
   generation is done by defining a simple *.xml wrapper that states the title
   of the document, a few more constants and the files in *.tex that need
   to be included. It is another example of sharing course-neutral material
   and personalizing it for a course with a simple wrapper.

Guide1
   This is an interesting directory. The only relevant file is Properties in
   which the variable assignment translates in an XML file and a bunch of
   png files already in a remote directory are taken and processed such that
   the result is directly produced in the scratch location. No intermediate
   file is left in this directory. This is a very special case of what can be
   done with the proper assignments. A more suitable set of assignments would
   produce a local copy and then export the appropriate files to the scratch
   directory (if you see the result, in the scratch copy there is a xsl file
   that slipped away). The resource is taken from Author2

Guide2
   A more realistic example of a file that is processed by docbook but 
   complemented by a set of figures, some of them derived with inkscape.
   The Properties.txt file is such that an index.html is produced locally and
   then exported to the scratch. In certain sense, it is a more complicated
   version of the previous scenario (Guide 1). The author used for this
   resource is Author3.

A directory name scratch appears once the whole course is created. It is the
dummy copy of the site. After reviewing that everything seems correct, then
it is suitable to be published to a remote site.

PLAYING WITH DATE-TIME CONTROLLED PROCESSING

ADA allows specifying at any element in a docbook document a date/time window
in which such element should be visible. At any other time, that element
is suppressed from the output. In order to see the effect of such functionality
the index.xml file has a few elements with such date/time windows (search
for the "audience" attribute).

If you execute adado such that:

adado -Ddocbook.extra.args='"--stringparam profile.audience true"'

you are enabling the processing of the date-time windows present in the 
document. After ada finishes, check the scratch/index.html and you'll see most
of the data has vanished. This is because none of their date-time windows are
active. If you want to activate them, run again the command although this time
with the options (you might need to remove index.html, since an invokation
with a different set of options is not detected as a change and no file
is re-built):

adado -Ddocbook.extra.args='"--stringparam profile.audience true \
         --stringparam ada.audience.current.date 2108-01-01T00:00:00"'  

The new given date/time is taken ad the current one. One extra line appears in index.html.

Keep increasing the YEAR one by one and you'll see the rest of the site
appearing sequentially.

