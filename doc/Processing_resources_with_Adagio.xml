<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of Adagio: Agile Distributed Authoring Integrated Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!--                                                              -->
<!--                    PROCESSING RESOURCES                      -->
<!--                                                              -->
<!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<section id="Processing_resources_with_Adagio"
         xreflabel="Top of the Section">
  <title id="Processing_resources_with_Adagio_title">Processing resources with
  Adagio</title>
  <qandaset>
    <qandaentry id="run_adagiocheck" 
		xreflabel="Which resources are processed by Adagio">
      <question>
        <para>What kind of resources can be processed by Adagio?</para>
      </question>
      <answer>
        <para>Adagio is a building tool, and to <quote>build</quote> a resource
        needs some applications to be properly installed in your computer. To
        see what tools are managed by Adagio and available in your computer,
        open a shell (a regular shell in Linux or a Cygwin shell in Windows) and
        type the command:</para>

        <programlisting>$ <command>adagiocheck</command></programlisting>
        
        <para>Adagio prints the value of some relevant variables followed by the
        list of the tools that are available. For example:</para>

        <programlisting><xi:include href="AdagioCheckOut.txt"
        parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

        <para>This listing shows the tools available to Adagio. If you don't
        have all of them, you may install them with your software management
        application. Adagio still can work with a subset of these tools by
        skipping those rules for which the applications are not
        installed.</para>

	<para>If a tool is installed but its path to the executable is not part
	of the <command>PATH</command> environment variable, Adagio will rule it
	as <quote>disabled</quote>. Make sure you add the appropriate paths to
	the environment variable.</para>
      </answer>
    </qandaentry>

    <qandaentry id="how_to_run_adagio" xreflabel="How to define which files to process">
      <question>
        <para>How to tell Adagio which files should be processed?</para>
      </question>
      <answer>
        <para>Adagio asumes that there is a text file with name
        <filename>Properties.dgo</filename> containing the rules to process the
        files in that folder. The format of this file is as follows (based on
        the <filename>INI</filename> format used in Microsoft products):</para>

	<itemizedlist>
	  <listitem>
	    <para>A rule is included surrounded by square brackets at the
	    begining of a line. The set of rules are fixed in advance by
	    Adagio. Open the command interpreter and type <command>adagio
	    help</command> for a list of the rules available. A rule applies a
	    fixed set of operations to the values stored in a pre-defined set of
	    variables. These variables can be modified in the rule file by
	    writing the variable name followed by an equal sign and the values
	    to assign. Rules names may be followed by an arbitrary set of
	    additional names separated by dots. By using these names, a rule
	    file may have multiple rules of the same type. For example:</para>
	    
	    <programlisting># Process remote location 1
[gotodir.placeA]
dst_dir = ../placeA

# Process remote location 2
[gotodir.placeB]
dst_dir = ../../placeB

# Transform local files to PNG
[inkscape.local]
files = file*.svg figure*.svg

# Transform remote files and leave PNGs in this folder
[inkscape.non_local]
src_dir = ../../otherfigures
files = f1.svg f2.svg

# Files to export when this directory is invoked from a remote location	      
[export]
files = file*.png f*.png</programlisting>

            <para>Comments can be inserted in the rule file by starting the
            lines with the symbol <quote>#</quote>. The first rule is of type
            <quote>gotodir</quote> and has name <quote>placeA</quote>. Upon
            execution, Adagio changes to the directories given in the variable
            <code>dst_dir</code> and executes the rule file (if any) there. The
            second rule is of the same type, with name <quote>placeB</quote> and
            performs the same task on directory
            <filename>../../placeB</filename>.</para>

	    <para>Rules third and fourth use the program
	    <command>inkscape</command> to transform files in
	    <filename>SVG</filename> format into <filename>PNG</filename>. The
	    first rule (with name <quote>local</quote>) applies this
	    transformation to all files in the current directory that match the
	    two given expressions. The second inkscape rule (with name
	    <quote>non_local</quote>) sets variable <command>src_dir</command>
	    to point to a different directory, processes the files specified by
	    variable <code>files</code> and leaves the result in the current
	    directory.</para>

	    <para>The last rule defines the set of files that should be exported
	    from this directory in case Adagio is invoked from a different
	    location using the <quote>gotodir</quote> rule.</para>

	    <para>Several files can be specified using <quote>*</quote> and
	    <quote>?</quote> in the file names.</para>
	  </listitem>

	  <listitem>
	    <para>Rules are executed in the order in which they appear in the
	    rule file. When Adagio is invoked with no parameters, all rules
	    (except those of type <code>rsync</code>) are executed. The
	    <code>rsync</code> file is only executed if explicitly given when
	    invoking Adagio. If rule names are given in the command line as
	    parameters, only those rules in the orden in which they are given
	    are executed. For example:</para>

	    <programlisting><command>adagio gotodir.placeB inkscape.non_local</command></programlisting>
	    
	    <para>Executes only two of the rules in the previous file.</para>
	  </listitem>

	  <listitem>
	    <para>All rules have a set of variables from which the values to
	    perform the operations are taken. All these variables have default
	    values. For every rule available in Adagio, the rule
	    <command>rule.help</command> explains the procedure executed by the
	    rule and the variables used.</para>
	  </listitem>

	  <listitem>
	    <para>The rule <quote>DEFAULT</quote> can be included at any point
	    in a rule file and contains definitions of variables that are not
	    attached to any rule and therefore are global to all of them. These
	    variables can be used in the values assigned to other variables by
	    including their names with the prefix <quote>%(</quote> and the
	    suffix <quote>)s</quote>. For example:</para>

	    <programlisting>[DEFAULT]
material_dir = /user/myhome/myproject

[xslt]
file = index.xml
styles = %(material_dir)s/mystyle.xsl</programlisting>

            <para>Variable <code>material_dir</code> is defined in the
	    <command>[DEFAULT]</command> rule and is then used in the
	    <command>xslt</command> rule. This mechanism is useful to collect
	    definitions of values common to several rules and store them in
	    global variables.</para>
	  </listitem>
	</itemizedlist>
      </answer>
    </qandaentry>
    
    <qandaentry id="rule_files_read" xreflabel="Which rule files are processed">
      <question>
	<para>Which rules files are processed by Adagio and in which
	order?</para>
      </question>
      <answer>
	<para>Although the main rule file is in the current directory, Adagio
	checks for the following additional rule files in the given
	order:</para>

	<itemizedlist>
	  <listitem>
	    <para>Default values for all variables hardwired in the Adagio
	    code.</para>
	  </listitem>
	  <listitem>
	    <para>Rule file with name <filename>.adagiorc</filename> in the user
	    home directory if it exists. This file can be used to include rules
	    and variable values that apply to the environment of a particular
	    user. For example, if a user has installed the tool Gimp and the
	    executable is called <filename>gimp-2.6</filename> (instead of
	    <filename>gimp</filename> which is the default value of the
	    <command>executable</command> variable in the Gimp rule), the value
	    can be changed for that user by including the following definition
	    in the <filename>.adagiorc</filename> file:</para>

	    <programlisting>[gimp]
executable = gimp-2.6</programlisting>
	  </listitem>

	  <listitem>
	    <para>Rule file with name <filename>Adagio.project</filename> if it
	    exists in any of the directories above the current one. Adagio
	    checks for the existence of this file in the current folder, then in
	    the parent folder, and so on. If a file with that name is found, all
	    the definitions are considered.</para>

	    <para>The purpose of this file is to store project-wide
	    definitions. These are variables and values that are relevant for a
	    project. The idea is to place this file at the root folder of that
	    project and Adagio automatically detects it and reads its
	    content.</para>
	  </listitem>
	  
	  <listitem>
	    <para>Rule file in the current directory.</para>
	  </listitem>

	  <listitem>
	    <para>Assignments given in the command line when executing
	    Adagio.</para>
	  </listitem>
	</itemizedlist>

	<para>If a variable is assigned a value in more than one of these files,
	only the last assignment is considered.</para>
      </answer>
    </qandaentry>

    <qandaentry id="adagio" xreflabel="How to execute Adagio">
      <question>
        <para>How to tell Adagio to build all the resources?</para>
      </question>
      <answer>
        <para>Once the file <filename>Properties.dgo</filename> with the
        required rules is present in a directory, to execute these rules simply
        open the git command interpreter, go to the proper directory and type
        the following command:</para>

        <programlisting>$ <command>adagio</command></programlisting>

        <para>The messages on the screen include the directories visited by
	Adagio as well as the rules executed in each of them.For example:</para>

        <programlisting>$ <command>adagio</command>
++ /home/you/YourDirectory/YourMaterial
BB inkscape
Producing figure.png
EE inkscape
BB xslt
Producing index.html
EE xslt
BB export
No destination for export. Bypassing.
EE export
-- /home/you/YourDirectory/YourMaterial
$</programlisting>
        
        <para>The previous figure shows the result of applying the rules in
        <ulink
        url="Samples/SimpleDoc/Properties.dgo"><filename>Properties.dgo</filename></ulink>. Every
        time Adagio visits a directory, a line starting with <quote>++</quote>
        followed by the directory name is written. Whenever a rule is executed,
        a line starting with <quote>BB</quote> followed by the rule name is
        written. Analogously, when the target finished execution, a line with
        the prefix <quote>EE</quote> is written, and when all rules in a
        directory have been executed, a line with the prefix <quote>--</quote>
        followed by the directory name is written. If the execution of Adagio in
        a remote directory is invoked with the rule <command>gotodir</command>,
        the messages are indented two spaces. With this notation (indented
        messages at when entering/leaving a directory and when
        starting/finishing a rule) the user can easily locate which rule in
        which directory is being executed.</para>

	<para>In the previous example four rules were executed in the current
	directory: <command>inkscape</command>, <command>xslt</command>, and
	<command>export</command>. The last one of them though, had no effect
	because no export destination was specified.</para>

        <para>If an error occurs while Adagio executes the rules, the
        information about the anomaly is stored in the file
        <filename>build.out</filename> and the first lines are shown on the
        screen as ilustrated in the following example:</para>

        <programlisting>$ <command>adagio</command>
++ /home/you/YourDirectory/YourMaterial
BB inkscape
figure.png up to date. Bypassing.
EE inkscape
BB xslt
Error while parsing /home/you/YourDirectory/YourMaterial/index.xml
Opening and ending tag mismatch: informalfigure line 21 and section, line 44, column 11
$</programlisting>

        <para>Additionally, all the internal operations executed by Adagio are
	stored in the file <filename>adagio.log</filename> in the current
	directory. The amount of information in that file is controlled by the
	option <command>-d debuglevel</command> or the default variable
	<command>debug_level</command>.</para>
      </answer>
    </qandaentry>
        
    <!-- **************** REWRITE REQUIRED FROM HERE ********************** -->

    <qandaentry id="property_in_command_line" xreflabel="How to execute with
							 one variable modified">
      <question>
	<para>Can I execute the <command>adagio</command> once but with one
	single variable modified from the definition in
	<filename>Properties.dgo</filename>?</para>
      </question>
      <answer>
	<para>Yes. In fact, you may include as many variable definitions in
	the command line as you see fit. They need to be provided with the
	following format:</para>
	
	<programlisting>-s 'rule name value'</programlisting>
	
	<para>Note that with this notation, the value cannot contain
	spaces.</para>
	
      </answer>
    </qandaentry>
    
    <qandaentry id="adagio_project_home"
		xreflabel="How to re-use definitions across an entire project">
      <question>
	<para>Can I have variables that are used in different locations within a
	<quote>project</quote>?</para>
      </question>
      <answer>
	<para>Yes. Although there is no formal definition of
	<quote>project</quote> within Adagio, it is very common to have
	variables that are used in several files within a project. The is solved
	in Adagio is by detecting a special directory in the hierarchy called
	the <emphasis>project home</emphasis> directory. The idea is for users
	to have multiple of these directories, one for each large project of
	shared resources.</para>
	
	<para>Adagio tries to provide the least invasive solution, so rather
	than requiring an extra definition with the location of this project
	home directory, it detects it automatically by searching for the file
	with name <filename>Adagio.project</filename> in up to ten levels of
	directories above the current one. If a file with this name is found,
	the global variable <varname>project_home</varname> is then assinged the
	directory where the file is located.</para>
	
	<para>For example, let us assume that your project uses a stylesheet to
	process files in multiple locations. You may include the following
	definition in <filename>Adagio.project</filename>:</para>

	<programlisting>[xslt]
styles = %(project_home)s/MyStyleDir/style.xsl</programlisting>

        <para>All <command>xslt</command> rules defined in your project will
	have the variable <command>styles</command> with this value, unless it
	is overwritten by a definition in the local file.</para>
      </answer>
    </qandaentry>

    <qandaentry id="extending_vars" 
		xreflabel="How to append values to a variable">
      <question>
	<para>A variable contains a set of values, but I would like to add some
	more. How can I extend the values assigned to a variable?</para>
      </question>
      <answer>
	<para>New values can be appended to any variable in Adagio (as if they
	were written separated by a space at the end of the current value) by
	using the following syntax:</para>

	<programlisting>var<command>+</command> = new values</programlisting>

	<para>An assignment with the variable name terminated with the
	<quote>+</quote> symbol is taken as an addition to the current
	value.</para>

	<para>For example, variable <quote>foo</quote> has been defined with the
	following assignment within a rule:</para>

	<programlisting>foo = a b c d</programlisting>

	<para>and then, the following assignment/extension is included:</para>

	<programlisting>foo+ = e f g</programlisting>

	<para>the final value of the variable is <quote>a b c d e f
	g</quote>.</para>
      </answer>
    </qandaentry>

    <qandaentry id="rule_alias" xreflabel="Can I give a name to a rule">
      <question>
	<para>Once a rule has been defined, Can I assign a different name to
	it?</para>
      </question>
      <answer>
	<para>Yes. For every rule you may define the variable
	<quote>alias</quote> with an alternative name for that rule. For
	example, in the following rule file, an alias is defined for the
	<command>xslt</command> rule:</para>

	<programlisting>[xslt.auxiliary_document]
alias = auxiliary_document
style = %(project_home)/Styles/AuxStyle.xsl</programlisting>

        <para>The rule can now be referred simply as
	<quote>auxiliary_document</quote>.</para>
      </answer>
    </qandaentry>

    <qandaentry>
      <question>
	<para>Can I include other files in a rule file?</para>
      </question>

      <answer>
	<para>Yes. You may include <quote>in place</quote> any file by using the
	special rule <command>template</command>. This rule only admits the
	assignment of a single variable <command>files</command> containing the
	files that are included on that point. For example:</para>

	<programlisting>[template]
files = %(project_home)s/Templates/t1.ini %(project_home)s/Templates/t2.ini</programlisting>
        <para>includes two files from a remote directory in place of the
	<command>template</command> rule.</para>
      </answer>
    </qandaentry>
    <!--
    <qandaentry id="global_vars" xreflabel="Which variables are already defined">
    </qandaentry>
    -->
  </qandaset>
</section>

<!--
Local Variables: 
compile-command: "adagio"
End:
-->
