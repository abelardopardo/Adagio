<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<article id="ADA_FAQ">
  <title>ADA Frequently Asked Questions</title>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                         WHAT IS ADA                          -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="About_ADA">
    <title>About ADA</title>

    <para>
      You may also access to the <ulink url="FAQ.pdf">PDF version of this
      document</ulink>.
    </para>

    <qandaset defaultlabel="qanda">
      <qandaentry id="whatisada">
	<question>
	  <para>What is ADA?</para>
	</question>
	<answer>
	  <para>
	    ADA is a tool that provides support for <quote>Agile and Distributed
	    Authoring</quote>. Authors (in general) use a combination of tools
	    to produce documents. The actual variety of documents makes more
	    appropriate to refer to this items as resources. A resource may
	    perfectly be a regular text document, but today it may also be a
	    screen capture, video clip, audio clip, picture, etc. ADA is
	    conceived to manipulate resources in this context.
	  </para>
	  <para>
	    The challenge appears when a large set of resources with a complex
	    structure is created by a large number of authors working in a
	    distributed environment.
	  </para>

	  <para>
	    The first problem is the variety of tools used by the authors. ADA
	    facilitates the post-processing by automatically producing
	    preliminary versions of the created resources. The following figure
	    illustrates a potential environment and the support provided by ADA.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/AuthorEnv.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Author environment and ADA role</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    Once created, these files (not the sources) can be sent to a
	    location where they are automatically combined to produce the final
	    resource. The following figure illustrates a potential scenario
	    combining these two aspects.
	  </para>
	  
	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/Kitchen.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Combining resources with ADA</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    ADA offers support in two steps of this procedure.
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		To the author: ADA provides a simple automatic procedure to see
		the approximate appearance of the created resources. The author
		may focus on the content and verify that the appearance complies
		with certain minimum requirements.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		In the production phase: ADA allows specifying a simple set of
		rules to automatically combine all the contributions from
		different authors to obtain a complex resource.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    The main element for ADA are the rule files. These files have the
	    name <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename> (although
	    it can be changed) and specify which are the resource files and how
	    they need to be processed to obtain the final resources.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="whatisnotada">
	<question>
	  <para>What ADA is not?</para>
	</question>
	<answer>
	  <para>
	    ADA is not a text editor, nor a graphic editor, nor an integrated
	    creative environment. The author may use tools to create the
	    resources, and ADA is used to automatically contribute to the
	    overall creation process.
	  </para>

	  <para>
	    To use an analogy, ADA offers a very efficient courier service that,
	    if you comply with certain requirements when creating resources, it
	    takes them very quickly to the assembling plant, combines them with
	    other resources contributed by other authors and automatically
	    creates a final resource.
	  </para>
	</answer>
      </qandaentry>
      <qandaentry id="whyisadaneeded">
	<question>
	  <para>Why is ADA needed?</para>
	</question>
	<answer>
	  <para>
	    ADA is oriented toward reducing the creation/modification cycle of a
	    set of resources with a non-trivial organization. In the information
	    era, the creation process is changing radically. Authors are no
	    longer required to use a concrete tool, but instead, certain formats
	    are used to easily publish content. But what really takes a
	    multi-user distributed authoring scenario to a new dimension is an
	    easy modification cycle. Think Wikipedia. The distributed authoring
	    paradigm is beyond any doubt, but in order for those authors to
	    truly contribute, resources are extremely easy to modify.
	  </para>

	  <para>
	    A typical situation when a number of authors contribute toward a
	    common resource is illustrated in the fillowing figure. There is
	    usually an entity that absorbs the complexity of providing a
	    homogeneus view of the material usually through an expensive and
	    time consuming production stage. This production requires then an
	    additional step to bring all the material to the final web
	    publishing platform.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/AuthorCycle.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Conventional authoring cycle</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    The following picture illustrates the change in methodology that can
	    be achieved with the help of ADA. By providing a fast two-way
	    information channel between creation and production, the management
	    of a set of resources can be truly improved. ADA provides the rules
	    that automatically connect the source documents with the final
	    published resources such that changes can be performed at a very
	    low turnaround cost.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/AuthorNewCycle.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Conventional authoring cycle</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>
	  
	  <para>
	    But aside from the turnaround time for changes, resources tend to be
	    built recursively from the author contributions. The internal
	    organization of a resource can be often replicated in the process in
	    which it is built. To create the final electronic version of a book,
	    there is certain amount of work that can be done for each chapter
	    individually accompanied by certain inter-chapter processing. The
	    rules defined in ADA are prepared to be applied hierarchically at
	    different points of the overall production procedure. The following
	    picture illustrates a hypothetical scenario in which a resource is
	    built by combining resources from four authors in three gradual
	    stages.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/ProductionCycle.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Full production cycle with ADA</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	</answer>
      </qandaentry>
    </qandaset>
  </section>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                    INSTALLATION IN WINDOWS                   -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="Installing_ADA_in_Windows">
    <title>Installing ADA in Windows</title>
    <qandaset defaultlabel="qanda">
      <qandaentry id="requiredapplicationsinwindows">
	<question>
	  <para>What are the required applications to run ADA in Windows?</para>
	</question>
	<answer>
	  <para>
	    ADA needs at least three packages to run in windows:
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>A Java Run Time Environment.</para>
	    </listitem>
	    <listitem>
	      <para>
		<ulink url="http://www.cygwin.com">Cygwin</ulink>: A linux-like
		environment for Windows.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Ant: A Java based build tool. ADA relies on ANT to decide which
		documents to build and which tools to use for the task.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    Aside from these three tools, ADA allows to process certain file
	    types if some additional programs are installed. For example,
	    translating figures from SVG to PNG can be done using Inkscape but
	    it needs to be previously installed.
	  </para>
	</answer>
      </qandaentry>
      
      <qandaentry id="how_to_install_jre" 
		  xreflabel="Java has been installed">
	<question>
	  <para>How to install a Java Run-time Environment in Windows?</para>
	</question>
	<answer>
	  <para>
	    Java is a free tool developed by Sun Microsystems and the
	    instructions on how to install it in windows provided with the
	    package. You may download the software from <ulink
	    url="http://www.java.com/en/download/download_the_latest.jsp">the
	    official Free Java Download page</ulink>. Once the download
	    finishes, execute the installer that asks a few simple questions and
	    installs Java in your system.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="howtoinstallcygwin">
	<question>
	  <para>I got Java already installed, What else is required?</para>
	</question>
	<answer>
	  <para>
	    Once <xref linkend="how_to_install_jre"/>, the next step is to
	    download the <code>cygwin</code> tool, a linux-like environment for
	    Windows. Once downloaded, the initial page of the installer is shown
	    in the following figure.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/CygwinSetUp.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Initial Cygwin Setup Program</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    After starting the set-up program, you need to specify several
	    parameters to establish a connection with a server. Keep advancing on
	    the installation steps until the screen to select the packages like
	    the one in the following figure is shown.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/CygwinSelectPackages.png"
			   format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Screen to select packages in Cygwin</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    Click in the button with name <code>View</code> that appears above
	    the package list until the word <quote>Full</quote> appears to its
	    left. At that point, all packages suitable to be installed are shown
	    alphabetically ordered. From the list, you need to select
	    <emphasis>at least</emphasis> the following packages.
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		<code>docbook-xml43 (or more recent)</code>: Docbook XML DTD
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<code>docbook-xsl</code>: XSL stylesheets for the DocBook XML DTD
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<code>git</code>: Fast version control system used to download
		the latest ADA version.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    ADA is capable of using additional tools, but they are not essential
	    for the installation. The set-up program takes a few minutes to
	    download (through a net connection) all the required packages. This
	    step will take a few minutes and will depend significantly on the
	    speed of that connection. The installer application can be executed
	    at any time to add/remove applications to the environment.
	  </para>

	  <para>
	    After all the required packages are installed, finish the execution
	    of the set-up program and start a Cygwin shell. This is usually done
	    by clicking on the icon that the set-up program has left on your
	    desktop or browsing through the program menu and selecting the
	    Cygwin executable. Once started, a window like the one shown in the
	    following figure appears on the screen.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/CygwinShell.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Cygwin shell screen</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    This window is a typical linux command interpreter ready to process
	    your commands. The first check is to make sure the Java Run-time
	    Environment is properly installed. Type the command:
	  </para>

	  <programlisting>which java</programlisting>

	  <para>
	    If the answer is a single path to a file with name
	    <code>java</code> similar to
	  </para>

	  <programlisting>/cygdrive/c/WINDOWS/system32/java</programlisting>
	  
	  <para>
	    the JRE is properly installed. If the message says that <quote>no
	    java in (/usr/local/bin:/usr/bin:/....)</quote> you need to review
	    your Java installation.
	  </para>

	</answer>
      </qandaentry>

      <qandaentry id="install_ant" xreflabel="Ant installation">
	<question>
	  <para>Got Java and Cygwin installed, now what?</para>
	</question>
	<answer>
	  <para>
	    The next tool required by ADA is <ulink
	    url="http://ant.apache.org">Ant</ulink>, a Java based build
	    tool. Ant is supposed to be a multi-platform tool, and the
	    installation simply amounts to downloading a zip file, deploying its
	    files in a directory, and declaring a couple of environment
	    variables.
	  </para>

	  <para>
	    When deploying Ant in a directory there are two choices: install Ant
	    as a regular windows application, or install Ant inside
	    Cygwin. Since Ant is simply a Java program, the two choices are very
	    similar because it only requires Java to be available. The important
	    step is to set the environment variables ANT_HOME to point to the
	    new directory and <code>PATH</code> to include the
	    <filename>bin</filename> directory within Ant.
	  </para>

	  <para>
	    To add a new variable or modify a current variable in the execution
	    environment in Windows you need to first select the <quote>Control
	    Panel</quote>, then select the <quote>System</quote> link. A new
	    window opens with several panes. Select the pane with name
	    <quote>Advanced</quote> and then click on the button with
	    name <quote>Environment Variables</quote>. It is recommended you
	    insert these definitions as part of the System Variables.
	  </para>

	  <para>
	    A new variable with name <code>ANT_HOME</code> (all uppercase) has
	    to be declared and its value must be the directory where the Ant
	    files where deployed from the zip archive. Additionally, the
	    <code>PATH</code> variable (which is already defined) needs to be
	    modified by adding the path to the <filename>bin</filename>
	    directory within the Ant installation directory.
	  </para>

	  <para>
	    Once the installation is finished, you may check the availability of
	    the tool by opening a new Cygwin window. Type the command
	  </para>

	  <programlisting>which ant</programlisting>

	  <para>
	    If the answer is a single path to a file with name
	    <code>ant</code> such as
	  </para>

	  <programlisting>/cygdrive/c/Program Files/apache-ant-1.7.0/bin/ant</programlisting>
	  
	  <para>
	    Ant is properly installed. If the message says <quote>no
	    ant in (/usr/local/bin:/usr/bin:/....)</quote> you need to review
	    your installation.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="Fetch_ada_in_windows">
	<question>
	  <para>
	    Once I have the JRE, Cygwin and Ant, How do I get ADA?
	  </para>
	</question>
	<answer>
	  <para>
	    Open a Cygwin shell and go to the directory where you want ADA
	    installed. Execute the command:
	  </para>
	  <programlisting>git clone <xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='ADA_DOWNLOAD_URL']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
	  <para>
	    After a few seconds, a new directory with name ADA is created
	    containing all the required files.
	  </para>
	  <para>
	    In order to make ADA available, the PATH environment variable needs
	    to be modified by adding the path to the <filename>bin</filename>
	    directory. You may follow the procedure described in the <xref
	    linkend="install_ant"/>.
	  </para>

	  <para>
	    Once the environment variable <code>PATH</code> has been modified to
	    include the <filename>bin</filename> directory within ADA, open a
	    brand new Cygwin shell and type the following command
	  </para>
	  
	  <programlisting>which adado</programlisting>
	  
	  <para>
	    As in the case of the <xref linkend="install_ant"/>, if the
	    answer is a single path to the <filename>adado</filename> file
	    similar to
	  </para>

	  <programlisting>/home/.../.../ADA/bin/adado</programlisting>
	  
	  <para>
	    ADA is properly installed. If the message says <quote>no
	    adado in (/usr/local/bin:/usr/bin:/....)</quote> you need to review
	    your installation.
	  </para>

	  <para>
	    The final step to make sure that the commands provided by ADA are
	    available is to try <xref linkend="run_adacheck"/>.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="new_version_upgrade">
	<question>
	  <para>
	    A new version of ADA has been published, how do I upgrade?
	  </para>
	</question>
	<answer>
	  <para>
	    ADA is distributed using the tool <command>git</command> which keeps
	    track of the files you already have and the changes that need to be
	    applied to upgrade to the latest version. The upgrade process
	    requires simply to open a cygwin shell window, go to the directory
	    where ADA is installed and execute the command:
	  </para>

	  <programlisting>git pull</programlisting>

	  <para>
	    The command will inform in some fairly cryptic way of the changes
	    that are taking place. In principle, if the source files have not
	    been modified, the change will go smoothly. If you have some
	    personal modifications in the source files, there could be some
	    conflicts when <command>git</command> tries to merge these changes
	    with the ones related to the upgrade. If such situation happens, it
	    is called a conflict and it needs to be solved manually by the
	    user. If you touched the source code of ADA, it is assumed you know
	    how to solve merge conflicts.
	  </para>
	</answer>
      </qandaentry>
    </qandaset>
  </section>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                    INSTALLATION IN LINUX                     -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
<!--   <section>     -->
<!--     <title>Installing ADA in Linux</title> -->

<!--   </section> -->

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                    PROCESSING RESOURCES                      -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="Processing_resources_with_ADA">
    <title>Processing resources with ADA</title>
    <qandaset>
      <qandaentry id="run_adacheck" xreflabel="Running adacheck">
	<question>
	  <para>What kind of resources can be processed by ADA?</para>
	</question>
	<answer>
	  <para>
	    ADA is a building tool, and to <quote>build</quote> a resource
	    it needs some applications to be available in your computer. In
	    order to see what tools is able to manage ADA and which one of them
	    are available, open a shell (a regular shell in Linux or a Cygwin
	    shell in Windows) and type the command
	  </para>

	  <programlisting>adacheck</programlisting>

	  <para>
	    ADA prints the value of several important internal variables
	    followed by a list of the tools that is capable of using and if
	    they are ready to be used by the current installation. For example:
	  </para>

	  <programlisting><xi:include href="AdaCheck.txt"
	  parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>
	</answer>
      </qandaentry>

      <qandaentry id="how_to_run_ada" xreflabel="How to run ADA">
	<question>
	  <para>How to tell ADA which files should process and how?</para>
	</question>
	<answer>
	  <para>
	    ADA is a tool that needs from the user a set of files to apply
	    certain pre-conceinved production rules.  This information is all
	    contained in a regular text file with name <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>. The
	    structure of this file is very simple, any line starting with the
	    symbol <quote>#</quote> is ignored. Every empty line is ignored. The
	    rest of lines must have the structure <code>name=value</code>. The
	    set of names is defined by ADA. Refer to the following questions to
	    know which names and values are possible.
	  </para>

	  <para>
	    The following figure illustrates how these rules are applied to a
	    set of files in the author space to produce resources.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/Rules.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Rules used by ADA</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>
	</answer>
      </qandaentry>

      <qandaentry id="properties_txt" xreflabel="Examples of property files">
	<question>
	  <para>What is the typical structure of the 
	  <filename><xi:include
	  href="Params.xml"
	  xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename> file?
	  </para>
	</question>
	<answer>
	  <para>
	    It depends mainly on the type of work you want ADA to perform in
	    that directory. For example, if the only task to perform is to take
	    two files and mark them as material suitable to be exported
	    somewhere else, then the file would have a structure such as:
	  </para>
	  
	  <programlisting>export.files=filetocopy1.ext \
             filetocopy2.ext</programlisting>

	   <para>
	     A list of file may be broken accross multiple lines using the
	     symbol <code>\</code>. 
	   </para>
	   
	   <para>
	     Suppose that the task to execute in a local directory needs the
	     previous creation of auxiliary material in another directory. ADA
	     allows the definition of a list of directories that are recursively
	     processed before processing the material in the local directory
	     (see <xref linkend=""/> for a detailed description). For example:
	   </para>

	   <programlisting>subrecursive.dirs=../../Material/Author1

export.dst.dir=../scratch/Theory2
export.files=ASM_notes-1x2.pdf

clean.files=../scratch/Theory2</programlisting>

            <para>
	      This property file says that before performing any rule in this
	      directory, directory <filename>../../Material/Author1</filename>
	      must be processed. The files exported in that remote directory are
	      copied to the local directory. No additional processing is
	      described except that the file to export is
	      <filename>ASM_notes-1x2.pdf</filename> and the destination of the
	      export action is the directory
	      <filename>../scratch/Theory2</filename>.
	    </para>

	    <para>
	      As it can be seen in the example, aside from the rules to create
	      the proper resources, a list of files or directories to clean can
	      be given to use when the directory needs to be re-generated from
	      the beginning.
	    </para>
	</answer>
      </qandaentry>

      <qandaentry id="adado" xreflabel="How to execute ADA">
	<question>
	  <para>How to tell ADA to build all the resources?</para>
	</question>
	<answer>
	  <para>
	    ADA needs a file with name <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	    with the definitions of the files to process and the rules to
	    apply. Once such file has been created, to build the resources
	    simply open a shell (regular shell in Unix or a Cygwin shell in
	    Windows) and type the command
	  </para>
	  <programlisting>adado</programlisting>
	</answer>
      </qandaentry>
	  
      <qandaentry id="variable_catalog">
	<question>
	  <para>How to know the variables that can be included in the <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename> file?
	  </para>
	</question>

	<answer>
	  <para>
	    A sample with all the variables that can be defined in the
	    definition file can be found in where ADA is installed in the file
	    in <filename>AntImports/Properties.txt</filename>. All definitions
	    are commented out, therefore, the file can be used as the initial
	    template to craft a specific definition file.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="process_xfig">
	<question>
	  <para>How to process a figure with Xfig?</para>
	</question>
	<answer>
	  <para>
	    Open Xfig and create a figure. Save it in Xfig format. Suppose that
	    the figure needs to be translated to PNG format. Open the file
	    <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	    (if not created, see <xref linkend="how_to_run_ada"/>) and set the
	    following variables:
	  </para>

	  <informaltable frame="all" id="xfig_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>xfig.exec</varname></entry>
		  <entry>
		    Name of the xfig executable installed in the system
		  </entry>
		  <entry><filename>fig2dev</filename></entry>
		</row>
		<row>
		  <entry><varname>xfig.src.dir</varname></entry>
		  <entry>Directory from where to take the figures</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>xfig.dst.dir</varname></entry>
		  <entry>Directory where to leave the processed figures</entry>
		  <entry>Value of <varname>xfig.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>xfig.output.format</varname></entry>
		  <entry>
		    Figures are translated to this format. The formats supported
		    by xfig are png, eps, gif, jpg, latex, map, etc. For a
		    detailed list check the manual page of <code>fig2dev</code>..
		  </entry>
		  <entry><filename>png</filename></entry>
		</row>
		<row>
		  <entry><varname>xfig.files</varname></entry>
		  <entry>
		    Space or comma separated list of file names (with no path)
		    of the figures to process
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>xfig.border</varname></entry>
		  <entry>
		    Border in pixels to add around the figure
		  </entry>
		  <entry>2</entry>
		</row>
		<row>
		  <entry><varname>xfig.smooth</varname></entry>
		  <entry>
		    Smooth factor to pass to Ghostscript to improve rendering.
		  </entry>
		  <entry>4</entry>
		</row>
		<row>
		  <entry><varname>xfig.extra.args</varname></entry>
		  <entry>
		    Additional options to pass directly to <code>fig2dev</code>.
		  </entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    For example. If the figures with names
	    <filename>sign.fig</filename> and <filename>office.fig</filename>
	    are stored in the current directory and versions in png format need
	    to be created in the same directory, the following assignment is
	    required in the file <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>.
	  </para>

	  <programlisting>xfig.files=sign.fig office.fig</programlisting>

	  <para>
	    With such values defined, execute ADA to obtain the processed
	    figures (see <xref linkend="adado"/>).
	  </para>

	  <para>
	    If you may use files in a different directory, or the produced files
	    need to be stored in a different directory, include the additional
	    variable assignments in the file <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>.
	  </para>

	</answer>
      </qandaentry>

      <qandaentry id="inkscape_processing">
	<question>
	  <para>How to process a figure with Inkscape?</para>
	</question>
	<answer>
	  <para>
	    Open Inkscape and create a figure. Save it in SVG format. Suppose
	    that this figure needs to be translated to PNG format. Open the file
	    <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	    (if not created, see <xref linkend="how_to_run_ada"/>) and set the
	    following variables:
	  </para>

	  <informaltable frame="all" id="inkscape_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>inkscape.exec</varname></entry>
		  <entry>
		    Name of the inkscape executable installed in the system
		  </entry>
		  <entry><filename>inkscape</filename></entry>
		</row>
		<row>
		  <entry><varname>inkscape.src.dir</varname></entry>
		  <entry>Directory from where to take the figures</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>inkscape.dst.dir</varname></entry>
		  <entry>Directory where to leave the processed figures</entry>
		  <entry>Value of <varname>inkscape.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>inkscape.output.format</varname></entry>
		  <entry>
		    Figures are translated to this format. Allowed values:
		    <filename>png</filename>, <filename>eps</filename>
		    (Encapsulated Postscript), <filename>ps</filename>
		    (Postscript) or <filename>pdf</filename>.
		  </entry>
		  <entry><filename>png</filename></entry>
		</row>
		<row>
		  <entry><varname>inkscape.files</varname></entry>
		  <entry>
		    Space or comma separated list of file names (with no path)
		    of the figures to process
		  </entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    For example. If the figures with names
	    <filename>chart.svg</filename> and <filename>graph.svg</filename>
	    are stored in the current directory and versions in png format need
	    to be created in the same directory, the following assignment is
	    required in the file <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>.
	  </para>

	  <programlisting>inkscape.files=chart.svg graph.svg</programlisting>

	  <para>
	    With such values defined, execute ADA to obtain the processed
	    figures (see <xref linkend="adado"/>).
	  </para>

	  <para>
	    If you may use files in a different directory, or the produced files
	    need to be stored in a different directory, include the additional
	    variable assignments in the file <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="generic_rule">
	<question>
	  <para>What if I have lots of figures. Do I need to write all their
	  file names in <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>?
	  </para>
	</question>
	<answer>
	  <para>
	    No. Two regular expression patterns are allowed.
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para><quote>*</quote> matches zero or more characters</para>
	    </listitem>
	    <listitem>
	      <para><quote>?</quote> matches one character</para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    For example, if you have several figures and each of them have a
	    version in English (with extension <code>.en.svg</code>) and a
	    version in Spanish (with extension <code>.es.svg</code>), you may
	    select all of them wit the expression <code>*.e?.xml</code>.
	    dot. These patterns may be used anywhere file lists are required
	    unless otherwise noticed.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="property_in_command_line" xreflabel="How to execute with
							   one variable modified">
	<question>
	  <para>
	    Can I execute the <code>adado</code> command one time but with one
	    single variable modified from the definition in
	    <filename><xi:include href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml" xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>?
	  </para>
	</question>
	<answer>
	  <para>
	    Yes. In fact, you may include as many variable definitions in the
	    command line as you see fit. They need to be provided with the
	    following format:
	  </para>
	  <programlisting>-Dpropertyname=propertyvalue</programlisting>

	  <para>
	    Any argument written beyond <code>adado</code> is directly passed to
	    an invocation of Ant. See the Ant manual for a more detailed
	    discussion of the available options.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="docbook_processing">
	<question>
	  <para>How to process Docbook files in ADA?</para>
	</question>
	<answer>
	  <para>
	    Open your favorite XML editor and create a Docbook XML file. Save it
	    in XML format. Depending on the rendering procedure of your editor,
	    you may need to have your figures available to be shown. If you want
	    to simply apply the regular Docbook XSL Stylesheets, then you need
	    to set the appropriate values to some of these variables in <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	  </para>

	  <informaltable frame="all" id="docbook_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>docbook.exec</varname></entry>
		  <entry>
		    Name of the Xslt processor installed in the system
		  </entry>
		  <entry><filename>xsltproc</filename></entry>
		</row>
		<row>
		  <entry><varname>docbook.src.dir</varname></entry>
		  <entry>Directory from where to take the Docbook files</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>docbook.dst.dir</varname></entry>
		  <entry>Directory where to leave the resulting files</entry>
		  <entry>Value of <varname>docbook.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>docbook.output.format</varname></entry>
		  <entry>
		    Extension to replace the extension <code>.xml</code> in the
		    file name. It must include the dot!
		  </entry>
		  <entry><filename>.html</filename></entry>
		</row>
		<row>
		  <entry><varname>docbook.files</varname></entry>
		  <entry>
		    Space or comma separated list of Docbook file names (with no
		    path) to process
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>docbook.extra.args</varname></entry>
		  <entry>
		    Additional options to pass directly to <code>xsltproc</code>.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>docbook.style.file</varname></entry>
		  <entry>XSL file to use to translate the Docbook file</entry>
		  <entry>Installed Profile Style</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	  
	  <para>
	    For example, if the DocBook document with name
	    <filename>manual.xml</filename> is stored in the current directory
	    and needs to be translated to HTML, the following definition is
	    needed in the file <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>.
	  </para>
	  
	  <programlisting>docbook.files=manual.xml</programlisting>

	  <para>
	    With such values defined, execute ADA to obtain the HTML rendering
	    of the file (see <xref linkend="adado"/>).
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="profiling">
	<question>
	  <para>
	    How to obtain two files from a unique docbook mixing elements in
	    different languages?
	  </para>
	</question>
	<answer>
	  <para>
	    The docbook toolchain offers a powerful functionality called
	    <emphasis>profiling</emphasis> or <emphasis>conditional
	    text</emphasis>. (search for <quote>docbook
	    profiling</quote> for more detailed information). Each docbook
	    element may include a fixed set of attributes that are used to
	    select or ignore portions of a document. The exact definition for a
	    generic attribute <code>attr</code> is:
	  </para>

	  
	  <informaltable frame="all" id="mergestyles_vars">
	    <tgroup rowsep="1" colsep="1" cols="1">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <tbody>
		<row>
		  <entry>
		    <para>
		      If a document contains elements with an attribute with
		      name <code>attr</code> with value <code>val</code>, and
		      the XSLT processor is given the option
		      <code>profile.attr</code> with value <code>val</code>,
		      then all elements that have the attribute
		      <code>attr</code> with a value not containing
		      <code>val</code> are suppressed as if they were not part
		      of the document. To apply a concrete profiling attribute
		      you need to replace <code>attr</code> by the name of your
		      attribute and <code>val</code> by the proper value.
		    </para>
		  </entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
		    
	  <para>
	    The list of attributes which can be used for profiling is fixed by
	    the stylesheets processing Docbook (there are actually more than
	    10). A profiling example is a document that is written in say two
	    languages. Let us just say for the sake of the example these
	    languages are English and Spanish. The docbook XML file needs to
	    have one version for each language, but there might be parts that
	    need to be present in both versions. The attribute to use for such
	    profiling is <code>lang</code>. A possible strategy is to label each
	    paragraph with the attribute <code>lang</code> to the value
	    <code>en</code> if it is in English or <code>es</code> if it is in
	    Spanish.
	  </para>

	  <para>
	    The placement of the <code>lang</code> attribute can be chosen as to
	    minimize the number of duplicated elements and maintain the document
	    as a valid Docbook document. The following example shows a snippet
	    of Docbook in which two versions in English and Spanish are included
	    in the same document with a figure that needs to be also
	    distinguished.
	  </para>

	  <programlisting><![CDATA[    <para lang="es">
      La estructura de esta tabla se puede ver en la siguiente figura:
    </para>

    <para lang="en">
      The structure of this table can be seen in the following figure:
    </para>

    <informalfigure id="reversetable:fig:pagetable">
      <mediaobject>
        <imageobject lang="es">
          <imagedata align="center" fileref="tablestruct.es.png" format="PNG" />
        </imageobject>
        <imageobject lang="en">
          <imagedata align="center" fileref="tablestruct.en.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </informalfigure>]]></programlisting>
	  <para>
	    Note that the placement of the <code>lang</code> attribute is as
	    deep in the hierarchy as possible to increase the number of common
	    elements maintaining the document as correct Docbook. A
	    <code>mediaobject</code> element accepts multiple
	    <code>imageobject</code> elements which itself does not accept
	    multiple <code>imagedata</code> elements.
	  </para>

	  <para>
	    ADA offers rules to do precisely this task, given a docbook
	    containing elements in two languages, English and Spanish, generate
	    two separate files, one containing each version. Once you produced
	    the XML file, set the appropriate values to some of following variables
	    in <filename><xi:include href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml" xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	  </para>

	  <informaltable frame="all" id="bilingualdb_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>bilingualdb.src.dir</varname></entry>
		  <entry>Directory from where to take the Docbook files</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.dst.dir</varname></entry>
		  <entry>Directory where to leave the resulting files</entry>
		  <entry>Value of <varname>bilingualdb.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.output.format</varname></entry>
		  <entry>
		    Extension to replace the extension <code>.xml</code> in the
		    file name. It needs to include the dot!
		  </entry>
		  <entry><filename>.html</filename></entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.files</varname></entry>
		  <entry>
		    Space or comma separated list of Docbook file names (with no
		    path) to process
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.extra.args</varname></entry>
		  <entry>
		    Additional options to pass directly to <code>xsltproc</code>.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.style.file</varname></entry>
		  <entry>XSL file to use to translate the Docbook file</entry>
		  <entry>Docbook Profile Style</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	  
	</answer>

      </qandaentry>

      <qandaentry id="generic_rule">
	<question>
	  <para>Can I specify a generic rule to be applied everywhere?</para>
	  <para>
	    The file <filename><xi:include href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml" xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	    contains rules only valid for the current directory. Is it possible
	    to define how to process a set of files in a way such that it is
	    applied in all the directories? For example, I would like all my
	    *.svg files to be always processed by the Inkscape rule.
	  </para>
	</question>
	<answer>
	  <para>
	    Yes. You may define rules that are already defined when you process
	    the files in a directory. ADA automatically reads first the file
	    with name <filename>.ant.properties</filename> in your home
	    directory. You may insert any rule there that will be defined for
	    all the directories in which you process files. What is even more
	    important, you may override these rules at any time simply by
	    including a new rule in the local <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml" xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	    file.
	  </para>
	  
	  <para>
	    In order to make sure the file <filename>.ant.properties</filename>
	    is placed in the correct location, open a shell window and run the
	    command <code>adacheck</code>. The line containing the variable name
	    <code>user.home</code> displays the home directory where ADA expects
	    the <filename>.ant.properties</filename> file to be processed.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="modified_stylesheet">
	<question>
	  <para>
	    How can I use a slightly modified generic stylesheet without
	    modifying it?
	  </para>
	  <para>
	    I want to use a stylesheet that has lots of parameters to customize
	    its behavior. However, I cannot touch it since it's being shared by
	    a pool of authors.
	  </para>
	  <para>
	    How can I still use such style sheet but set any parameter to my own
	    values?
	  </para>
	</question>
	<answer>
	  <para>
	    ADA offers support for this task automatically by taking all your
	    personal definitions in an extra XML file and merging that file with
	    the regular style file you use.
	  </para>

	  <para>
	    Suppose your style file is in
	    <filename>/path/to/another/location/MainStyle.xsl</filename>. The
	    stylesheet has multiple parameters suitable to be defined. You then
	    create a local stylesheet containing <emphasis>only</emphasis> the
	    definitions of the parameters with the personalized values (for
	    example, a file with name
	    <filename>MyPersonalValues.xml</filename>). You then include in the
	    file <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	    the necessary definitions to apply the style sheet
	    <filename>/path/to/another/location/HeadTail.xsl</filename> to your
	    XML source file. Additionally, you inform ADA that the final style
	    needs to be modified with your personal definitions. For example:
	  </para>

	  <programlisting>mergestyles.master.style=MyPersonalValues.xml
docbook.style.file=${ada.home}/XslStyles/HeadTail.xsl
docbook.files=index.xml</programlisting>

          <para>
	    The previous definitions instruct ADA to process the file
	    <filename>index.xml</filename> with docbook applying a style which
	    is the combination of the style with name
	    <filename>HeadTail.xsl</filename> with the file
	    <filename>MyPersonalValues.xml</filename>.
	  </para>

	  <para>
	    In general, you may use the following two variables in the file
	    <filename><xi:include href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml" xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>:
	  </para>

	  <informaltable frame="all" id="mergestyles_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry>mergestyles.src.dir</entry>
		  <entry>
		    Directory from where to obtain the style sheet with local
		    values.
		  </entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry>mergestyles.master.style</entry>
		  <entry>Name of the style sheet with the local variables</entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	  
	  <para>
	    The style sheet resulting of the merge between the two given files
	    is left in the current directory.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="include_flash_video_in_docbook">
	<question>
	  <para>
	    How to include a flash video in a Docbook document?
	  </para>
	</question>
	<answer>
	  <para>
	    Embedding a flash video in an HTML page can be done with flash
	    players that are downloaded by the browser and offer functionality
	    such as a start, stop and pause buttons, volume control, etc. ADA
	    uses the player available in <ulink
	    url="http://www.jeroenwijering.com/">www.jeroenwijering.com</ulink>.
	  </para>

	  <para>
	    From the point of view of the author, these details should be
	    hidden, and worry only about the basic data such as the video file,
	    height and width of the screen and that's it.
	  </para>

	  <para>
	    The stylesheets included in ADA to process Docbook allow you to
	    include a video player embedded in your page simply by providing a
	    special markup using the <code>&lt;para&gt;</code> element. The
	    following example shows the structure of this element:
	  </para>

	  <programlisting><![CDATA[<para id="video_1" condition="ada.flv.player">
  <phrase condition="width">320</phrase>
  <phrase condition="height">200</phrase>
  <phrase condition="file">player.flv</phrase>
  <phrase condition="image">playerthumb.jpg</phrase>
  <phrase condition="showstop">true</phrase>
</para>]]>
	  </programlisting>
	   
	  <para>
	    In order to maintain the Docbook file valid, the parameters are
	    passed as nested <code>&lt;code&gt;</code> elements with the
	    attribute <code>condition</code> equal to the name of the
	    parameter. The available names are:
	  </para>

	  <informaltable frame="all" id="embed_flv_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry>backcolor</entry>
		  <entry>Background color for the controls.</entry>
		  <entry>0xFFFFFF</entry>
		</row>
		<row>
		  <entry>file</entry>
		  <entry>URL pointing at the video file to playw</entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>frontcolor</entry>
		  <entry>Text and buttons color</entry>
		  <entry>0x000000</entry>
		</row>
		<row>
		  <entry>height</entry>
		  <entry>Height of the viewing area</entry>
		  <entry>320</entry>
		</row>
		<row>
		  <entry>id</entry>
		  <entry>Id of the viewing area</entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>image</entry>
		  <entry>
		    Thumbnail image to place on the screen when the video is not
		    being played.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>lightcolor</entry>
		  <entry>Rollover colors for the controls.</entry>
		  <entry>0x000000</entry>
		</row>
		<row>
		  <entry>screencolor</entry>
		  <entry>Control of the viewing area</entry>
		  <entry>0x000000</entry>
		</row>
		<row>
		  <entry>showstop</entry>
		  <entry>Boolean controlling if the stop button is shown</entry>
		  <entry>false</entry>
		</row>
		<row>
		  <entry>width</entry>
		  <entry>Width of the viewing area</entry>
		  <entry>260</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	</answer>
      </qandaentry>

      <qandaentry id="timewindow">
	<question>
	  <para>
	    Is it possible to have a directory in which the defined rules for
	    ADA are only applied during a given window of time?
	  </para>
	</question>
	<answer>
	  <para>
	    Yes. That is the functionality provided by the following variables
	    that can be defined in the file <filename><xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>:
	  </para>

	  <informaltable frame="all" id="timewindow_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>timewindow.format</varname></entry>
		  <entry>
		    Format in which date/time need to be given
		  </entry>
		  <entry>yyyy-MM-dd'T'HH:mm:ss</entry>
		</row>
		<row>
		  <entry><varname>timewindow.start</varname></entry>
		  <entry>
		    Date/time when the valid window starts
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>timewindow.end</varname></entry>
		  <entry>
		    Date/time when the valid window ends
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>timewindow.now</varname></entry>
		  <entry>
		    Current date/time. Used to fake a future time and check that
		    the validity is considered properly.
		  </entry>
		  <entry>date/time at execution</entry>
		</row>
		<row>
		  <entry><varname>timewindow.enabled</varname></entry>
		  <entry>
		    Check for the compliance of date/time with the defined
		    validity window.
		  </entry>
		  <entry>false</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    For example, the following definitions:
	  </para>

	  <programlisting>timewindow.enabled=true
timewindow.start=2008-06-25T19:00:00
timewindow.end=2018-06-25T19:00:00</programlisting>

           <para>
	     Instructs ADA to process the content in such directory between the
	     two date/times given. You may still build the content of the
	     directory at any time if you re-define the variable
	     <code>timewindow.enabled</code> to <code>false</code> (see <xref
	     linkend="property_in_command_line"/> for details).
	   </para>

	</answer>
      </qandaentry>
    </qandaset>
  </section>


  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                             GIT                              -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="Git">
    <title>Using Git with ADA</title>

    <qandaset defaultlabel="qanda">
      <qandaentry id="gitwhatis">
	<question>
	  <para>What is Git?</para>
	</question>
	<answer>
	  <para>
	    Git is a modern, fast, open-source distributed version
	    control system, originally developed by Linus Torvalds.
	    It is being used in large-scale open-source projects
	    like, for example, the Linux Kernel and the X Window System
	    <emphasis>X.org</emphasis>, although it is suitable
	    also for small projects.
	  </para>
	  <para>
	    Unlike other well-known
	    version control systems like CVS and Subversion,
	    Git is distributed:
	    a central repository is not necessary because each developer
	    can have her own repository with the full
	    history of the project. Changes done by a developer
	    in her repository can be easily copied later into 
	    other's repositories.
	  </para>
	  <para>
	    This distributed way of development is mainly supported
	    by a powerful and convenient branching/merging system.
	    Creating branches and merging them is normally
	    straightforward, even when the same file is modified
	    concurrently in several parallel branches.
	  </para>
	  <para>
	    For further information about Git, go to the
	    <ulink url="http://git.or.cz/">official Git Web site</ulink>.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="gitinstall">
	<question>
	  <para>How do I install Git?</para>
	</question>
	<answer>
	  <para>
	    Git is multi-platform. It can be installed on
	    Windows, Linux and Mac systems.
	  </para>
	  <para>
	    On Windows, Git can be installed in Cygwin
	    (<ulink url="http://www.cygwin.com/setup.exe">download
	      the Cygwin installer</ulink>). Other alternative
            is the <ulink url="http://code.google.com/p/msysgit/">msys-git 
            installer</ulink>.
	  </para>
	  <para>
	    On Linux, it should be available as a package in your
	    distribution. For example, the main Git package in Debian
	    is called <code>git-core</code>. It can be installed
	    using <emphasis>Aptitude</emphasis> or any other
	    available package manager.
	  </para>
	  <para>
	    On Mac, the <ulink url="http://code.google.com/p/git-osx-installer/">Git 
	      OS X installer</ulink> is available.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="gitrepositories">
	<question>
	  <para>My Git repository is local to my machine,
	    how is content shared with other authors and
	    course coordinators?</para>
	</question>
	<answer>
	  <para>
	    The distributed model of Git allows several ways
            of collaboration. One way is presented
            here, although other alternatives are possible. 
	  </para>
	  <para>
	    A repository for course material (and optionally course
	    administration files) should be installed in an account associated
	    to the course. All the authors should be able to
	    log-in that account. This repository will be referred to as
	    the shared repository in some parts of this FAQ.
	  </para>
	  <para>
	    A course coordinator has to set-up
	    the shared repository initially. She should use the
	    branch <code>master</code>
	    for the <emphasis>official</emphasis> content
	    of the course (if you are a course coordinator, 
	    see <xref linkend="git-admin-shared-repo"/>).
	    Published material is intended to be built
	    from the contents of this branch.
	    A course coordinator may be
	    the person in charge of integrating changes from authors
	    into this branch.
	    An additional branch in this repository should be created for each 
	    author. Authors should upload their changes into their
	    branch. The coordinator takes authors' contributions from
	    their branches and merges them into this repository
	    (if you are a course coordinator, 
	    see <xref linkend="git-admin-merge"/>).
	  </para>
	  <para>
	    In addition to the course shared repository, authors should have
	    their own local repository in their workspace (their laptop,
	    corporative user account, etc.) It can be easily set-up
	    by cloning the course repository
	    (see <xref linkend="gitclone" />). Authors should edit
	    and commit their contents in their local repository,
	    and push changes
	    to their branch in the shared repository when they want
	    these changes to be visible to others
	    (see <xref linkend="gitpush"/>).
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="gitclone" xreflabel="How to clone a repository">
	<question>
	  <para>How do I create my local repository from the 
	    shared repository?</para>
	  <para>
	    I was told that there is a shared repository I
	    should obtain the initial files from, before starting
	    to work. How do I set-up my local Git repository from it?
	  </para>
	</question>
	<answer>
	  <para>
	    A new repository can be easily created by cloning an existing
	    one. Suppose that the shared repository is available
	    via SSH with the following example parameters:
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>Remote host where the course account is available:
		<code>accounts.example.com</code>.</para>
	    </listitem>
	    <listitem>
	      <para>User name of the course account: <code>mycourse</code>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>Path in the course account where the shared
		repository resides: <code>~mycourse/repository/material</code>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>Name of your branch in the shared repository:
		<code>john</code>.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    Create a directory in your local workspace for the repository.
	    In a command-line window, go to that directory and type:
	  </para>

	  <programlisting>$ git clone ssh://mycourse@accounts.example.com/~/repository/material</programlisting>

	  <para>
	    You will be asked for <code>mycourse</code>'s password,
	    unless you have set-up public key access to that account.
	    A clone of the shared repository should appear now in a
	    new directory called <code>material</code> inside your
	    current directory. Enter into that directory and type
	    <code>git status</code>:
	  </para>

	  <programlisting>$ git status
# On branch master
nothing to commit (working directory clean)</programlisting>

	  <para>
	    If the command says that you are not placed on branch
	    <code>master</code>, just change to that branch:
	  </para>

	  <programlisting>$ git checkout master</programlisting>

	  <para>
	    If you are not placed on branch <code>master</code>
	    and the previous command failed, you need to create
	    the <code>master</code> branch. Just type:
	  </para>

	  <programlisting>$ git checkout -b master origin/master</programlisting>

	  <para>
	    You should be now placed on branch <code>master</code>.
	    Before beginning to work, it would be useful to
	    edit the configuration file of your repository
	    to make easier to send your changes to your branch
	    in the shared repository. Open the file
	    <filename>.git/config</filename> in your repository
	    with an editor and add the line
	    <code>push = master:john</code> at the end of the
	    <code>remote "origin"</code> section. Remember that
	    <code>john</code> is the name of your branch in
	    the shared repository in this example. The file should
	    now look something like this:
	  </para>

<programlisting>$ cat .git/config
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote "origin"]
        url = ssh://jaf@ariadna.it.uc3m.es/~/tmp/tmp-ada/ADA
        fetch = +refs/heads/*:refs/remotes/origin/*
        push = master:john
[branch "master"]
        remote = origin
        merge = refs/heads/master</programlisting>

	  <para>
	    Now your local repository is ready to work. You should
	    edit and commit your material in this repository
	    (see <xref linkend="gitcommit" />),
	    push your changes from here into your branch in the shared
	    repository (see <xref linkend="gitpush" />),
	    and update from time to time your local repository
	    to get the latest changes published on branch master
	    in the shared repository (see <xref linkend="gitpull" />).
	    
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="gitcommitlocal">
	<question>
	  <para>I have just commited some changes, why are they not
	    visible in the shared repository?
	  </para>
	</question>
	<answer>
	  <para>
	    When you commit changes, they are only stored in your
	    local repository. If you want your latest local commits to
	    be stored in the shared repository also, you have to
	    explicitly send your changes to that repository after
	    committing them. See <xref linkend="gitpush"/> for
	    further explanation.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="gitpull" xreflabel="How to update your local repository with others' changes">
	<question>
	  <para>How do I update my local repository to see the latest changes
	    published by the course coordinator on the official branch?
	  </para>
	</question>
	<answer>
	  <para>
	    From your branch <code>master</code>, type:
	  </para>
	  <programlisting>$ git pull</programlisting>
	  <para>
	    The latest changes introduced on the official branch
	    (branch <code>master</code> in the shared repository)
	    should now be visible in your repository. 
	  </para>
	  <para>
	    Do not execute <code>git pull</code> if you have local
	    uncommitted changes. Commit them first.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="gitpush" xreflabel="How to send changes to the shared repository">
	<question>
	  <para>How do I send my local changes to the shared repository?
	  </para>
	  <para>
	    I have done several commits into my local repository,
	    and now I want to share them with other people.
	    How do I upload those commits to the shared repository?
	  </para>
	</question>
	<answer>
	  <para>
	    I your changes have been committed into your local branch
	    <code>master</code> and you have set-up your local repository
	    following the instructions in <xref linkend="gitclone" />,
	    you just have to execute:
	  </para>

	  <programlisting>$ git push</programlisting>

	  <para>
	    Your changes should be now on your branch in the
	    shared repository. If your modifications are ready to
	    be reviewed by the course coordinator,
	    you may tell her that there are new contents there.
	    The course coordinator will review them and,
	    if they are all right, put them into the official branch. 
	  </para>

	</answer>
      </qandaentry>

      <qandaentry id="gitcommit" xreflabel="How to commit changes">
	<question>
	  <para>How do I commit contents with Git?</para>
	</question>
	<answer>
	  <para>
	    Commits are the basic unit used by Git to keep track of
	    the history of the contents it manages. Only the versions
	    committed into the repository are available later for
	    reverting changes, examining history, computing differences
	    between versions, etc.
	  </para>

	  <para>
	    Authors make continuous changes to their contents.
	    Sometimes, typically when they finish a logical unit of work
	    (e.g. finish writing or reviewing a section of a document,
	    including a figure in a document for better understanding
	    of its contents, finish a draft they want to share
	    with others, etc.), authors check-in their content in their
	    local repository. The action of checking-in changes into the
	    local repository is called a <emphasis>commit</emphasis>.
	    For each commit, Git stores the differences of the current
	    version of the files with respect to the version
	    in the preceding commit. 
	  </para>

	  <para>
	    When you have a version of the contents they want to commit,
	    you should first examine the status of the content to see
	    what they have changed with respect to the previous commit,
	    with the command <code>git status</code>:
	  </para>

	  <programlisting>$ git status
# On branch git-faq
# Changed but not updated:
#   (use "git add &lt;file>..." to update what will be committed)
#
#       modified:   FAQ.xml
#
# Untracked files:
#   (use "git add &lt;file>..." to include in what will be committed)
#
#       FAQ.html
#       FAQ.pdf
#       build.out</programlisting>

	  <para>
	    It shows what files have been changed and
	    what files are <emphasis>untracked</emphasis>
	    (not managed by Git). If you need further
	    information about the changes made, you can use
	    the command <code>git diff</code>, which shows the
	    lines that changed (were added, removed or modified)
	    in all the modified files.
	  </para>

	  <para>
	    The usual way of doing a commit is just typing
	    <code>git commit -a</code>. It commits all the files
	    that have been modified since the last commit.
	    The command asks for a message describing the commit,
	    that will be shown in the history of changes.
	    For short messages, it is recommendable to write just
	    one line describing briefly the changes done.
	    If you need to explain further your changes,
	    Git conventions say that you should write that line,
	    followed by an empty line, and finally the long description of
	    the changes.
          </para>

	  <para>
	    When a new file has been created, it is not automatically
	    managed by Git, but listed as <emphasis>untracked</emphasis>
	    instead. If you want that file to be committed, you have to
	    first type <code>git add &lt;filename</code>, that
	    includes the new file into the index (a temporary storage for the
	    files to be committed). Then, just type
	    <code>git commit -a</code> to commit this file and
	    the rest of the modified files. Once a file is added,
	    it will no longer be listed as <emphasis>untracked</emphasis>,
	    and Git will manage it.
	  </para>

	  <para>
	    Sometimes, you may need a finer control on what is being
	    committed.
	    For example, you may want to split the changes in several
	    commits. In this case, you can use <code>git add 
	      &lt;filenames></code>to only insert some of the changed
	    files into the index, and then <code>git commit</code>
	    (without the <code>-a</code> option) to commit the
	    changes that are in the index, but not the other changes
	    that were not explicitly included into it.
	    The files not added to
	    the index are still listed by Git as modified, and therefore
	    they can be committed later.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="gittrackedfiles">
	<question>
	  <para>What files should be added into the Git repository?</para>
	</question>
	<answer>
	  <para>
	    Source code management tools, like Git, are designed to
	    track <emphasis>source files</emphasis>.
	    Files produced automatically by compilers, stylesheets,
	    image transformation programs, etc. should not be tracked.
	  </para>
	  <para>
	    This does not mean that untracked files cannot be inside
	    your working directory, they can, but just that they
	    should not be added
	    into the Git repository. Do not worry about having them in
	    your  working directory, because only files that are
	    added explicitly with the <code>git add &lt;filename></code>
	    command are tracked by Git. Be careful when you add
	    a directory with <code>git add</code>, because it
	    adds all the files inside it into the repository.
	    If there are files in that directory that should not be
	    added, it is better to list the files to be added explicitly. 
	  </para>
	  <para>
	    In the case of ADA, add into the Git repository your Docbook
	    source files, your figures in the vectorial format
	    produced by your favorite drawing program
	    (normally SVG files), configuration files like
	    <filename><xi:include href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='PROPERTIES_FILENAME']/text())"
	    parse="xml" xmlns:xi="http://www.w3.org/2001/XInclude"/></filename>
	    and <filename>Params.xml</filename> and,
	    in general, any other resources that are not generated
	    automatically by ADA.
	  </para>
	  <para>
	    In general, do not include into the Git repository 
	    files like PDFs and HTMLs
	    produced from Docbook or LaTex sources,
	    PNG images produced from SVG figures, the backup files
	    that are saved by some editors, etc.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="git-admin-shared-repo"
	xreflabel="How to set-up the shared repository">
	<question>
	  <para>I am a course coordinator. How do I set-up the
	    shared repository?</para>
	</question>
	<answer>
	  To be answered.
	</answer>
      </qandaentry>

      <qandaentry id="git-admin-merge"
	xreflabel="How to merge contributions from authors">
	<question>
	  <para>I am a course coordinator. How do I merge contents
	    from authors into the official course branch?</para>
	</question>
	<answer>
	  To be answered.
	</answer>
      </qandaentry>

    </qandaset>
  </section>

</article>

<!--
Local Variables: 
compile-command: "adado" 
End:
-->
