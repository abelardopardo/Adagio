<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd">

<article id="ADA_FAQ">
  <title>ADA Frequently Asked Questions</title>

  <para>
    You may also access to the <ulink url="FAQ.pdf">PDF version of this
    document</ulink>.
  </para>
  
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                         WHAT IS ADA                          -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="About_ADA" xreflabel="Top of the Section">
    <title>About ADA</title>

    <qandaset defaultlabel="qanda">
      <qandaentry id="whatisada">
	<question>
	  <para>What is ADA?</para>
	</question>
	<answer>
	  <para>
	    ADA is a tool that provides support for <quote>Agile and Distributed
	    Authoring</quote>. Authors usually use a combination of tools to
	    produce documents. The actual variety of documents makes more
	    appropriate to refer to this items as resources. A resource may be a
	    regular text document, but it may also be a screen capture, video
	    clip, audio clip, picture, etc. ADA is conceived to manipulate
	    resources in this context.
	  </para>
	  <para>
	    The challenge appears when a large set of resources with a complex
	    structure is created by a large number of authors working in a
	    distributed environment.
	  </para>

	  <para>
	    The first problem is the variety of tools used by the authors. ADA
	    facilitates the post-processing by automatically producing
	    preliminary versions of the created resources. The following figure
	    illustrates a generic authoring environment and the support provided
	    by ADA.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/AuthorEnv.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Author environment and ADA role</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    Once created, the exported resources can be sent to a location where
	    they are automatically combined to produce the final resource. The
	    following figure illustrates a scenario combining these two aspects.
	  </para>
	  
	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/Kitchen.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Combining resources with ADA</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    ADA offers support in two steps of this procedure.
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		To the author: ADA provides rules to automate typical processing
		steps to achieve an approximate appearance of the created
		resources. Authors may then focus on the content and verify,
		using these rules, that the final resource complies with certain
		minimum requirements (guidelines, size, quality, etc.)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		In the production phase: ADA allows specifying a set of rules to
		automatically combine all the contributions from different
		authors and produce a complex resource.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    The main element for ADA in the author working directory is the rule
	    file. This file has the name <filename>Properties.txt</filename>
	    (although it can be changed) and specifies which are the resource
	    files and how they need to be processed to obtain the final
	    resources. Each working directory needs a file with the rules
	    applying to the files contained in it.
	  </para>

	  <para>Back to <xref linkend="About_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="whatisnotada">
	<question>
	  <para>What ADA is not?</para>
	</question>
	<answer>
	  <para>
	    ADA is not a text editor, nor a graphic editor, nor an integrated
	    creative environment. The author may use tools to create the
	    resources, and ADA is used to automatically combine them into a
	    global creation process.
	  </para>

	  <para>
	    To use an analogy, ADA offers a very efficient courier service that,
	    if you comply with certain requirements when creating resources, it
	    takes them very quickly to the assembling plant, combines them with
	    other resources contributed by other authors and automatically
	    creates a final resource.
	  </para>

	  <para>Back to <xref linkend="About_ADA"/>.</para>
	</answer>
      </qandaentry>
      <qandaentry id="whyisadaneeded">
	<question>
	  <para>Why is ADA needed?</para>
	</question>
	<answer>
	  <para>
	    ADA is oriented toward reducing the creation/modification cycle of a
	    set of resources with a non-trivial organization. In the information
	    era, the creation process is changing radically. Authors are no
	    longer required to use a concrete tool, but instead, certain formats
	    are used to easily publish content. But what really takes a
	    multi-user distributed authoring scenario to a new dimension is a
	    <emphasis>simple modification cycle</emphasis>. Think Wikipedia, its
	    distributed authoring paradigm has consolidated beyond any doubt,
	    but in order for those authors to contribute effectively, resources
	    are extremely easy to modify.
	  </para>

	  <para>
	    A typical situation when a number of authors contribute toward a
	    common resource is illustrated in the following figure. There is
	    usually an entity that absorbs the complexity of providing a
	    homogeneous view of the material usually through an expensive and
	    time consuming production stage. This production requires then an
	    additional step to bring all the material to the final web
	    publishing platform.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/AuthorCycle.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Conventional authoring cycle</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    The following picture illustrates the change in methodology that can
	    be achieved with the help of ADA. By providing a fast two-way
	    information channel between creation and production, the management
	    of a set of resources can be truly improved. ADA provides the rules
	    that automatically connect the source documents with the final
	    published resources such that changes can be performed at a very
	    low turnaround cost.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/AuthorNewCycle.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Conventional authoring cycle</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>
	  
	  <para>
	    But aside from the turnaround time for changes, resources tend to be
	    built hierarchically from the multiple sources. The internal
	    organization of a resource can be often replicated in the process in
	    which it is built. For example, to create the electronic version of
	    a book, there is certain amount of work that can be done for each
	    chapter individually accompanied by certain inter-chapter
	    processing. The rules defined in ADA are prepared to be applied
	    hierarchically at different points of the overall production
	    procedure. The following picture illustrates a hypothetical scenario
	    in which a resource is built by combining resources from four
	    authors in three gradual stages.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/ProductionCycle.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Full production cycle with ADA</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>Back to <xref linkend="About_ADA"/>.</para>
	</answer>
      </qandaentry>
    </qandaset>
  </section>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                    INSTALLATION IN WINDOWS                   -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="Installing_ADA_in_Windows"
	   xreflabel="Top of the Section">
    <title>Installing ADA in Windows</title>
    <qandaset defaultlabel="qanda">
      <qandaentry id="requiredapplicationsinwindows">
	<question>
	  <para>What are the required applications to run ADA in Windows?</para>
	</question>
	<answer>
	  <para>
	    ADA is prepared to supply rules to be used with several tools, but
	    these tools need to be installed in the system. If they are not, the
	    rules are never applied. However, to obtain the minimum
	    functionality, ADA needs <emphasis>at least</emphasis> three
	    applications to be installed (all of them Open Source, by the way.)
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		A <ulink url="http://java.sun.com">Java Run Time
		Environment (or simply a JRE)</ulink>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<ulink url="http://www.cygwin.com">Cygwin</ulink>: A Linux-like
		environment for Windows. This application itself contains
		several additional packages used by ADA.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<ulink url="http://ant.apache.org">Ant</ulink>: A Java based
		build tool. ADA relies on Ant to decide which documents to build
		and which tools to use for the task. The rules are all written
		as Ant building files.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    Aside from these three tools, ADA allows to process certain file
	    types if some additional programs are installed. For example,
	    translating figures from <ulink
	    url="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</ulink>
	    to <ulink url="en.wikipedia.org/wiki/PNG">PNG</ulink> can be done
	    using <command>Inkscape</command> but it needs to be properly
	    installed and available for execution.
	  </para>

	  <para>Back to <xref linkend="Installing_ADA_in_Windows"/>.</para>
	</answer>
      </qandaentry>
      
      <qandaentry id="how_to_install_jre" 
		  xreflabel="Java has been installed">
	<question>
	  <para>
	    How to install a Java Run-time Environment (or JRE) in Windows?
	  </para>
	</question>
	<answer>
	  <para>
	    Java is a free tool developed by Sun Microsystems and the
	    instructions on how to install it in windows provided with the
	    package. You may download the software from <ulink
	    url="http://www.java.com/en/download/download_the_latest.jsp">the
	    official Free Java Download page</ulink>. Once the download
	    finishes, execute the installer that asks a few simple questions and
	    installs Java in your system.
	  </para>

	  <para>Back to <xref linkend="Installing_ADA_in_Windows"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="howtoinstallcygwin" xreflabel="How to install Cygwin">
	<question>
	  <para>I got Java already installed, What else is required to run ADA?</para>
	</question>
	<answer>
	  <para>
	    Once <xref linkend="how_to_install_jre"/>, the next step is to
	    download the <command>Cygwin</command> tool, a Linux-like
	    environment for Windows. Once downloaded, the initial page of the
	    installer is shown in the following figure.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/CygwinSetUp.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Initial Cygwin Setup Program</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    After starting the set-up program, you need to specify several
	    parameters to establish a connection with a server. Keep advancing on
	    the installation steps until the screen to select the packages like
	    the one in the following figure is shown.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/CygwinSelectPackages.png"
			   format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Screen to select packages in Cygwin</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    Click in the button with name <command>View</command> that appears above
	    the package list until the word <quote>Full</quote> appears to its
	    left. At that point, all packages suitable to be installed are shown
	    alphabetically ordered. From the list, you need to select
	    <emphasis>at least</emphasis> the following packages.
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		<command>docbook-xml43</command> (or more recent): Docbook XML
		DTD
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>docbook-xsl</command>: XSL stylesheets for the DocBook
		XML DTD
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<command>git</command>: Fast version control system used to
		download the latest ADA version.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    ADA is capable of using additional tools, but they are not essential
	    for the installation. The set-up program takes a few minutes to
	    download all the required packages through a reasonably fast net
	    connection. Keep in mind that this installer application remains
	    installed in your computer and therefore can be executed at any
	    other time to add/remove applications to the
	    <command>Cygwin</command> environment.
	  </para>

	  <para>
	    After all the required packages are installed, finish the execution
	    of the set-up program and start a <emphasis>Cygwin
	    shell</emphasis>. This is done by clicking on the icon that the
	    set-up program has left on your desktop or browsing through the
	    program menu and selecting the Cygwin executable. Once started, a
	    window like the one shown in the following figure appears on the
	    screen.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/CygwinShell.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Cygwin shell screen</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    This window is a typical Linux command interpreter ready to process
	    your commands. It is just a different way to give orders to your
	    computer. Instead of clicking in different icons and menus,
	    <command>Cygwin</command> allows you to type the orders at the
	    prompt of this interpreter. The first check is to make sure the
	    Java Run-time Environment (or JRE) is properly installed. Go ahead
	    and type the command:
	  </para>

	  <programlisting>$ <command>which java</command></programlisting>

	  <para>
	    If the answer is a single path to a file with name
	    <command>java</command> similar to
	  </para>

	  <programlisting>/cygdrive/c/WINDOWS/system32/java</programlisting>
	  
	  <para>
	    then the JRE is properly installed. If the message says something
	    similar to <quote>which: no java in
	    (/usr/local/bin:/usr/bin:/....)</quote> then you need to review your
	    Java installation, because no JRE was found.
	  </para>


	  <para>Back to <xref linkend="Installing_ADA_in_Windows"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="install_ant" xreflabel="Ant installation">
	<question>
	  <para>
	    Got Java and Cygwin already installed, what is missing to run ADA?
	  </para>
	</question>
	<answer>
	  <para>
	    The next tool required by ADA is <ulink
	    url="http://ant.apache.org">Ant</ulink>, a Java based build
	    tool. Ant is a multi-platform tool, and the installation simply
	    amounts to downloading a zip file, deploying its files in a
	    directory, and declaring a couple of environment variables.
	  </para>

	  <para>
	    When deploying Ant in a directory there are two choices: install Ant
	    as a regular windows application, or install Ant inside Cygwin
	    (remember that <command>Cygwin</command> is a simple Linux-like
	    environment within your Windows system). The two choices are very
	    similar because it only requires a JRE to be available. The
	    important step is to set the environment variables ANT_HOME to point
	    to the directory where Ant is installed and <varname>PATH</varname>
	    to include the <filename>bin</filename> directory inside that
	    directory.
	  </para>

	  <para>
	    To add a new variable or modify a current variable in the execution
	    environment in Windows you need to first select the <quote>Control
	    Panel</quote>, then select the <quote>System</quote> link. A new
	    window opens with several panes. Select the pane with name
	    <quote>Advanced</quote> and then click on the button with name
	    <quote>Environment Variables</quote>. It is recommended to insert
	    these definitions as part of the System Variables.
	  </para>

	  <para>
	    A new variable with name <command>ANT_HOME</command> (all uppercase)
	    has to be declared and its value must be the directory where the Ant
	    files where deployed from the zip archive. Additionally, the
	    <varname>PATH</varname> variable (which is already defined) needs to
	    be modified by adding the path to the <filename>bin</filename>
	    directory within the Ant installation directory. That is, append to
	    the string already in the variable a semicolon and then the path to
	    the bin directory within Ant (something similar to
	    <filename>C:\Applications\Ant\bin</filename>.)
	  </para>

	  <para>
	    Once the installation is finished, you may check the availability of
	    the tool by opening a new Cygwin shell. Type the command
	  </para>

	  <programlisting>$ <command>which ant</command></programlisting>

	  <para>
	    If the answer is a single path to a file with name
	    <command>ant</command> such as
	  </para>

	  <programlisting>/cygdrive/c/Program Files/apache-ant-1.7.0/bin/ant</programlisting>
	  
	  <para>
	    Ant is properly installed. If the message says <quote>which: no ant
	    in (/usr/local/bin:/usr/bin:/....)</quote>, Ant is not being found
	    and you need to review your installation steps.
	  </para>

	  <para>Back to <xref linkend="Installing_ADA_in_Windows"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="Fetch_ada_in_windows">
	<question>
	  <para>
	    Once I have the JRE, Cygwin and Ant installed, How do I install ADA?
	  </para>
	</question>
	<answer>
	  <para>
	    Open a Cygwin shell and go to the directory where you want ADA
	    installed (a directory with name <filename>ADA</filename> will be
	    created. The computer needs to be connected to the net. Execute the
	    command:
	  </para>

	  <programlisting id="git_install_command">$ <command>git clone <xi:include
	    href="Params.xml"
	    xpointer="xmlns(xsl=http://www.w3.org/1999/XSL/Transform)xpointer(//*/xsl:param[@name='ADA_DOWNLOAD_URL']/text())"
	    parse="xml"
	    xmlns:xi="http://www.w3.org/2001/XInclude"/></command></programlisting>

	  <para>
	    A list of messages appear on the screen. After a while (depending on
	    the speed of your net connection), the command terminates and a new
	    directory with name <filename>ADA</filename> has been created
	    containing all the required files.
	  </para>
	  <para>
	    In order to make ADA available, the PATH environment variable needs
	    to be modified by adding the path to the <filename>bin</filename>
	    directory. You may follow the same procedure described in the <xref
	    linkend="install_ant"/>.
	  </para>

	  <para>
	    Once the environment variable <command>PATH</command> has been modified to
	    include the <filename>bin</filename> directory within ADA, open a
	    brand new Cygwin shell and type the following command
	  </para>
	  
	  <programlisting>$ <command>which adado</command></programlisting>
	  
	  <para>
	    As in the case of the <xref linkend="install_ant"/>, if the
	    answer is a single path to the <filename>adado</filename> file
	    similar to
	  </para>

	  <programlisting>/home/.../.../ADA/bin/adado</programlisting>
	  
	  <para>
	    ADA is properly installed. If the message says <quote>which: no
	    adado in (/usr/local/bin:/usr/bin:/....)</quote>, ADA is not
	    available for execution and you need to review your installation.
	  </para>

	  <para>
	    The final step to make sure that the commands provided by ADA are
	    available is to <xref linkend="run_adacheck"/>.
	  </para>

	  <para>Back to <xref linkend="Installing_ADA_in_Windows"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="new_version_upgrade">
	<question>
	  <para>
	    A new version of ADA has been published, how do I upgrade?
	  </para>
	</question>
	<answer>
	  <para>
	    ADA is distributed using the tool <command>git</command> which keeps
	    track of the files you already have and the changes that need to be
	    applied to upgrade to the latest version. The upgrade process
	    requires simply to open a shell window, go to the directory where
	    ADA is installed and execute the command:
	  </para>

	  <programlisting>$ <command>git pull</command></programlisting>

	  <para>
	    The command will inform in some fairly cryptic way of the changes
	    that are taking place. In principle, if the source files have not
	    been modified, the change will go smoothly. If you have some
	    personal modifications in the source files, you need first to tell
	    <command>git</command> to store those changes. You need to execute
	    the command:
	  </para>

	  <programlisting>$ <command>git commit -a -m "Your message here"</command></programlisting>

	  <para>
	    Try again to execute <command>git pull</command>. This time, the
	    update process should go smoothly. There could be some conflicts
	    when <command>git</command> tries to merge these changes with the
	    ones you introduced. If such situation happens, it is called a
	    <quote>merge conflict</quote> and it needs to be solved manually by
	    the user. If you touched the source code of ADA, then we assume that
	    you know how to solve merge conflicts.
	  </para>

	  <para>Back to <xref linkend="Installing_ADA_in_Windows"/>.</para>
	</answer>
      </qandaentry>
    </qandaset>
  </section>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                    INSTALLATION IN LINUX                     -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="Installing_ADA_in_Linux"
	   xreflabel="Top of the Section">
    <title>Installing ADA in Linux</title>

    <qandaset>
      <qandaentry>
	<question>
	  <para>Which packages are required to use ADA in Linux?</para>
	</question>
	<answer>
	  <para>
	    ADA uses primarily <ulink url="http://ant.apache.org">Ant</ulink>,
	    and it is distributed using <command>git</command>. The bare minimum
	    required packages are: <command>Ant</command>, a Java run-time
	    environment (JRE) and <command>git</command>.
	  </para>

	  <para>
	    But to fully exploit ADA functionality, there are additional tools
	    that need to be installed. See <xref linkend="run_adacheck"/> for
	    more details.
	  </para>

	  <para>Back to <xref linkend="Installing_ADA_in_Linux"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry>
	<question>
	  <para>
	    Once I installed all the required packages, how How do I install
	    ADA?
	  </para>
	</question>
	<answer>
	  <para>
	    ADA is distributed using the <command>git</command> version control
	    tool. Open a terminal and type the command:
	  </para>

	  <xi:include xpointer="xpointer(//*[@id='git_install_command'])"
		      parse="xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
	  
	  <para>
	    A new directory with name <filename>ADA</filename> will be
	    created. In order to make ADA available, you need to include the
	    path to its <filename>bin</filename> directory as part of your
	    <varname>PATH</varname> environment variable.
	  </para>

	  <para>Back to <xref linkend="Installing_ADA_in_Linux"/>.</para>
	</answer>
      </qandaentry>

      <xi:include xpointer="xpointer(//*[@id='new_version_upgrade'])"
		  parse="xml" xmlns:xi="http://www.w3.org/2001/XInclude"/>
      
    </qandaset>
  </section>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                    PROCESSING RESOURCES                      -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="Processing_resources_with_ADA"
	   xreflabel="Top of the Section">
    <title>Processing resources with ADA</title>
    <qandaset>
      <qandaentry id="run_adacheck" xreflabel="Run adacheck">
	<question>
	  <para>What kind of resources can be processed by ADA?</para>
	</question>
	<answer>
	  <para>
	    ADA is a building tool, and to <quote>build</quote> a resource
	    it needs some applications to be available in your computer. In
	    order to see what tools is able to manage ADA and which one of them
	    are available, open a shell (a regular shell in Linux or a Cygwin
	    shell in Windows) and type the command
	  </para>

	  <programlisting>$ <command>adacheck</command></programlisting>

	  <para>
	    ADA prints the value of several important internal variables
	    followed by a list of the tools that is capable of using and if
	    they are ready to be used by the current installation. For example:
	  </para>

	  <programlisting><xi:include href="AdaCheck.txt"
	  parse="text" xmlns:xi="http://www.w3.org/2001/XInclude"/></programlisting>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="how_to_run_ada" xreflabel="How to run ADA">
	<question>
	  <para>How to tell ADA which files should process and how?</para>
	</question>
	<answer>
	  <para>
	    ADA is a tool that needs from the user a set of files to apply
	    certain pre-conceived production rules.  This information is all
	    contained in a regular text file with name
	    <filename>Properties.txt</filename>. The structure of this file is
	    very simple, any line starting with the symbol <quote>#</quote> is
	    ignored. Every empty line is ignored. The rest of lines must have
	    the structure <command>name=value</command>. The set of names is defined
	    by ADA. Refer to the following questions to know which names and
	    values are possible.
	  </para>

	  <para>
	    The following figure illustrates how these rules are applied to a
	    set of files in the author space to produce resources.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/Rules.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Rules used by ADA</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="properties_txt" xreflabel="Examples of property files">
	<question>
	  <para>
	    What is the typical structure of the
	    <filename>Properties.txt</filename> file?
	  </para>
	</question>
	<answer>
	  <para>
	    It depends mainly on the type of work you want ADA to perform in
	    that directory. For example, if the only task to perform is to take
	    two files and mark them as material suitable to be exported
	    somewhere else, then the file would have a structure such as:
	  </para>
	  
	  <programlisting>export.files=filetocopy1.ext \
             filetocopy2.ext</programlisting>

	   <para>
	     A list of file may be broken across multiple lines using the
	     symbol <command>\</command>. 
	   </para>
	   
	   <para>
	     Suppose that the task to execute in a local directory needs the
	     previous creation of auxiliary material in another directory. ADA
	     allows the definition of a list of directories that are recursively
	     processed before processing the material in the local directory
	     (see <xref linkend="subrecursive_processing"/> for a detailed
	     description). For example:
	   </para>

	   <programlisting>subrecursive.dirs=../../Material/Author1

export.dst.dir=../scratch/Theory2
export.files=ASM_notes-1x2.pdf

clean.files=../scratch/Theory2</programlisting>

            <para>
	      This property file says that before performing any rule in this
	      directory, directory <filename>../../Material/Author1</filename>
	      must be processed. The files exported in that remote directory are
	      copied to the local directory. No additional processing is
	      described except that the file to export is
	      <filename>ASM_notes-1x2.pdf</filename> and the destination of the
	      export action is the directory
	      <filename>../scratch/Theory2</filename>.
	    </para>

	    <para>
	      As it can be seen in the example, aside from the rules to create
	      the proper resources, a list of files or directories to clean can
	      be given to use when the directory needs to be re-generated from
	      the beginning.
	    </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="adado" xreflabel="How to execute ADA">
	<question>
	  <para>How to tell ADA to build all the resources?</para>
	</question>
	<answer>
	  <para>
	    ADA needs a file with name <filename>Properties.txt</filename> with
	    the definitions of the files to process and the rules to apply. Once
	    such file has been created, to build the resources simply open a
	    shell (regular shell in Unix or a Cygwin shell in Windows) and type
	    the command
	  </para>
	  <programlisting>$ <command>adado</command></programlisting>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>
	  
      <qandaentry id="variable_catalog">
	<question>
	  <para>
	    How to know the variables that can be included in the
	    <filename>Properties.txt</filename> file?
	  </para>
	</question>

	<answer>
	  <para>
	    A file containing all possible variables can be found in the file in
	    <filename>AntImports/Properties.txt</filename> where ADA is
	    installed. All definitions are commented out, therefore, the file
	    can be used as the initial template to craft a specific definition
	    file.
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="process_xfig">
	<question>
	  <para>How to process a figure with Xfig?</para>
	</question>
	<answer>
	  <para>
	    Open Xfig and create a figure. Save it in Xfig format. Suppose that
	    the figure needs to be translated to PNG format. Open the file
	    <filename>Properties.txt</filename> (if not created, see <xref
	    linkend="how_to_run_ada"/>) and set the following variables:
	  </para>

	  <informaltable frame="all" id="xfig_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>xfig.exec</varname></entry>
		  <entry>
		    Name of the xfig executable installed in the system
		  </entry>
		  <entry><filename>fig2dev</filename></entry>
		</row>
		<row>
		  <entry><varname>xfig.src.dir</varname></entry>
		  <entry>Directory from where to take the figures</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>xfig.dst.dir</varname></entry>
		  <entry>Directory where to leave the processed figures</entry>
		  <entry>Value of <varname>xfig.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>xfig.output.format</varname></entry>
		  <entry>
		    Figures are translated to this format. The formats supported
		    by xfig are png, eps, gif, jpg, latex, map, etc. For a
		    detailed list check the manual page of <command>fig2dev</command>..
		  </entry>
		  <entry><filename>png</filename></entry>
		</row>
		<row>
		  <entry><varname>xfig.files</varname></entry>
		  <entry>
		    Space or comma separated list of file names (with no path)
		    of the figures to process
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>xfig.border</varname></entry>
		  <entry>
		    Border in pixels to add around the figure
		  </entry>
		  <entry>2</entry>
		</row>
		<row>
		  <entry><varname>xfig.smooth</varname></entry>
		  <entry>
		    Smooth factor to pass to Ghostscript to improve rendering.
		  </entry>
		  <entry>4</entry>
		</row>
		<row>
		  <entry><varname>xfig.extra.args</varname></entry>
		  <entry>
		    Additional options to pass directly to <command>fig2dev</command>.
		  </entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    For example. If the figures with names <filename>sign.fig</filename>
	    and <filename>office.fig</filename> are stored in the current
	    directory and versions in png format need to be created in the same
	    directory, the following assignment is required in the file
	    <filename>Properties.txt</filename>.
	  </para>

	  <programlisting>xfig.files=sign.fig office.fig</programlisting>

	  <para>
	    With such values defined, execute ADA to obtain the processed
	    figures (see <xref linkend="adado"/>).
	  </para>

	  <para>
	    If you may use files in a different directory, or the produced files
	    need to be stored in a different directory, include the additional
	    variable assignments in the file
	    <filename>Properties.txt</filename>.
	  </para>


	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="inkscape_processing">
	<question>
	  <para>How to process a figure with Inkscape?</para>
	</question>
	<answer>
	  <para>
	    Open Inkscape and create a figure. Save it in SVG format. Suppose
	    that this figure needs to be translated to PNG format. Open the file
	    <filename>Properties.txt</filename> (if not created, see <xref
	    linkend="how_to_run_ada"/>) and set the following variables:
	  </para>

	  <informaltable frame="all" id="inkscape_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>inkscape.exec</varname></entry>
		  <entry>
		    Name of the inkscape executable installed in the system
		  </entry>
		  <entry><filename>inkscape</filename></entry>
		</row>
		<row>
		  <entry><varname>inkscape.src.dir</varname></entry>
		  <entry>Directory from where to take the figures</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>inkscape.dst.dir</varname></entry>
		  <entry>Directory where to leave the processed figures</entry>
		  <entry>Value of <varname>inkscape.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>inkscape.output.format</varname></entry>
		  <entry>
		    Figures are translated to this format. Allowed values:
		    <filename>png</filename>, <filename>eps</filename>
		    (Encapsulated Postscript), <filename>ps</filename>
		    (Postscript) or <filename>pdf</filename>.
		  </entry>
		  <entry><filename>png</filename></entry>
		</row>
		<row>
		  <entry><varname>inkscape.files</varname></entry>
		  <entry>
		    Space or comma separated list of file names (with no path)
		    of the figures to process
		  </entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    For example. If the figures with names
	    <filename>chart.svg</filename> and <filename>graph.svg</filename>
	    are stored in the current directory and versions in png format need
	    to be created in the same directory, the following assignment is
	    required in the file <filename>Properties.txt</filename>.
	  </para>

	  <programlisting>inkscape.files=chart.svg graph.svg</programlisting>

	  <para>
	    With such values defined, execute ADA to obtain the processed
	    figures (see <xref linkend="adado"/>).
	  </para>

	  <para>
	    If you may use files in a different directory, or the produced files
	    need to be stored in a different directory, include the additional
	    variable assignments in the file
	    <filename>Properties.txt</filename>.
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="using_regexp_for_files">
	<question>
	  <para>
	    What if I have lots of figures. Do I need to write all their file
	    names in <filename>Properties.txt</filename>?
	  </para>
	</question>
	<answer>
	  <para>
	    No. Two regular expression patterns are allowed.
	  </para>
	  <itemizedlist>
	    <listitem>
	      <para><quote>*</quote> matches zero or more characters</para>
	    </listitem>
	    <listitem>
	      <para><quote>?</quote> matches one character</para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    For example, if you have several figures and each of them have a
	    version in English (with extension <command>_en.svg</command>) and a
	    version in Spanish (with extension <command>_es.svg</command>), you may
	    select all of them wit the expression <command>*_e?.xml</command>.
	    dot. These patterns may be used anywhere file lists are required
	    unless otherwise noticed.
	  </para>

	  <para>
	    If you want this type of rule to be applied, not only to all the
	    files matching this pattern in this directory, but to all
	    directories, see <xref linkend="global_rule"/>.
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="property_in_command_line" xreflabel="How to execute with
							   one variable modified">
	<question>
	  <para>
	    Can I execute the <command>adado</command> command one time but with one
	    single variable modified from the definition in
	    <filename>Properties.txt</filename>?
	  </para>
	</question>
	<answer>
	  <para>
	    Yes. In fact, you may include as many variable definitions in the
	    command line as you see fit. They need to be provided with the
	    following format:
	  </para>
	  <programlisting>-Dpropertyname=propertyvalue</programlisting>

	  <para>
	    Any argument written beyond <command>adado</command> is directly passed to
	    an invocation of Ant. See the Ant manual for a more detailed
	    discussion of the available options.
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="docbook_processing">
	<question>
	  <para>How to process Docbook files in ADA?</para>
	</question>
	<answer>
	  <para>
	    Open your favorite XML editor and create a Docbook XML file. Save it
	    in XML format. Depending on the rendering procedure of your editor,
	    you may need to have your figures available to be shown. If you want
	    to simply apply the regular Docbook XSL Stylesheets, then you need
	    to set the appropriate values to some of these variables in
	    <filename>Properties.txt</filename>
	  </para>

	  <informaltable frame="all" id="docbook_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>docbook.exec</varname></entry>
		  <entry>
		    Name of the Xslt processor installed in the system
		  </entry>
		  <entry><filename>xsltproc</filename></entry>
		</row>
		<row>
		  <entry><varname>docbook.src.dir</varname></entry>
		  <entry>Directory from where to take the Docbook files</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>docbook.dst.dir</varname></entry>
		  <entry>Directory where to leave the resulting files</entry>
		  <entry>Value of <varname>docbook.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>docbook.output.format</varname></entry>
		  <entry>
		    Extension to replace the extension <command>.xml</command> in the
		    file name. It must include the dot!
		  </entry>
		  <entry><filename>.html</filename></entry>
		</row>
		<row>
		  <entry><varname>docbook.files</varname></entry>
		  <entry>
		    Space or comma separated list of Docbook file names (with no
		    path) to process
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>docbook.extra.args</varname></entry>
		  <entry>
		    Additional options to pass directly to <command>xsltproc</command>.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>docbook.style.file</varname></entry>
		  <entry>XSL file to use to translate the Docbook file</entry>
		  <entry>Installed Profile Style</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	  
	  <para>
	    For example, if the Docbook document with name
	    <filename>manual.xml</filename> is stored in the current directory
	    and needs to be translated to HTML, the following definition is
	    needed in the file <filename>Properties.txt</filename>.
	  </para>
	  
	  <programlisting>docbook.files=manual.xml</programlisting>

	  <para>
	    With such values defined, execute ADA to obtain the HTML rendering
	    of the file (see <xref linkend="adado"/>).
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="profiling">
	<question>
	  <para>
	    How to obtain two files from a unique docbook mixing elements in
	    different languages?
	  </para>
	</question>
	<answer>
	  <para>
	    The docbook tool chain offers a powerful functionality called
	    <emphasis>profiling</emphasis> or <emphasis>conditional
	    text</emphasis>. (search for <quote>docbook
	    profiling</quote> for more detailed information). Each docbook
	    element may include a fixed set of attributes that are used to
	    select or ignore portions of a document. The exact definition for a
	    generic attribute <command>attr</command> is:
	  </para>

	  
	  <informaltable frame="all" id="profile_definition">
	    <tgroup rowsep="1" colsep="1" cols="1">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <tbody>
		<row>
		  <entry>
		    <para>
		      If a document contains elements with an attribute with
		      name <command>attr</command> with value <command>val</command>, and
		      the XSLT processor is given the option
		      <command>profile.attr</command> with value <command>val</command>,
		      then all elements that have the attribute
		      <command>attr</command> with a value not containing
		      <command>val</command> are suppressed as if they were not part
		      of the document. To apply a concrete profiling attribute
		      you need to replace <command>attr</command> by the name of your
		      attribute and <command>val</command> by the proper value.
		    </para>
		  </entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
		    
	  <para>
	    The list of attributes which can be used for profiling is fixed by
	    the stylesheets processing Docbook (there are actually more than
	    10). A profiling example is a document that is written in say two
	    languages. Let us just say for the sake of the example these
	    languages are English and Spanish. The docbook XML file needs to
	    have one version for each language, but there might be parts that
	    need to be present in both versions. The attribute to use for such
	    profiling is <command>lang</command>. A possible strategy is to label each
	    paragraph with the attribute <command>lang</command> to the value
	    <command>en</command> if it is in English or <command>es</command> if it is in
	    Spanish.
	  </para>

	  <para>
	    The placement of the <command>lang</command> attribute can be chosen as to
	    minimize the number of duplicated elements and maintain the document
	    as a valid Docbook document. The following example shows a snippet
	    of Docbook in which two versions in English and Spanish are included
	    in the same document with a figure that needs to be also
	    distinguished.
	  </para>

	  <programlisting><![CDATA[    <para lang="es">
      La estructura de esta tabla se puede ver en la siguiente figura:
    </para>

    <para lang="en">
      The structure of this table can be seen in the following figure:
    </para>

    <informalfigure id="reversetable:fig:pagetable">
      <mediaobject>
        <imageobject lang="es">
          <imagedata align="center" fileref="tablestruct_es.png" format="PNG" />
        </imageobject>
        <imageobject lang="en">
          <imagedata align="center" fileref="tablestruct_en.png" format="PNG" />
        </imageobject>
      </mediaobject>
    </informalfigure>]]></programlisting>
	  <para>
	    Note that the placement of the <command>lang</command> attribute is as
	    deep in the hierarchy as possible to increase the number of common
	    elements maintaining the document as correct Docbook. A
	    <command>mediaobject</command> element accepts multiple
	    <command>imageobject</command> elements which itself does not accept
	    multiple <command>imagedata</command> elements.
	  </para>

	  <para>
	    ADA offers rules to do precisely this task, given a Docbook
	    containing elements in two languages, English and Spanish, generate
	    two separate files, one containing each version. Once you produced
	    the XML file, set the appropriate values to some of following variables
	    in <filename>Properties.txt</filename>
	  </para>

	  <informaltable frame="all" id="bilingualdb_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>bilingualdb.src.dir</varname></entry>
		  <entry>Directory from where to take the Docbook files</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.dst.dir</varname></entry>
		  <entry>Directory where to leave the resulting files</entry>
		  <entry>Value of <varname>bilingualdb.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.output.format</varname></entry>
		  <entry>
		    Extension to replace the extension <command>.xml</command> in the
		    file name. It needs to include the dot!
		  </entry>
		  <entry><filename>.html</filename></entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.files</varname></entry>
		  <entry>
		    Space or comma separated list of Docbook file names (with no
		    path) to process
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.extra.args</varname></entry>
		  <entry>
		    Additional options to pass directly to <command>xsltproc</command>.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>bilingualdb.style.file</varname></entry>
		  <entry>XSL file to use to translate the Docbook file</entry>
		  <entry>Docbook Profile Style</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	  

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>

      </qandaentry>

      <qandaentry id="export_processing"
		  xreflabel="How to declare which resources are exported">
	<question>
	  <para>How to specify which resources should be exported?</para>
	</question>
	<answer>
	  <para>
	    When creating resources in a directory, typically, only a subset of
	    files are supposed to be used in the outside. These files are what
	    we call the <emphasis>exported</emphasis> resources. The variables
	    inside the <filename>Properties.txt</filename> used to capture this
	    functionality are:
	  </para>

	  <informaltable frame="all" id="export_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>export.src.dir</varname></entry>
		  <entry>Directory from where to take the files to export</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry><varname>export.dst.dir</varname></entry>
		  <entry>Directory where to copy the exported resources</entry>
		  <entry>Value of <varname>export.src.dir</varname></entry>
		</row>
		<row>
		  <entry><varname>export.files</varname></entry>
		  <entry>
		    Space or comma separated list of file names (with no path)
		    of the resources to export
		  </entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    There are two typical scenarios when it comes to using these
	    variables.
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		A directory in which resources are simply created and prepared
		to export, but without a destination in mind. This is the case
		of material that is suitable to be re-used in multiple
		locations. In this case, only the variable
		<varname>export.files</varname> is defined to contain those
		resources to export. The other two variables are left with their
		default values.
	      </para>

	      <para>
		With this definition, any other directory that needs these
		resources could export them to a given location (see <xref
		linkend="subrecursive_processing"/> for more details).
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		A directory in which resources are always exported to the same
		location. This is usually the case of a directory that is
		already close to the final destination of the material and is in
		charge of combining resources and place them in their final
		location. In such scenario, the variables
		<varname>export.files</varname> and
		<varname>export.dst.dir</varname> contain respectively the set
		of resources to place and the directory where they have to be
		copied.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="subrecursive_processing"
		  xreflabel="How to process other directories before this one">
	<question>
	  <para>
	    Can I specify some directories to be processed before doing anything
	    else?
	  </para>
	  <para>
	    I have a directory that processes a bunch of files, but before that,
	    it needs some other resources in other locations to be produced by
	    ADA and placed in this directory. Is it possible to simply specify
	    those directories?
	  </para>
	</question>
	<answer>
	  <para>
	    Yes. And this is one of the key features that ADA uses to allow
	    hierarchical resource building. The generic scenario considered is
	    such that to obtain the final version of a set of resources, some
	    other resources need to be created in different locations and
	    <emphasis>exported</emphasis> to obtain the final product.
	  </para>

	  <para>
	    Let us assume that all the remote directories contain the
	    <filename>Properties.txt</filename> file in which the export
	    variables containing the list of files to export have been defined
	    (see <xref linkend="export_processing"/> for the details). Two
	    scenarios are considered by this functionality depending on where is
	    the location where to export the resource is decided.
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		A remote directory is pre-processed but the location to copy the
		exported resources is passed as a parameter. This means that if
		in the <filename>Properties.txt</filename> of the remote file
		the variable <varname>export.dst.dir</varname> is defined, it is
		<emphasis>overwritten</emphasis> by the value given in the
		invoking directory.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		A remote directory is pre-processed and the location to copy the
		exported resources is taken from the
		<filename>Properties.txt</filename> file in this remote
		directory.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    ADA allows the definition of two sets of directories each of them
	    processed in each of the scenarios previously described. The
	    following variables control the execution of the production process
	    in a set of directories:
	  </para>

	  <informaltable frame="all" id="subrecursive_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>subrecursive.dirs</varname></entry>
		  <entry>
		    Directories (with respect to the the current location) to be
		    processed prior to any other. The value of
		    <varname>export.dst.dir</varname> in these repositories is
		    overwritten by the following value.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>subrecursive.dst.dir</varname></entry>
		  <entry>
		    Value used to pass to the directories specified in the
		    previous variables to export their resources. It then
		    overrides the variable <varname>export.dst.dir</varname> (if
		    given) in the remote directory.
		  </entry>
		  <entry><emphasis>The current directory</emphasis></entry>
		</row>
		<row>
		  <entry><varname>subrecursive.dirs.nodst</varname></entry>
		  <entry>
		    Directories (with respect to the the current location) to be
		    processed prior to any other. The resources will be exported
		    wherever is specified in the variable
		    <varname>export.dst.dir</varname> in the remote directory.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>subrecursive.target</varname></entry>
		  <entry>Rule to execute in those remote directories</entry>
		  <entry>A regular <command>adado</command></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    The values stored in these variables have a special effect when
	    combined with the variables used for exporting resources in the
	    remote repository (see <xref linkend="export_processing"/>.) For the
	    directories specified as to overwrite the export destination the
	    following figure shows the possible scenarios:
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/SubrecursiveExport.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Exporting recursively</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    The following figure shows the effect of the two types of
	    subrecursive processing with and without a destination for the
	    exported resources.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/SubrecursiveExport2.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Exporting recursively in both scenarios</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="ada_course_home"
		  xreflabel="How to re-use definitions across an entire project">
	<question>
	  <para>Can I have definitions or files that are shared across a
	  <quote>project</quote>?</para>
	</question>
	<answer>
	  <para>
	    Yes. Although there is no formal definition of a
	    <quote>project</quote> within ADA, it is very common to have files
	    or definitions that apply to all files included in a directory and
	    its set of sub-directories. This directory is called the
	    <emphasis>course home</emphasis> directory within ADA. A user may
	    have multiple of these directories one for each large project of
	    shared resources.
	  </para>

	  <para>
	    ADA tries to follow the least invasive path and rather than
	    requiring an extra definition with the location of this directory,
	    it detects it automatically by searching for the file
	    <filename>AdaCourseParams.xml</filename> in up to ten levels of
	    directories above the current one. If a file with this name is
	    found, the variable with name <varname>ada.course.home</varname>
	    name is then defined with the directory where the file is located.
	  </para>
	  
	  <para>
	    For example, let us assume that your project uses some stylesheet
	    containing the re-definition of some ADA stylesheet parameters. You
	    may give this file the name <filename>AdaCourseParams.xml</filename>
	    and place it at the highest level in your hierarchy of
	    directories. From any directory you may refer to such file in the
	    <filename>Properties.txt</filename> file as shown in the following
	    example.
	  </para>

	  <example>
	    <title>Example of use of <varname>ada.course.home</varname></title>
	    <programlisting>mergestyles.master.style=${ada.course.home}AdaCourseParams.xml
export.dst.dir=${ada.course.home}scratch</programlisting>
	  </example>

	  <para>
	    The variable <varname>ada.course.home</varname> is used to access
	    the common stylesheet as well as to refer to a common directory
	    where to export resources.
	  </para>

	  <para>
	    If what you want is not only to use the variable
	    <varname>ada.course.home</varname> within any directory in a project
	    but to use any variable definition, then check <xref
	    linkend="global_rule"/>.
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="global_rule" 
		  xreflabel="How to make a variable declaration valid everywhere">
	<question>
	  <para>Can I make a variable declaration valid everywhere?</para>
	  
	  <para>
	    The file <filename>Properties.txt</filename> contains variable
	    assignments only valid for the current directory. Is it possible to
	    define for example the set of figures to be process by Inkscape in a
	    way such that it is applied in all the directories?  For example, I
	    would like all my <filename>*.svg</filename> files in any directory
	    to be processed by the Inkscape rule.
	  </para>
	</question>
	<answer>
	  <para>
	    Yes. You may have this type of assignments in two additional files
	    that are read by ADA. These files are:
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		The file with name <filename>Ada.properties</filename> if
		present in the ADA Course Home directory (see <xref
		linkend="ada_course_home"/> to know where is this directory.)
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		The <filename>.ant.properties</filename> file if present in your
		home directory (see <xref linkend="run_adacheck"/> to find out
		where Ant assumes where is this directory.)
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    Before these definitions are read, the file
	    <filename>Properties.txt</filename> in your current directory is
	    processed. If a variable is defined several times, only the
	    <emphasis>first</emphasis> definition is taken into account. As a
	    consequence, you may have general definitions the
	    <filename>.ant.properties</filename> of your home directory that may
	    be overwritten by definitions in the
	    <filename>Ada.properties</filename> file in the project home
	    directory, and again overwritten by the
	    <filename>Properties.txt</filename> file in the local directory. The
	    following figure shows the effect of reading these files.
	  </para>
	  
	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/GlobalRule.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Definition file processing</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    The value of <varname>Var1</varname> is taken from the
	    <filename>Properties.txt</filename> file, <varname>Var2</varname> is
	    taken from the ADA Course Home, and <varname>Var3</varname> is taken
	    from the <filename>.ant.properties</filename> file in the user home
	    directory.
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="modified_stylesheet"
		  xreflabel="How to use a slightly modified stylesheet">
	<question>
	  <para>
	    How can I use a slightly modified generic stylesheet without
	    modifying it?
	  </para>
	  <para>
	    I want to use a stylesheet that has lots of parameters to customize
	    its behavior. However, I cannot touch it since it's being shared by
	    a pool of authors.
	  </para>
	  <para>
	    How can I still use such style sheet but set any parameter to my own
	    values?
	  </para>
	</question>
	<answer>
	  <para>
	    ADA offers support for this task automatically by taking all your
	    personal definitions in an extra XML file and merging that file with
	    the regular style file you use.
	  </para>

	  <para>
	    Suppose your style file is in
	    <filename>/path/to/another/location/MainStyle.xsl</filename>. The
	    stylesheet has multiple parameters suitable to be defined. You then
	    create a local stylesheet containing <emphasis>only</emphasis> the
	    definitions of the parameters with the personalized values (for
	    example, a file with name
	    <filename>MyPersonalValues.xml</filename>). You then include in the
	    file <filename>Properties.txt</filename> the necessary definitions
	    to apply the style sheet
	    <filename>/path/to/another/location/HeadTail.xsl</filename> to your
	    XML source file. Additionally, you inform ADA that the final style
	    needs to be modified with your personal definitions. For example:
	  </para>

	  <example>
	    <title>
	      Definitions to include modifications on a shared stylesheet
	    </title>
	    <programlisting>mergestyles.master.style=MyPersonalValues.xml

docbook.style.file=${ada.home}/XslStyles/HeadTail.xsl
docbook.files=index.xml</programlisting>
	  </example>

          <para>
	    The previous definitions instruct ADA to process the file
	    <filename>index.xml</filename> with Docbook applying the stylesheet
	    which is the combination of the ADA stylesheet with name
	    <filename>HeadTail.xsl</filename> with the file
	    <filename>MyPersonalValues.xml</filename> containing my personal
	    modifications.
	  </para>

	  <para>
	    In general, you may use the following two variables in the file
	    <filename>Properties.txt</filename>:
	  </para>

	  <informaltable frame="all" id="mergestyles_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry>mergestyles.src.dir</entry>
		  <entry>
		    Directory from where to obtain the style sheet with local
		    values.
		  </entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry>mergestyles.master.style</entry>
		  <entry>Name of the style sheet with the local variables</entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	  
	  <para>
	    The style sheet resulting of the merge between the two given files
	    is left in the current directory.
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="include_flash_video_in_docbook"
		  xreflabel="How to include Flash Video in Docbook">
	<question>
	  <para>
	    How to include a flash video in a Docbook document?
	  </para>
	</question>
	<answer>
	  <para>
	    Embedding a flash video in an HTML page can be done with flash
	    players that are downloaded by the browser and offer functionality
	    such as a start, stop and pause buttons, volume control, etc. ADA
	    uses the player available in <ulink
	    url="http://www.jeroenwijering.com/">www.jeroenwijering.com</ulink>.
	  </para>

	  <para>
	    From the point of view of the author, these details should be
	    hidden, and worry only about the basic data such as the video file,
	    height and width of the screen and that's it.
	  </para>

	  <para>
	    The stylesheets included in ADA to process Docbook allow you to
	    include a video player embedded in your page simply by providing a
	    special markup using the <command>&lt;para&gt;</command> element. The
	    following example shows the structure of this element:
	  </para>

	  <programlisting><![CDATA[<para id="video_1" condition="ada.flv.player">
  <phrase condition="width">320</phrase>
  <phrase condition="height">200</phrase>
  <phrase condition="file">player.flv</phrase>
  <phrase condition="image">playerthumb.jpg</phrase>
  <phrase condition="showstop">true</phrase>
</para>]]>
	  </programlisting>
	   
	  <para>
	    In order to maintain the Docbook file valid, the parameters are
	    passed as nested <command>&lt;code&gt;</command> elements with the
	    attribute <command>condition</command> equal to the name of the
	    parameter. The available names are:
	  </para>

	  <informaltable frame="all" id="embed_flv_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry>backcolor</entry>
		  <entry>Background color for the controls.</entry>
		  <entry>0xFFFFFF</entry>
		</row>
		<row>
		  <entry>file</entry>
		  <entry>URL pointing at the video file to play</entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>frontcolor</entry>
		  <entry>Text and buttons color</entry>
		  <entry>0x000000</entry>
		</row>
		<row>
		  <entry>height</entry>
		  <entry>Height of the viewing area</entry>
		  <entry>320</entry>
		</row>
		<row>
		  <entry>id</entry>
		  <entry>Id of the viewing area</entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>image</entry>
		  <entry>
		    Thumbnail image to place on the screen when the video is not
		    being played.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>lightcolor</entry>
		  <entry>Rollover colors for the controls.</entry>
		  <entry>0x000000</entry>
		</row>
		<row>
		  <entry>screencolor</entry>
		  <entry>Control of the viewing area</entry>
		  <entry>0x000000</entry>
		</row>
		<row>
		  <entry>showstop</entry>
		  <entry>Boolean controlling if the stop button is shown</entry>
		  <entry>false</entry>
		</row>
		<row>
		  <entry>width</entry>
		  <entry>Width of the viewing area</entry>
		  <entry>260</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="include_shockwave_video_in_docbook">
	<question>
	  <para>
	    How to include a Shockwave Flash (swf) document in a Docbook document?
	  </para>
	</question>
	<answer>
	  <para>
	    Embedding a Shockwave file in an HTML page can be done by including
	    a special paragraph in Docbook with the values for certain
	    parameters. A special stylesheet in ADA will then produce the proper
	    element in HTML to view the Shockwave file. The idea is similar to
	    <xref linkend="include_flash_video_in_docbook"/> but requires less
	    information.
	  </para>

	  <para>
	    The special markup in docbook to include a a showkwave is shown in
	    the following example:
	  </para>

	  <example>
	    <title>Markup to include a Shockwave file in Docbook</title>
	    <programlisting><![CDATA[<para condition="ada.swf.player">
  <phrase condition="width">425</phrase>
  <phrase condition="height">355</phrase>
  <phrase condition="file">File.swf</phrase>
  Additonal text and <ulink url="link.html">links</ulink> you might include.
</para>]]></programlisting>
	  </example>
	   
	  <para>
	    In order to maintain the Docbook file valid, the parameters are
	    passed as nested <code>&lt;phrase&gt;</code> elements with the
	    attribute <code>condition</code> equal to the name of the
	    parameter. The available names are:
	  </para>

	  <informaltable frame="all" id="embed_swf_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry>file</entry>
		  <entry>URL pointing at the shockwave file to use</entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>height</entry>
		  <entry>Height of the viewing area</entry>
		  <entry>320</entry>
		</row>
		<row>
		  <entry>id</entry>
		  <entry>Id of the viewing area (optional)</entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>width</entry>
		  <entry>Width of the viewing area</entry>
		  <entry>260</entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
	</answer>
      </qandaentry>

      <qandaentry id="exportcontrol">
	<question>
	  <para>
	    Is it possible to consider a directory for building only under some
	    special conditions?
	  </para>

	  <para>
	    I have some directories that, although present in my project, I would
	    like to control its presence in the final version easily. For
	    example, suppose I would like to control the presence of a special
	    page in my final site, that is, go from a version in which that page
	    nor any link to it are present in the site, to a version in which
	    both the link and the page are present.
	  </para>
	</question>
	<answer>
	  <para>
	    This functionality is considered in ADA and provided through a
	    combination of multiple mechanisms. The presence or not of a set of
	    resources in the final version of a site is achieved by either
	    executing or not the exporting rules (see <xref
	    linkend="export_processing"/> for the details). The following
	    variables are provided to create a <emphasis>condition</emphasis>
	    such that if satisfied, resource export is executed, but if not
	    satisfied, no resource is exported:
	  </para>

	  <informaltable frame="all" id="exportcontrol_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry><varname>exportcontrol.begin</varname></entry>
		  <entry>Date/time after which export is allowed</entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>exportcontrol.end</varname></entry>
		  <entry>Date/time after which export is not allowed</entry>
		  <entry></entry>
		</row>
		<row>
		  <entry><varname>exportcontrol.now</varname></entry>
		  <entry>
		    Current date/time to consider. Used to reset a time and
		    check if export is allowed.
		  </entry>
		  <entry>date/time at execution</entry>
		</row>
		<row>
		  <entry><varname>exportcontrol.date.format</varname></entry>
		  <entry>Format in which date/time need to be given</entry>
		  <entry>yyyy-MM-dd'T'HH:mm:ss</entry>
		</row>
		<row>
		  <entry><varname>exportcontrol.open</varname></entry>
		  <entry>
		    Condition to allow export. If different from
		    <quote>true</quote>, export is never allowed.
		  </entry>
		  <entry>true</entry>
		</row>
		<row>
		  <entry><varname>exportcontrol.profile.revision</varname></entry>
		  <entry>
		    A semicolon-separated list of strings to search for a given
		    revision value.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>
		    <varname>exportcontrol.profile.revision.value</varname>
		  </entry>
		  <entry>
		    Value that if not empty and contained in the previous
		    variable (not empty either) allows the export.
		  </entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    Given these variables, when invoked, the export rule is truly
	    executed if all the following conditions are satisfied:
	  </para>

	  <informaltable frame="all" id="exportcontrol_condition">
	    <tgroup rowsep="1" colsep="1" cols="1">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <tbody>
		<row>
		  <entry>
		    <itemizedlist>
		      <listitem>
			<para>
			  <varname>exportcontrol.open</varname> is true
			</para>
		      </listitem>
		      <listitem>
			<para>
			  <varname>exportcontrol.begin</varname> is empty or its
			  value is before <varname>exportcontrol.now</varname>
			</para>
		      </listitem>
		      <listitem>
			<para>
			  <varname>exportcontrol.end</varname> is empty or its
			  value is after <varname>exportcontrol.now</varname>
			</para>
		      </listitem>
		      <listitem>
			<para>
			  <varname>exportcontrol.profile.revision</varname>
			  is empty or 
			  <varname>exportcontrol.profile.revision.value</varname>
			  is empty or the former is contained in the latter.
			</para>
		      </listitem>
		    </itemizedlist>
		  </entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>
		     
	  <para>
	    Clear uh? The condition is so complicated because it combines
	    several control mechanisms into a single condition. A regular user
	    will likely use only one of these mechanisms. The condition is
	    easily understood if broken into the following possible scenarios of
	    use (in increasing level of complexity):
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		Allow/skip the export rule in a directory by changing only one
		definition in <filename>Properties.txt</filename>. This is
		achieved by simply using the definition:
	      </para>

	      <programlisting>exportcontrol.open=true</programlisting>

	      <para>
		If the value of this variable is different from
		<quote>true</quote> the export rule is not executed.
	      </para>
	    </listitem>

	    <listitem>
	      <para>
		A directory should only be exported during a certain time
		window. Define the time interval with the variables
		<varname>exportcontrol.begin</varname> and
		<varname>exportcontrol.end</varname>.
	      </para>
	      
	      <example>
		<title>
		  Limiting the export of a directory to a time
		  window
		</title>
		<programlisting>exportcontrol.begin=2008-06-25T19:00:00
exportcontrol.end=2018-06-25T19:00:00</programlisting>
	      </example>
	    </listitem>

	    <listitem>
	      <para>
		Keep a list of directories allowed to export. This is achieved
		using the two variables
		<varname>exportcontrol.profile.revision</varname> and
		<varname>exportcontrol.profile.revision.value</varname>. You
		should first choose a keyword assigned to each directory you
		want to control. Assign that keyword to the
		<varname>exportcontrol.profile.revision.value</varname>variable
		as shown in the example:
	      </para>

	      <example>
		<title>Controlling export with a keyword</title>
		<programlisting>exportcontrol.profile.revision.value=keyword</programlisting>
	      </example>

	      <para>
		Set the value of
		<varname>exportcontrol.profile.revision</varname> with the
		semi-colon separated list of keywords of those modules you want
		to activate. This definition should be included in a file common
		for the entire project (see <xref linkend="global_rule"/>.)
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    ADA allows you use more than one of these conditions together. The
	    export is actually execute if <emphasis>all of them</emphasis> are
	    satisfied.
	  </para>

	  <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
	</answer>
      </qandaentry>
    </qandaset>
  </section>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                   TYPESETTING EXAMINATIONS                   -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="Typesetting_exams" xreflabel="Top of the Section">
    <title>Typesetting exams with ADA</title>

    <qandaset defaultlabel="qanda">

      <qandaentry id="Ada_and_exam_typesetting">
	<question>
	  <para>
	    How does ADA support exam typesetting?
	  </para>
	</question>
	<answer>
	  <para>
	    ADA includes a set of stylesheets to transform a Docbook document
	    with certain special elements into an HTML document with the
	    appearance of an exam. As with the rest of styles in ADA, some
	    elements are parameters and therefore can be easily
	    customized. Alternatively, you may use this style as the basis
	    for your own customized style.
	  </para>

	  <para>
	    There are two sets of variables and rules depending on the type of
	    exam.  If an exam contains a set of questions that need to be
	    shuffled and two versions be produced, then the variables with the
	    prefix <varname>testexam</varname> are used. If the exam is simply a set
	    of exercises and no shuffle is required, then the varaiables with
	    the prefix <varname>exam</varname> are required. In the same
	    directory, two exams, one of each type may coexist.
	  </para>

	  <para>
	    The variables that can be included in the
	    <filename>Properties.txt</filename> file are:
	  </para>

	  <informaltable frame="all" id="exam_vars">
	    <tgroup rowsep="1" colsep="1" cols="3">
	      <colspec colnum="1" colname="col1" align="left"/>
	      <colspec colnum="2" colname="col2" align="left"/>
	      <colspec colnum="3" colname="col3" align="center"/>
	      <thead>
		<row>
		  <entry align="center">Variable name</entry>
		  <entry align="center">Description</entry>
		  <entry align="center">Default</entry>
		</row>
	      </thead>
	      <tbody>
		<row>
		  <entry>
		    <varname>testexam.src.dir</varname> or
		    <varname>exam.src.dir</varname>
		  </entry>
		  <entry>
		    Directory from where to obtain the source file for the test
		    exam. 
		  </entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry>
		    <varname>testexam.file</varname> or
		    <varname>exam.file</varname> 
		  </entry>
		  <entry>
		    File containing the exam to be processed.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>
		    <varname>testexam.bilingual.file</varname> or
		    <varname>exam.bilingual.file</varname> 
		  </entry>
		  <entry>
		    File containing the exam to be processed in bilingual mode,
		    that is, an English version and a Spanish version. Note that
		    one and only one bilingual or non-bilingual file can be
		    specified as source. Any combination between Test exam or
		    regular exam is allowed.
		  </entry>
		  <entry></entry>
		</row>
		<row>
		  <entry>
		    <varname>testexam.dst.dir</varname> or
		    <varname>exam.dst.dir</varname>
		  </entry>
		  <entry>Directory where the new files are created.</entry>
		  <entry>Current directory</entry>
		</row>
		<row>
		  <entry>
		    <varname>testexam.equation.dir</varname> or
		    <varname>exam.equation.dir</varname>
		  </entry>
		  <entry>
		    Directory where the auxliary files to render equations are
		    pcreated
		  </entry>
		  <entry>
		    Value of <varname>testexam.src.dir</varname> or
		    <varname>exam.src.dir</varname>
		  </entry>
		</row>
		<row>
		  <entry>
		    <varname>testexam.output.format</varname> or
		    <varname>exam.output.format</varname>
		  </entry>
		  <entry>
		    The resulting HTML files are created with this extension.
		  </entry>
		  <entry><filename>.html</filename></entry>
		</row>
		<row>
		  <entry>
		    <varname>testexam.style.file</varname> or
		    <varname>exam.style.file</varname>
		  </entry>
		  <entry>
		    Stylesheet to apply to the source file.
		  </entry>
		  <entry>Installed Exam Stylesheet</entry>
		</row>
		<row>
		  <entry>
		    <varname>testexam.extra.args</varname> or
		    <varname>exam.extra.args</varname>
		  </entry>
		  <entry>
		    Additional options to pass directly to <command>xsltproc</command>.
		  </entry>
		  <entry></entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	</answer>
      </qandaentry>

      <qandaentry id="ada_exam_elements_parameterized"
		  xreflabel="How to produce the exam heading">
	<question>
	  <para>
	    How to produce the exam heading?
	  </para>
	</question>
	
	<answer>
	  <para>
	    The stylesheet needs certain special elements and parameters to
	    generate the exam heading. Furthermore, certain special elements
	    may be included in the Docbook source document to produce additional
	    elements in the HTML version. The customization then is achieved by
	    using both mechanisms: parameters and elements in the document. The
	    following figure shows an exam in which all the customizable parts
	    have been substituted by the parameter names or the element to
	    include in the source document.
	  </para>

	  <informaltable frame="all">
	    <tgroup rowsep="1" colsep="1" cols="1">
	      <colspec colnum="1" colname="col1" align="center"/>
	      <tbody>
		<row>
		  <entry>
		    <para>
		      <informalfigure>
			<mediaobject>
			  <imageobject>
			    <imagedata fileref="Samples/Exam/ExamCapture.png"
				       format="PNG"/> 
			  </imageobject>
			  <textobject>
			    <phrase>
			      Sample of exam heading with stylesheet parameters
			    </phrase> 
			  </textobject>
			</mediaobject>
		      </informalfigure>
		    </para>
		  </entry>
		</row>
	      </tbody>
	    </tgroup>
	  </informaltable>

	  <para>
	    The <ulink url="Samples/Exam/Test.xml">docbook source document to
	    create an exam like the one shown in the previous figure</ulink>
	    must have a &lt;section&gt; element as root. The content of this
	    section together with the values of the parameters are used to
	    produce the HTML file.
	  </para>

	  <para>
	    Additional parameters available for customization but not shown in
	    the figure are:
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		<varname>ada.exam.fontfamily</varname>: Font family used in the
		HTML head section (default to Verdana).
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<varname>ada.exam.fontsize</varname>: Font size used in the
		HTML head section (default to 10pt).
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<varname>ada.exam.render.separate.cover</varname>: Boolean to
		force a pagebreak after the exam cover (if value is
		<quote>yes</quote>), or include the exam content right after the
		head (any value different from <quote>yes</quote>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<varname>ada.exam.author</varname>: Author name to include in the
		HTML head section.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		<varname>ada.exam.include.id</varname>: Boolean to control the
		inclusion of an ID identifying the exam right below the
		<quote>part</quote> variable in the version including the
		solutions. The parameter takes values <quote>yes/no</quote>, and
		the value shown in the HTML document is taken from the
		<command>status</command> attribute given in the root
		<command>section</command> element.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    The generic structure of a Docbook file to render with the exam
	    heading would be something similar to (see also the <ulink
	    url="Samples/Exam/Test.xml">Docbook source file used to create the
	    exam in the previous figure</ulink>):
	  </para>

	  <programlisting><![CDATA[<section lang="en" id="ExamID">

  <title>Title to insert in the HTML head</title>
  <para condition="part">Problems</para>
  
  <para condition="duration">1 hour and 15 minutes</para>
  <para condition="scoring">50 points over 100</para>
  <para condition="date">May 16th, 2008 at 16:30</para>

  <para condition="note">
    The rules for the exam are...
  </para>

  <para condition="name"/> <!-- To include the name box -->

  <section>
    <title>Section with the exercises (this title is ignored)</title>
    <section>
      <title>This is the first exercise (this title is ignored)</title>
      <para>
        Exam content. Either regular docbook describing a problem or a 
        qandaset element with several qandaentry elements each of them
        containing one or several questions
      </para>
    </section>
    ...
  </section>
</section>]]></programlisting>

	  <para>
	    If the exam contains only true/false questions, the style includes a
	    table with scoring data (number of correct, incorrect and empty
	    answers as well as the final score) if the element <code>&lt;para
	    condition="score"/&gt;</code> is included in the root
	    <command>section</command> element. The following figure shows the
	    resulting box if the element is included.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="Samples/TestExam/ScoreRendering.png"
			   format="PNG"/> 
	      </imageobject>
	      <textobject><phrase>Box for scores</phrase></textobject>
	    </mediaobject>
	  </informalfigure>
	  
	  <para>
	    The file containing the parameter values would have a structure
	    similar to:
	  </para>
	  <programlisting><![CDATA[<xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
  xmlns="http://www.w3.org/1999/xhtml" version="1.0">

  <xsl:param name="ada.exam.include.id" select="'no'"/>
  <xsl:param name="ada.exam.render.separate.cover" select="'yes'"/>
  <xsl:param name="ada.exam.author">Author that created the exam</xsl:param>
  <xsl:param name="ada.exam.topleft.image">Logo.png</xsl:param>
  <xsl:param name="ada.exam.topleft.image.alt">My Logo</xsl:param>
  <xsl:param name="ada.exam.topleft.toptext">The degree name</xsl:param>
  <xsl:param name="ada.exam.topleft.centertext">Course name</xsl:param>
  <xsl:param name="ada.exam.topleft.centertext.en">Date</xsl:param>
  <xsl:param name="ada.exam.topleft.bottomtext">Some other message</xsl:param>
  ...
</xsl:stylesheet>]]></programlisting>

	  <para>
	    See <xref linkend="modified_stylesheet"/> to see how the file
	    containing these definitions is included in the
	    <filename>Properties.txt</filename> file
	  </para>

	  <para>Back to <xref linkend="Typesetting_exams"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="typeset_tf_questions"
		  xreflabel="How to typeset a true/false question exam">
	<question>
	  <para>
	    How to typeset an exam with true/false questions?
	  </para>
	</question>

	<answer>
	  <para>
	    Additionaly to producing an exam heading (see <xref
	    linkend="ada_exam_elements_parameterized"/>) the ADA stylesheet is
	    capable of detecting true/false questions with certain structure and
	    produce two HTML documents with these questions shuffled.
	  </para>

	  <para>
	    The questions must be described using the
	    <command>qandaentry</command> docbook element which is provided
	    preciselly to mark the content of questions and answers.
	  </para>

	  <para>
	    The following listing shows the content of a <ulink
	    url="Samples/TestQuestions/TFQuestion.xml">Docbook file with the
	    definition of a multiple choice question</ulink>:
	  </para>

	  <programlisting><![CDATA[<qandadiv condition="TestQuestion" id="Question ID">
  <blockinfo>
    <author>
      <personname>
	<firstname>AuthorFirst</firstname><surname>AuthorLast</surname>
      </personname>
    </author>
  </blockinfo>
  <para>Any text preceding the (possible) multiple questions.</para>
  <qandaentry>
    <!-- Any text to precede the question -->
    <para>
	Include here any Docbook subset introducing the first question.
    </para>
    <question>
      <para>First Question text</para>
    </question>
    <!-- Answer value as attribute -->
    <answer condition="False" />
  </qandaentry>
  <qandaentry>
    <!-- Any text to precede the question -->
    <para>
	Include here any Docbook subset introducing the second question.
    </para>
    <question>
      <para>Second question text</para>
    </question>
    <!-- Answer value as attribute -->
    <answer condition="True" />
  </qandaentry>
</qandadiv>]]></programlisting>

	  <para>
	    The <command>condition</command> attribute in the
	    <command>qandadiv</command> element with the value
	    <command>TestQuestion</command> is used to state the type of
	    rendering to be used, in this case, two possible answers,
	    <quote>True</quote> or <quote>False</quote>. The
	    <command>id</command> attribute can be used to uniquely identify
	    questions in a catalog.
	  </para>

	  <para>
	    The <command>blockinfo</command> element is used to store some basic
	    information about the question. Some additional elements can be
	    included within this block as explained in <xref
	    linkend="exam_handling_question_catalogs"/>. Following this element,
	    an arbitrary Docbook fragment can be included. This is useful if,
	    for example, a problem statement is followed by several related
	    true/false questions. These questions need to be included in the
	    same <command>qandadiv</command> element. When shuffling questions,
	    ADA shuffles independently the questions within this unit.
	  </para>

	  <para>
	    After this optional portion, questions are each included inside a
	    <command>qandaentry</command>. This element may include again an
	    arbitrary Docbook fragment to introduce the question, the question
	    itself surrounded by the <command>question</command> element and a
	    signe <command>answer</command>
	    element with the <command>condition</command> attribute equal to the
	    correct answer. Acceptable true values are 
	    <quote>Correct</quote>, <quote>Correcto</quote>,
	    <quote>True</quote>, and <quote>Cierto</quote>. Acceptable false values
	    are <quote>Incorrect</quote>, <quote>Incorrecto</quote>,
	    <quote>False</quote>, and <quote>Falso</quote>.
	  </para>

	  <para>
	    The HTML obtained with the previously included Docbook structure is
	    shown in the following figure.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="Samples/TestQuestions/TFRendering.png" 
			   format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Sample of multiple choice question</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>Back to <xref linkend="Typesetting_exams"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="typeset_mc_questions">
	<question>
	  <para>
	    How to typeset an exam with multiple choice
	    questions?
	  </para>
	</question>

	<answer>
	  <para>
	    Additionaly to producing an exam heading (see <xref
	    linkend="ada_exam_elements_parameterized"/>) the ADA stylesheet is
	    capable of detecting true/false and multiple choice questions with
	    certain structure and produce two versions with these questions
	    shuffled.
	  </para>

	  <para>
	    The questions must be described using the
	    <command>qandaentry</command> docbook element which is provided
	    preciselly to mark the content of questions and answers.
	  </para>

	  <para>
	    The following listing shows the content of a <ulink
	    url="Samples/TestQuestions/MCQuestion.xml">Docbook file with the
	    definition of a multiple choice question</ulink>:
	  </para>

	  <programlisting><![CDATA[<qandadiv condition="TestMCQuestion" id="Your own unique id">
  <blockinfo>   <!-- Basic meta info for this question -->
    <author>
      <personname>
        <firstname>AuthorName</firstname><surname>AuthorSurname</surname>
      </personname>
    </author>
  </blockinfo>
  <para>Any text preceding the (possible) multiple questions.</para>
  <qandaentry>
    <para> <!-- Any text to precede the question -->
	Include here any Docbook subset introducing the questions
    </para>
    <question>
      <para>Question text.</para>
    </question>
    <!-- 
	 Answer list. The correct one needs to include the condition attribute
	 with value "Correct, True, Correcto or Cierto". 
    -->
    <answer condition="Correct"><para>First answer</para></answer>
    <answer><para>Second answer</para></answer>
    <answer><para>Third answer</para></answer>
    <answer><para>Fourth answer</para></answer>
  </qandaentry>
</qandadiv>]]></programlisting>

	  <para>
	    The <command>condition</command> attribute with the value
	    <command>TestMCQuestion</command> attribute is used to state the
	    type of rendering to be used, in this case, a set of possible answer
	    with a white square on their left. The <command>id</command>
	    attribute can be used to uniquely identify questions in a wider
	    catalog.
	  </para>

	  <para>
	    The <command>blockinfo</command> element is used to store some basic
	    information about the question. Some additional elements can be
	    included within this block as explained in <xref
	    linkend="exam_handling_question_catalogs"/>. Following this element,
	    an arbitrary Docbook fragment can be included. This is useful if,
	    for example, a problem statement is followed by several related
	    questions (see <xref linkend="typeset_tf_questions"/> for an
	    example). These questions need to be included in the same
	    <command>qandadiv</command> element. When shuffling questions, ADA
	    shuffles independently the questions within this unit.
	  </para>

	  <para>
	    After this optional portion, questions are each included inside a
	    <command>qandaentry</command>. This element may include again an
	    arbitrary Docbook fragment to introduce the question, the question
	    itself surrounded by the <command>question</command> element and the
	    multiple answers surrounded by the <command>answer</command>
	    element. Correct answers are distinguished by the
	    <command>condition</command> attribute in the
	    <command>answer</command> element with one of the values
	    <quote>Correct</quote>, <quote>Correcto</quote>, <quote>True</quote>
	    or <quote>Cierto</quote>.
	  </para>

	  <para>
	    The HTML obtained with the previously included Docbook structure is
	    shown in the following figure.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="Samples/TestQuestions/MCRendering.png" 
			   format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Sample of multiple choice question</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>Back to <xref linkend="Typesetting_exams"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="exam_handling_question_catalogs"
		  xreflabel="How to select a subset of questions from a catalog">
	<question>
	  <para>
	    Is it possible to have a Docbook file that selects only a subset of
	    questions from a catalog?
	  </para>
	</question>
	<answer>
	  <para>
	    Although not a functionality provided by ADA, by combining questions
	    encoded in Docbook with the possibility of including a fragment of
	    an XML file into another (using <code>xinclude</code>), questions
	    can be managed in large catalogs and select only a subset for a
	    given exam.
	  </para>

	  <para>
	    The idea is to centralize all the test questions created over the
	    years into a single large Docbook file with the format explaned in
	    <xref linkend="typeset_tf_questions"/> and <xref
	    linkend="typeset_mc_questions"/>. When creating a new exam, a
	    special set of questions can be selected by providing a set of
	    identifiers. Two conditions are required to perform such operation:
	    question sets need to have identifiers (aside from the unique
	    question identifier stored in the <command>id</command> attribute)
	    and a mechanism to select from the file only those questions with a
	    given identifier.
	  </para>

	  <para>
	    ADA proposes to identify sets of questions by means of three
	    identifiers to facilitate stratified searches. An example of the
	    Docbook element chosen to include this information is as follows:
	  </para>

	  <programlisting>&lt;qandadiv condition="TestQuestion" id="Q Id"&gt;
  &lt;blockinfo&gt;
    &lt;author&gt;
      &lt;personname&gt;
        &lt;firstname&gt;Author First&lt;/firstname&gt;&lt;surname&gt;Author Last&lt;/surname&gt;
      &lt;/personname&gt;
    &lt;/author&gt;
    <command>&lt;printhistory&gt;
      &lt;para arch="ID_1" revision="ID_2" vendor="ID_3" /&gt;
    &lt;/printhistory&gt;</command>
  &lt;/blockinfo&gt;
  &lt;qandaentry&gt;
    &lt;question&gt;Question Text&lt;/question&gt;
    &lt;/question&gt;
    &lt;answer condition="True" /&gt;
  &lt;/qandaentry&gt;
&lt;/qandadiv&gt;</programlisting>

          <para>
	    The <command>printhistory</command> element may contain an arbitrary
	    number of <command>para</command> elements each of them with three
	    identifiers. With this scheme, a question may belong to more than
	    one set of questions (for example when re-used in more than one
	    exam) and have one of these identifiers for each set.
	  </para>

	  <para>
	    For example, given the file <filename>QuestionCatalog.xml</filename>
	    with a large number of questions, selecting those questions that
	    belong to a set is achieved by using the <quote>Xinclude</quote>
	    notation. The usage of such element within an XML file is shown in
	    the following listing:
	  </para>

	  <programlisting>&lt;qandaset defaultlabel="number"&gt;
  <command>&lt;xi:include href="QuestionCatalog.xml"
    xpointer="xpointer(//*/qandadiv/blockinfo/printhistory/para[@arch =
	      'ID_1'][@revision = 'ID_2'][@vendor = 'ID_3']/ancestor::qandadiv)"
              xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
    &lt;xi:fallback&gt;
      &lt;para&gt;No questions found in catalog with id="ID_1/ID_2/ID_3"&lt;/para&gt;
    &lt;/xi:fallback&gt;
  &lt;/xi:include&gt;</command>
&lt;/qandaset&gt;</programlisting>

          <para>
	    The resulting <command>qandaset</command> element contains only
	    those questions that match the three given identifiers. With this
	    technique, a possible usage scenario would be to keep all questions
	    for a course, or set of courses, all encoded in a single file and
	    then preparing an exam would be simply to label the questions with
	    the proper identifiers and them pull all of them in the source
	    document with the <command>xinclude</command> construction as shown
	    above.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="exam_keep_stats"
		  xreflabel="How to keep statistics about questions">
	<question>
	  <para>
	    Is it possible to store and maintain statistics about questions in
	    the same Docbook document?
	  </para>
	  
	  <para>
	    Collecting quiz questions is nice. With enough time and patiente you
	    may end up with a large pool from which to design high quality
	    exams. But, wouldn't it be nice to know how a question performed in
	    a test? Is there a way to keep this information organized and then
	    visualize it?
	  </para>
	</question>
	<answer>
	  <para>
	    ADA offers some support to implement this scenario. It assumes that
	    the information attached to a question after it has been used in a
	    test (generically referred as <quote>stats</quote>) is also stored
	    in the Docbook source structure.
	  </para>

	  <para>
	    The idea is to extend the mechanism of question group identifier
	    (see <xref linkend="exam_handling_question_catalogs"/>) and include
	    certain typical measurements. The proposed structure is shown in the
	    following listing:
	  </para>

	  <programlisting>&lt;qandaentry&gt;
  &lt;blockinfo&gt;
    &lt;printhistory&gt;
      &lt;para arch="ID_1" revision="ID_2" vendor="ID_3"&gt;
        &lt;phrase condition="correct"&gt;20&lt;/phrase&gt;
        &lt;phrase condition="incorrect"&gt;0&lt;/phrase&gt;
        &lt;phrase condition="blank"&gt;2&lt;/phrase&gt;
        &lt;phrase condition="total"&gt;22&lt;/phrase&gt;
        &lt;phrase condition="remarks" /&gt;
      &lt;/para&gt;
    &lt;/printhistory&gt;
  &lt;/blockinfo&gt;
  &lt;question&gt;
    &lt;para&gt;Question text&lt;/para&gt;
  &lt;/question&gt;
  &lt;answer condition="False" /&gt;
&lt;/qandaentry&gt;</programlisting>

          <para>
	    Each <command>qandaentry</command> element may include a
	    <command>blockinfo</command> with several
	    <command>printhistory</command> blocks. Each of them contains a
	    paragraph with a group identifier made of the same three attributes
	    as described in <xref linkend="exam_handling_question_catalogs"/>
	    and five <command>phrase</command> elements with the numbers derived
	    from the use of the question in that set. In the example the
	    question was answered by 22 perons, 20 of them answered correctly,
	    nobody answered incorrectly and only two persons left it blank.
	  </para>

	  <para>
	    ADA does not provide any support on how to collect and insert that
	    information within each question. Since the files have an XML
	    structure, it would be feasible to design some application that
	    given a set of question identifiers and the proper data, it inserts
	    them with the proper markup, but at this time, ADA does not offer
	    such functionality.
	  </para>

	  <para>
	    However, the rules to produce test exams (see <xref
	    linkend="typeset_tf_questions"/> and <xref
	    linkend="typeset_mc_questions"/>) produce an additional files with
	    extension <filename>_stats</filename> in which all the data include
	    for the questions are shown in tables. The following figure shows
	    the table resulting from processing the data in the previous example:
	  </para>


	</answer>
      </qandaentry>

<!-- <qandaentry id=""> -->
<!-- 	<question> -->
<!-- 	  <para> -->
<!-- 	  </para> -->
<!-- 	</question> -->
<!-- 	<answer> -->
<!-- 	  <para> -->
<!-- 	  </para> -->
<!-- 	</answer> -->
<!--       </qandaentry> -->

    </qandaset>

  </section>

  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <!--                                                              -->
  <!--                             GIT                              -->
  <!--                                                              -->
  <!-- ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ -->
  <section id="Git_for_authors" xreflabel="Top of the Section">
    <title>Using Git as an author with ADA</title>

    <qandaset defaultlabel="qanda">

      <qandaentry id="what_is_VCS">
	<question>
	  <para>
	    What is a <ulink
	    url="en.wikipedia.org/wiki/Revision_control">version control
	    system</ulink>?
	  </para>
	</question>
	<answer>
	  <para>
	    A Version Control System (VCS) is a tool that allows the manipulation of
	    different versions of information units (typically files) by
	    multiple users.
	  </para>

	  <para>
	    Files change over time, and current file systems store only the last
	    version. Version control systems, on the other hand store (almost)
	    all the different versions that files have over time. The location
	    where these versions are stored is commonly known as a
	    <emphasis>repository</emphasis>. But on top of storing versions,
	    these tools also offer multiple operations to manipulate them. The
	    two most common operations amount to send a new version of the files
	    to the repository and get the latest version of the repository.
	  </para>

	  <para>
	    But when a set of users is sharing files, version management may
	    become specially complicated. What happens if two users have the
	    same file and both modify it? Who has the latest version? How is this
	    situation managed? Actual VCS tools have very sophisticated
	    techniques to solve these situations and offer users a comfortable
	    environment to manipulate complicated multiple versions of large
	    sets of files.
	  </para>

	  <para>
	    As with almost any application, there are multiple VCS, both open
	    source and commercial. ADA is itself managed using
	    <command>GIT</command>, an open source VCS, and the authoring
	    environment proposed relies also in the use of the same tool. The
	    problem of version control is orthogonal to authoring. In other
	    words, any distributed authoring environment probably has some
	    degree of file sharing and version management. If you solve this
	    problem with <command>git</command> or any other tool is independent
	    of the problem of creating and assembling resources as supported by
	    ADA.
	  </para>
	</answer>
      </qandaentry>

      <qandaentry id="gitwhatis" xreflabel="What is git">
	<question>
	  <para>What is Git?</para>
	</question>
	<answer>
	  <para>
	    Git is a modern, fast, open-source distributed version control
	    system, originally developed by Linus Torvalds.  It is being used in
	    large-scale open-source projects like, for example, the Linux Kernel
	    and the X Window System <emphasis>X.org</emphasis>, although it is
	    suitable also for small projects.
	  </para>

	  <para>
	    Unlike other well-known version control systems like CVS and
	    Subversion (which rely on a central repository), Git uses a
	    distributed repository. A central repository is not necessary because
	    each developer can have her own repository with the full history of
	    the project. Changes done by a developer in her repository can be
	    easily copied to other repositories.
	  </para>

	  <para>
	    GIT approaches the problem of managing versions of a set of files
	    from the point of view of four locations as shown in the following
	    figure (derived from an excellent post by <ulink
	    url="http://osteele.com">Oliver Steel's Blog</ulink>).
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/GitScenario.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Git scenario</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>
	  
	  <para>
	    The user works with her files normally. The <quote>index</quote> is
	    similar to a container in which the changes to the files can be
	    deposited gradually to later be packed and sent to the local
	    repository. As it can be seen in the figure, there are commands to
	    send changes from the files to the index, from the index to the
	    local repository or even directly from the files to the repository.
	  </para>

	  <para>
	    This workflow can be done entirely in a local machine with no
	    information exchange with any other repository. However, if the
	    different versions need to be shared through an external repository,
	    <command>git</command> offers commands to send these changes or
	    update the local files with the latest revision respect to the
	    remote repository. These commands are explained in the
	    following questions.
	  </para>

	  <para>
	    But aside from this four-location scenario, Git, as all VCS tools,
	    offers a very powerful functionality to group and manage versions
	    into what are called <emphasis>branches</emphasis>. Branches are
	    different views of the local repository that contain different
	    versions of the files in the repository. At any point in time, the
	    work directory and the index are pointing to one and only one branch
	    of the repository. It then appears the notion of <quote>being placed
	    in a branch</quote> (or should we say <quote>perched</quote>) while
	    working with our local files managed by git.
	  </para>

	  <para>
	    The most commonly used operations with branches are: create a branch
	    with a name (simply duplicate the content of the current branch),
	    change the current branch, and merge the content of one branch with
	    the current branch. Branches might be a bit counterintiutive at
	    first, but together with an extremely powerful merge capability,
	    offer an effective way to organize multiple versions in a complex
	    set of files.
	  </para>

	  <para>
	    For further information about Git, go to the <ulink
	    url="http://git.or.cz/">official Git Web site</ulink>.
	  </para>

	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="gitinstall" xreflabel="How to install Git">
	<question>
	  <para>How do I install Git?</para>
	</question>
	<answer>
	  <para>
	    Git is multi-platform. It can be installed on Windows, Linux and Mac
	    systems.
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		On Windows, you have two options: the software is already
		installed as part of Cygwin (see <xref
		linkend="howtoinstallcygwin"/>) or as an standalone windows
		program called <ulink
		url="http://code.google.com/p/msysgit/">msys-git
		installer</ulink>. If you choose the later option,
                the first step is to download the installer
		from the project page. 
	      </para>

	      <para>
		Start the installer and advance on the required steps until the
		system tries to adjust the <varname>PATH</varname> environment
		as shown in the following figure:
	      </para>

	      <informalfigure>
		<mediaobject>
		  <imageobject>
		    <imagedata fileref="images/GitWindowsInstall.png" format="PNG"/>
		  </imageobject>
		  <textobject>
		    <phrase>Git Setup Path Environment</phrase>
		  </textobject>
		</mediaobject>
	      </informalfigure>

	      <para>
		The option of installing Git Bash Only needs to be select to
		avoid conflicts with the Git version already installed as part
		of the Cygwin environment.
	      </para>

	      <para>
		Git needs an additional program to transfer data to and from a
		remote repository. When selecting the SSH executable, select
		OpenSSH as shown in the following figure.
	      </para>

	      <informalfigure>
		<mediaobject>
		  <imageobject>
		    <imagedata fileref="images/GitWindowsInstall2.png" format="PNG"/>
		  </imageobject>
		  <textobject>
		    <phrase>Git Setup SSH Tool</phrase>
		  </textobject>
		</mediaobject>
	      </informalfigure>

	      <para>
		Once the installation has finished, you have two options to work
		with Git, either a shell terminal which opens if you execute the
		installed program named <command>Git Bash</command>, or a
		graphical user interface named <command>Git GUI</command>. This
		last interface offers the initial commands to clone, create or
		open a repository.
	      </para>

	      <para>
		After selecting a repository, Git GUI allows you to create a
		link to start the GUI directly manipulating that repository as
		shown in the following figure.
	      </para>

	      <informalfigure>
		<mediaobject>
		  <imageobject>
		    <imagedata fileref="images/GitWindowsInstall4.png" format="PNG"/>
		  </imageobject>
		  <textobject>
		    <phrase>Git GUI Create Shortcut</phrase>
		  </textobject>
		</mediaobject>
	      </informalfigure>
	    </listitem>

	    <listitem>
	      <para>
		On Linux, it should be available as a regular package in your
		distribution. For example, the main Git package in Debian is
		called <command>git-core</command>. It can be installed using
		<emphasis>Aptitude</emphasis> or any other available package
		manager.
	      </para>
	    </listitem>

	    <listitem>
	      <para>
		On Mac, the <ulink
		url="http://code.google.com/p/git-osx-installer/">Git OS X
		installer</ulink> is available.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="gitrepositories">
	<question>
	  <para>
	    My Git repository is local to my machine, but how is the content
	    shared with other authors and course coordinators?
	  </para>
	</question>
	<answer>
	  <para>
	    The distributed model offered by Git allows several workflows. One
	    possible workflow is presented here, but different alternatives are
	    also possible. It is assumed that a set of authors create content
	    for a course that is ultimately combined in a common location by a
	    person called the <emphasis>coordinator</emphasis> to produce the
	    final version to be published in the Web.
	  </para>

	  <para>
	    Also, a repository for the course material (and optionally course
	    administration files) must be installed in an location associated to
	    the course and such that all the authors must be able to exchange
	    files (for example through SSH). This repository will be referred to
	    as the <emphasis>shared repository</emphasis> in some parts of this
	    FAQ.
	  </para>

	  <para>
	    The course coordinator sets up an initial version of the shared
	    repository. Git repositories allow for versions to be grouped in
	    what is called a <emphasis>branch</emphasis>. Branches are copies of
	    the repository such that versions can be selected from any of them
	    to manipulate. There is always a branch called
	    <filename>master</filename> and the coordinator should use it as the
	    <emphasis>official</emphasis> one containing the course material (if
	    you are a course coordinator, see <xref
	    linkend="git-admin-shared-repo"/>).  Published material is intended
	    to be built from the contents of this branch.  The course
	    coordinator is the person in charge of combining the changes from
	    all the authors into this branch. In order to maintain the new
	    versions produced by the authors properly contained, a branch should
	    be created for each author that is going to use the
	    repository. Authors will modify files in their respective local
	    repositories and eventually upload a new version of their files to
	    the proper branch of the shared repository. The coordinator takes
	    authors' contributions from their branches and merges them into this
	    repository (if you are a course coordinator, see <xref
	    linkend="git-admin-merge"/>). The following figure illustrates the
	    interaction between authors and course coordinator through the
	    shared repository.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/GitAuthorBranches.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Git GUI Create Shortcut</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    As it can be seen, in addition to the course shared repository,
	    authors have their own local repository in their workspace (their
	    laptop, corporate user account, etc.) These repositories can be
	    easily set up by cloning the course repository (see <xref
	    linkend="gitclone" />). Authors then edit and store their versions
	    in their local repositories, and when the new version is ready to be
	    shared with the rest of authors, they push the changes to the proper
	    author branch in the shared repository (see <xref
	    linkend="gitpush"/>).
	  </para>

	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="gitclone" xreflabel="How to clone a repository">
	<question>
	  <para>
	    How do I create my local repository from the 
	    shared repository?
	  </para>

	  <para>
	    The course coordinator gave me the URL to access the shared
	    repository. How do I obtain the initial files from that repository
	    before starting to work?. How do I set-up my local Git repository
	    from it?
	  </para>
	</question>

	<answer>
	  <para>
	    A repository containing a copy of another repository is obtained
	    using the <command>clone</command> command. Let us suppose that the
	    shared repository is available through SSH with the following
	    parameters:
	  </para>

	  <itemizedlist>
	    <listitem>
	      <para>
		Remote host where the course account is available:
		<command>accounts.example.com</command>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		User name of the course account: <command>mycourse</command>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Path within the course account where the shared repository
		resides: <command>/home/mycourse/repository/material</command>.
	      </para>
	    </listitem>
	    <listitem>
	      <para>
		Name of your branch in the shared repository:
		<command>john</command>.
	      </para>
	    </listitem>
	  </itemizedlist>

	  <para>
	    Open a Git Shell window (see <xref linkend="gitinstall"/>). Go to
	    the directory where you want to store your repository (take into
	    account that git will create a new folder with the name
	    <filename>material</filename>). Execute the following command:
	  </para>

	  <programlisting>$ <command>git clone ssh://mycourse@accounts.example.com/home/mycourse/repository/material</command></programlisting>

	  <para>
	    You will be asked to authenticate with <command>mycourse</command>'s
	    password. The program will then print several messages and after a
	    while a clone of the shared repository should appear now in a new
	    sub-directory called <command>material</command> inside your current
	    directory. The following figure illustrates this process.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/GitAuthorCloned.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Cloned repository in author area</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    Now enter in that directory and type <command>git status</command>:
	  </para>

	  <programlisting>$ <command>git status</command>
# On branch master
nothing to commit (working directory clean)</programlisting>

	  <para>
	    As you can see, the repository has been successfully downloaded, you
	    are in the <filename>master</filename> branch and the working
	    directory is clean of any changes. If the command says that you are
	    placed on a branch different from <command>master</command>, then
	    you just must change to that branch with the command:
	  </para>

	  <programlisting>$ <command>git checkout master</command></programlisting>

	  <para>
	    If you are not placed on the <command>master</command> branch and
	    the previous command failed, it means that the
	    <command>master</command> branch was not cloned. To create it you
	    must type:
	  </para>

	  <programlisting>$ <command>git checkout -b master origin/master</command></programlisting>

	  <para>
	    Your repository should now be placed on branch
	    <command>master</command> as illustrated in the following figure.
	  </para>

	  <para>
	    Before beginning to work, you need to edit the configuration file of
	    your repository to simplify the exchange of information with your
	    author branch in the shared repository. Open the file
	    <filename>.git/config</filename> in your repository directory with a
	    plain text editor and add the line <command>push =
	    master:john</command> at the end of the <command>remote
	    "origin"</command> section. Remember that <command>john</command> is
	    the name of your branch in the shared repository in this
	    example. The file should now look something like this:
	  </para>

	  <programlisting>$ <command>cat .git/config</command>
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote "origin"]
        url = ssh://john@accounts.example.com/home/mycourse/repository/material
        fetch = +refs/heads/*:refs/remotes/origin/*
        <command>push = master:john</command>
[branch "master"]
        remote = origin
        merge = refs/heads/master</programlisting>
	
	  <para>
	    Now your local repository is ready to work. Go ahead and modify your
	    files in this repository, and eventually send the changes first to
	    the index (if you need to do so) and then to your local repository
	    (see <xref linkend="gitcommit" />). Whenever you think appropriate
	    push your changes to your branch in the shared repository (see <xref
	    linkend="gitpush" />), and to obtain the latest version from the
	    repository, update from time to time your local repository(see <xref
	    linkend="gitpull" />).
	    
	  </para>

	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="gitcommit" xreflabel="How to commit changes">
	<question>
	  <para>How do I commit changes to my local git repository?</para>
	</question>
	<answer>
	  <para>
	    <quote>Commits</quote> are the basic unit used by Git to keep track
	    of the different versions of the contents it manages. Only the
	    versions committed into the repository are available later for
	    reverting changes, examining history, computing differences between
	    versions, etc. In other words, if you never commit files, it is like
	    working with no VCS at all. So, commit often, in an orderly fashion
	    (this takes some experience) and trying to separate changes in
	    logical units (this takes even more experience).
	  </para>

	  <para>
	    Authors make continuous changes to their content. After changing
	    some files, typically when they finish a logical unit of work
	    (e.g. finish writing or reviewing a document section, including a
	    figure in a document, finish a draft they want to share with others,
	    etc.), authors send the new version to the local repository. The
	    action of sending a new version into the local repository is called
	    a <emphasis>commit</emphasis>.  For each commit, Git stores the
	    differences between the files now and the files in
	    the previous commit.
	  </para>

	  <para>
	    When you have a new version of the files you want to commit, it
	    helps sometimes to take a look at those changes before sending them
	    to the repository. This is achieved with the <command>git
	    status</command> command:
	  </para>

	  <programlisting>$ <command>git status</command>
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file>..." to unstage)
#
#       <command>new file:   images/ReallyCoolImage.svg</command>
#
# Changed but not updated:
#   (use "git add &lt;file>..." to update what will be committed)
#
#       <command>modified:   MyCoolResource.xml</command>
#
# Untracked files:
#   (use "git add &lt;file>..." to include in what will be committed)
#
#       <command>MyCoolResource.html</command>
#       <command>MyCoolReource.pdf</command>
#       <command>build.out</command></programlisting>

	  <para>
	    The text dumped on the screen is the way Git has to tell us what is
	    the situation between your files, the index and the local repository
	    (refresh your memory with <xref linkend="gitwhatis"/>). It first
	    shows those files that are already inside the index and ready to be
	    committed (in the example
	    <filename>images/ReallyCoolImage.svg</filename>). It then shows the
	    files that have changed but are not inside the index (in this case
	    <filename>MyCoolResource.xml</filename>). And it finally shows those
	    files that Git knows nothing about them, or in other words, are
            ignored
	    by git or <emphasis>untracked</emphasis>. If you need a much more
	    detailed report on the changes made, use the command <command>git
	    diff</command>, which shows the lines that changed (were added,
	    removed or modified) in all the modified files.
	  </para>

	  <para>
	    There are two typical ways to send changes to the local
	    repository. If you want to send only the files in the index, then
	    the command is <command>git commit</command>. In order to be
	    considered as changes, files need to be explicitly placed in the
	    index with the command <command>git add file</command>. If this
	    concept of the index is too confusing, forget about it for the time
	    being and use it only once you feed the need for it.
	  </para>

	  <para>
	    The alternative way of doing a commit is to ignore the index and
	    simply send the changes in all the files (the second section on the
	    report shown by <command>git status</command>). To achieve this,
	    just type <command>git commit -a</command>. This command commits all
	    the files that have been modified since the last commit
	    (independently of being in the index or not).
	  </para>

	  <para>
	    The <command>commit</command> command always asks for a message
	    describing the changes that are being sent to the repository. There
	    is this unwritten convention that says that comments should include
	    a summary (similar to an email subject) in the first line, then an
	    empty line and then a longer description of the changes if needed.
          </para>

	  <example>
	    <title>Example of a comment attached to a git commit</title>
	    <programlisting>Redesigned completely the figure on this section

The figure was actually very confusing, so I modified the arrows (which were
backwards and added some colors so make it more intuitive.
       <command>modified:   MyCoolResource.xml</command></programlisting>
	  </example>

	  <para>
	    Git places several lines in the editor as part of the message. But
	    all of them start with the <quote>#</quote> symbol that says that it
	    will be ignored. Git places them there just in case you want to
	    include any of them, and saves you the time to type it (as the last
	    line in the example)
	  </para>

	  <para>
	    If you create a new file, Git ignores its presence and is listed as
	    <emphasis>untracked</emphasis>. If you want that file to be part of
	    the versions managed by Git you must include it explicitly with the
	    command <command>git add &lt;filename&gt;</command>. This command also
	    includes the new file in the index. The next time you commit your
	    changes, the file will be considered by Git. After adding a file you
	    may check the status of your working files with the command
	    <command>git status</command>.
	  </para>

	  <para>
	    Sometimes, but only sometimes, you've modified lots of files, and
	    instead of creating a new version with all the changes, you would
	    like to document the changes separately by grouping some files. For
	    example, you made two clearly identified changes. One in files
	    <filename>f1</filename> and <filename>f2</filename>, and the second
	    in files <filename>f3</filename> and <filename>f4</filename>. The
	    command <command>git commit -a</command> will send the new versions
	    of all four files to the repository, but you would like to send the
	    first two with a message and the second two with another message in
	    separated commits.
	  </para>

	  <para>
	    This is precisely the purpose of the index! The index is this
	    fictitious box in which files are prepared and packed to be sent to
	    the local repository. By using the command <command>git add
	    &lt;filenames></command>, you can place the files you want in the
	    index. Once you have the right files, run the command <command>git
	    commit</command> (without the <command>-a</command> option!) and the
	    files in the index, and only them, are sent to the repository. No
	    other changes in your local files are considered and the index
	    appears now as empty. You can then proceed to place in the index the
	    second set of files and execute the second commit.
	  </para>

	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="gittrackedfiles">
	<question>
	  <para>What files should be added into the Git repository?</para>
	</question>
	<answer>
	  <para>
	    Source code management tools, like Git, are designed to
	    track <emphasis>source files</emphasis>.
	    Files produced automatically by compilers, stylesheets,
	    image transformation programs, etc. should not be tracked.
	  </para>
	  <para>
	    This does not mean that untracked files cannot be inside
	    your working directory, they can, but just that they
	    should not be added
	    into the Git repository. Do not worry about having them in
	    your  working directory, because only files that are
	    added explicitly with the <command>git add &lt;filename></command>
	    command are tracked by Git. Be careful when you add
	    a directory with <command>git add</command>, because it
	    adds all the files inside it into the repository.
	    If there are files in that directory that should not be
	    added, it is better to list the files to be added explicitly. 
	  </para>
	  <para>
	    In the case of ADA, add into the Git repository your Docbook source
	    files, your figures in the vector format produced by your
	    favorite drawing program (normally SVG files), configuration files
	    like <filename>Properties.txt</filename> and
	    <filename>Params.xml</filename> and, in general, any other resources
	    that are not generated automatically by ADA.
	  </para>
	  <para>
	    In general, do not include into the Git repository 
	    files like PDFs and HTMLs
	    produced from Docbook or LaTex sources,
	    PNG images produced from SVG figures, the backup files
	    that are saved by some editors, etc.
	  </para>

	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="gitcommitlocal">
	<question>
	  <para>
	    I have just committed some changes, why are they not visible in the
	    shared repository?
	  </para>
	</question>
	<answer>
	  <para>
	    When you commit changes, they are only stored in your local
	    repository. Remember, you own your repository. If you want those
	    changes to be stored also in the shared repository, you have to
	    explicitly send them (or push them!) to that repository after
	    committing. See <xref linkend="gitpush"/> for further explanation.
	  </para>

	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="gitpull" 
		  xreflabel="How to update your local repository with others' changes">
	<question>
	  <para>
	    How do I update my local repository to see the latest changes
	    published on the course shared repository?
	  </para>
	</question>

	<answer>
	  <para>
	    Make sure your are placed in your <command>master</command> branch
	    and type the command:
	  </para>

	  <programlisting>$ <command>git pull</command></programlisting>

	  <para>
	    If there have been any changes in the course repository (ore more
	    precisely in its <command>master</command> branch) they are now
	    included in your repository.
	  </para>

	  <para>
	    The <command>pull</command> can only be executed if your index is
	    empty. Remember that empty box in <xref linkend="gitwhatis"/>? To
	    make sure you have no pending changes, commit them before executing
	    <command>git pull</command>.
	  </para>

	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="gitpush" 
		  xreflabel="How to send changes to the shared repository">
	<question>
	  <para>
	    How do I send the changes in my local repository to the shared
	    repository?
	  </para>
	  <para>
	    I have created some cool resources and they are committed into my
	    local repository, and now I want to share them with the rest of
	    authors.  How do I upload the new files to the shared repository?
	  </para>
	</question>

	<answer>
	  <para>
	    If your changes have been committed into your the
	    <command>master</command> branch and you have set-up your local
	    repository following the instructions in <xref linkend="gitclone"/>,
	    you just have to execute:
	  </para>

	  <programlisting>$ <command>git push</command></programlisting>

	  <para>
	    Your changes should be now on your branch in the
	    shared repository. If your modifications are ready to
	    be reviewed by the course coordinator,
	    you may tell her that there are new contents there.
	    The course coordinator will review them and,
	    if they are all right, put them into the official branch. 
	  </para>


	  <para>Back to <xref linkend="Git_for_authors"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="git_author_triangle_flow"
		  xreflabel="How to exchange files with the shared repository">
	<question>
	  <para>
	    I got a clone of the shared repository and know a few commands. How
	    is the interaction then taking place?
	  </para>

	  <para>
	    After cloning, and modified files, I sent the new version to my
	    local repository, I <quote>pulled</quote> new versions from the
	    shared repository and I see how new files appear/dissapear/change,
	    and I even <quote>pushed</quote> some changes of my own to that
	    repository, can I see the big picture now?
	  </para>
	</question>
	
	<answer>
	  <para>
	    The proposed workflow (there are many others possible) is
	    illustrated in the following figure.
	  </para>

	  <informalfigure>
	    <mediaobject>
	      <imageobject>
		<imagedata fileref="images/GitAuthorTriangle.png" format="PNG"/>
	      </imageobject>
	      <textobject>
		<phrase>Git/Author interaction triangle</phrase>
	      </textobject>
	    </mediaobject>
	  </informalfigure>

	  <para>
	    You initiated the process by cloning the shared repository (see
	    <xref linkend="gitclone"/>), then modified your own files and first
	    committed those new versions to your local repository (see <xref
	    linkend="gitclone"/>), once these changes were ready to be shared
	    you pushed them to the shared repository (see <xref
	    linkend="gitpush"/>) and where stored in a different branch
	    specially reserved for your changes. Somebody else, after inspecting
	    (or not) your changes, took them and promoted them to the master
	    branch by a <quote>merge</quote> operation. If any other file has
	    changed in the shared repository, you may pull them (see <xref
	    linkend="gitpull"/>.
	  </para>

	  <para>
	    So, a hypothetical sequence of commands in your regular day to day
	    work as an author would be:
	  </para>

	  <programlisting>$ <command>git pull</command> # (Get the latest files)
... Work on your material and produce really cool stuff ...
$ <command>git add &lt;new files&gt;</command> # (Some new files need to be added)
$ <command>git commit (-a)</command> # (I'm done, store the changes locally)
... Go home/coffee up/take a nap/Lunch/Phone/ whatever
... Work on your material and modify it again ...
$ <command>git commit (-a)</command> # (I'm done with this other set of changes)
$ <command>git push</command> # (Ready for prime time. Send it to the shared repository)
... Notify the coordinator that there is new stuff ready ...
... Wait for any comments ...
$ <command>git pull</command> # (Get the latest files again)
...</programlisting>
	</answer>
      </qandaentry>

    </qandaset>
  </section>

  <section id="Git_for_course_coordinator" xreflabel="Top of the Section">
    <title>Using Git as a course coordinator with ADA</title>

    <qandaset defaultlabel="qanda">

      <qandaentry id="git-admin-shared-repo"
	xreflabel="How to set-up the shared repository">
	<question>
	  <para>
	    I am a course coordinator. How do I set-up the shared repository?
	  </para>
	</question>
	<answer>
	  <para>
	    You need first some account or location which is accessible to the
	    rest of authors. It will be assumed that you have such
	    account. Enter in the course account and decide where you want to
	    put the shared repository. It can be anywhere, but remember not to
	    put it in a place served by a Web server if you want your repository
	    not to be public. Once you have created a directory for the
	    repository (named, for example, <filename>material</filename>),
	    enter into this directory and type:
	  </para>

	  <programlisting>$ <command>git init</command></programlisting>

	  <para>
	    The <filename>material</filename> directory is now a Git repository
	    placed on branch <command>master</command>, with no content. This
	    will be the official branch of the shared course repository. It
	    means that whatever files are on that branch, they are taken as the
	    official versions.
	  </para>

	  <para>
	    Create the initial layout for your course (directories, common
	    files, etc.) and commit your changes.  The command <command>git
	    add</command> will be useful to include files in the version control
	    mechanism (see <xref linkend="gitcommit" />). Remember that Git does
	    not handle empty directories. Therefore, if you create directories
	    with no material , you may want to create an initial version of
	    <filename>Properties.txt</filename> inside that directory and add it
	    at the set of files controlled by Git.
	  </para>

	  <para>
	    After you have finished your initial layout and committed it, create
	    a new branch for each contributing author:
	  </para>

	  <programlisting>$ <command>git branch john</command>
$ <command>git branch mary</command>
$ <command>git branch laura</command>
$ <command>git branch peter</command></programlisting>

          <para>
	    There is no need to create all the required branches in advance. You
	    may create additional branches whenever new authors are considered.
	  </para>

	  <para>
	    The shared repository is now ready. Tell the authors the basic
	    parameters to access it (remote machine they should connect to, name
	    of the course account, location of the repository in the course
	    account, and their author branch name).
	  </para>

	  <para>
	    There are several ways you may interact with this repository. One of
	    them could be to keep a clone of this repository in your local
	    workspace. Follow the instructions in <xref linkend="gitclone" />
	    and obtain such clone. One possible workflow produces all the
	    changes in the <command>master</command> branch in your local
	    repository and push the changes into the <command>master</command>
	    branch of the shared repository when it is ready to be made
	    public. For more detailed instructions on how to manage all the
	    changes, follow the instructions in <xref
	    linkend="git-admin-clone"/>.
	  </para>

	  <para>Back to <xref linkend="Git_for_course_coordinator"/>.</para>
	</answer>
      </qandaentry>

      <qandaentry id="git-admin-clone"
	xreflabel="How the coordinator clones the shared repository">
	<question>
	  <para>I am a course coordinator. How do I set-up my local
	    repository?
	  </para>
	</question>
	<answer>
	  <para>
	    We recommend you to create a clone of the shared repository in your
	    own workspace (probably your laptop or desktop computer).  Follow
	    the instructions in <xref linkend="gitclone" /> to create your
	    repository and set-up your branch <command>master</command>, with
	    the exception that the line you should add to your
	    <filename>.git/config</filename> file which in your case is
	    <command>push = master:master</command>:
	  </para>

<programlisting>$ <command>cat .git/config</command>
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote "origin"]
        url = ssh://YourLogin@accounts.example.com/home/mycourse/repository/material
        fetch = +refs/heads/*:refs/remotes/origin/*
        <command>push = master:master</command>
[branch "master"]
        remote = origin
        merge = refs/heads/master</programlisting>

	  <para>
	    This change is because your <command>master</command> branch in your
	    local repository will be the branch where you prepare the official
	    material that other authors will see after you push the changes into
	    the <command>master</command> branch of the shared repository.
	  </para>

	  <para>
	    Your main role as the course coordinator is to supervise the changes
	    proposed by your team of authors and incorporate them to the
	    official <command>master</command> branch of the shared
	    repository. But in order to do that, you have to access to the
	    contributions of all the authors. To perform such task replicate in
	    your local repository the author branches in the shared
	    repository. For example:
	  </para>

	  <programlisting>$ <command>git branch --track john origin/john</command>
$ <command>git branch --track mary origin/mary</command>
$ <command>git branch --track laura origin/laura</command>
$ <command>git branch --track peter origin/peter</command></programlisting>

	  <para>
	    Your local repository is now prepared for merging contributions from
	    other authors. Don't worry, the merging will be done with the help
	    of Git which is really good at it. If you happen to be not only the
	    course coordinator but also an author, then it is recommended to
	    have your own local branch to do such changes and then merge them
	    into the <command>master</command> branch. A typical sequence when
	    you have changes and you want them to be included in the master
	    branch is:
	  </para>

	  <programlisting>$ <command>git checkout master</command>
$ <command>git checkout -b new-calendar</command>
... edit ... commit ... edit ... commit ...
$ <command>git checkout master</command>
$ <command>git merge new-calendar</command>
$ <command>git branch -d new-calendar</command></programlisting>

	  <para>
	    The command <command>git checkout -b</command> creates a new branch
	    starting from the current branch (<command>master</command> in this
	    case). After you have edited and committed (probably several
	    commits), you can merge those changes into the official branch with
	    <command>git merge</command>. Finally, you can safely remove the
	    temporary branch with <command>git branch -d</command>.  If you plan
	    to do further changes in the short-term about the same topic, you
	    can skip the last step, and reuse the branch.
	  </para>

	  <para>Back to <xref linkend="Git_for_course_coordinator"/>.</para>
	</answer>
	

      </qandaentry>

      <qandaentry id="git-admin-merge"
	xreflabel="How to merge contributions from authors">
	<question>
	  <para>
	    I am a course coordinator. How do I merge contents from authors into
	    the official course branch?
	  </para>
	</question>
	<answer>
	  <para>
	    Merging is probably the most delicate of the steps, but Git gives
	    you a lot of flexibility to perform this operation. As with the rest
	    of the proposed workflow, there are multiple alterntives for merging
	    contributions from a set of authors, but a concrete one is explained
	    here.
	  </para>

	  <para>
	    You should have created a local repository and you have your
	    <command>master</command> branch as well as one branch per
	    author. If you are not at this point, stop right here and go back to
	    <xref linkend="git-admin-clone" />.
	  </para>

	  <para>
	    Suppose you want to merge some changes introduced by Mary. She
	    should have pushed her changes into the <command>mary</command>
	    branch in the shared repository.  Go to your <command>mary</command>
	    local branch and update it (that is, fetch those changes from the
	    shared repository):
	  </para>

	  <programlisting>$ <command>git checkout mary</command>
$ <command>git pull</command></programlisting>

	  <para>
	    The first command places you in the branch assigned to Mary, the
	    second, as the name says, <quote>pulls</quote> those changes to your
	    local copy of such branch. You may review them and take a look at
	    the history of commits performed by Mary with <command>git
	    log</command>. If you see no problems and the changes are good to be
	    incorporated to the official branch, it is time then to
	    <emphasis>merge</emphasis> her changes into the
	    <command>master</command> branch (if you are not happy with the
	    changes ask Mary to fix the problems). In order to merge
	    <emphasis>into</emphasis> the master branch, you need to change to
	    such branch:
	  </para>

	  <programlisting>$ <command>git checkout master</command>
$ <command>git merge mary</command></programlisting>

	  <para>
	    The changes of Mary should now be available in your local
	    <command>master</command> branch. Since this is the official source
	    of material for the entire course, make sure the material is built
	    correctly with <command>adado</command>. If you need to fix details,
	    you may do so and commit the changes normally to your local
	    repository. So far, no change has left your local repository to the
	    shared one. Once you are finished with the modifications and see the
	    material perfectly stable again, you want them to be in the official
	    branch of the shared repository, available for all the authors. It
	    is time then to push these changes:
	  </para>

	  <programlisting>$ <command>git push</command></programlisting>

	  <para>
	    Authors will now be able to obtain these changes the next time they
	    execute <command>git pull</command> from their local repository.
	  </para>


	  <para>
	    If you made it to this point, and you went several times around this
	    loop of pulling changes, review them and pushing them to the shared
	    repository, you are ready to explore a bit deeper what Git is
	    capable of doing. The commands in this FAQ are just a small subset
	    of the real functionality.
	  </para>

	  <para>Back to <xref linkend="Git_for_course_coordinator"/>.</para>
	</answer>
      </qandaentry>
    </qandaset>
  </section>

</article>

<!--
Local Variables: 
compile-command: "adado" 
End:
-->
