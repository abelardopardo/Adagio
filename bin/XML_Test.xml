<?xml version="1.0" encoding="UTF-8"?>
<article id="ADA_FAQ">
  <title>ADA Frequently Asked Questions <phrase condition="ada_version"/></title>

  <articleinfo condition="dc.info">
    <publisher>
      <publishername>Carlos III University of Madrid</publishername>
    </publisher>
    <authorgroup>
      <author>
        <firstname>Abelardo</firstname><surname>Pardo</surname>
      </author>
      <author>
        <firstname>Jes√∫s</firstname><surname>Arias Fisteus</surname>
      </author>
    </authorgroup>
    <abstract>
      <para>Frequently Asked Questions of ADA</para>
    </abstract>
    <copyright>
      <year><link linkend="gfdl">2008, 2009</link></year>
      <holder>
        <ulink url="http://www.uc3m.es">Universidad Carlos III de
          Madrid</ulink>
      </holder>
    </copyright>
  </articleinfo>

  <para>You may also access to the <ulink url="FAQ.pdf">PDF version of this
  document</ulink>.</para>






  <section id="About_ADA" xreflabel="Top of the Section">
  <title>About ADA</title>

  <qandaset>
    <qandaentry id="whatisada">
      <question>
        <para>What is ADA?</para>
      </question>
      <answer>
        <para>
          ADA is a tool that provides support for <quote>Agile and Distributed
          Authoring</quote>. Authors usually use a combination of tools to
          produce documents. The actual variety of documents makes more
          appropriate to refer to this items as resources. A resource may be a
          regular text document, but it may also be a screen capture, video
          clip, audio clip, picture, etc. ADA is conceived to manipulate
          resources in this context.
        </para>
        <para>
          The challenge appears when a large set of resources with a complex
          structure is created by a large number of authors working in a
          distributed environment.
        </para>

        <para>
          The first problem is the variety of tools used by the authors. ADA
          facilitates the post-processing by automatically producing
          preliminary versions of the created resources. The following figure
          illustrates a generic authoring environment and the support provided
          by ADA.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/AuthorEnv.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Author environment and ADA role</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          Once created, the exported resources can be sent to a location where
          they are automatically combined to produce the final resource. The
          following figure illustrates a scenario combining these two aspects.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Kitchen.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Combining resources with ADA</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          ADA offers support in two steps of this procedure.
        </para>

        <itemizedlist>
          <listitem>
            <para>
              To the author: ADA provides rules to automate typical processing
              steps to achieve an approximate appearance of the created
              resources. Authors may then focus on the content and verify,
              using these rules, that the final resource complies with certain
              minimum requirements (guidelines, size, quality, etc.)
            </para>
          </listitem>
          <listitem>
            <para>
              In the production phase: ADA allows specifying a set of rules to
              automatically combine all the contributions from different
              authors and produce a complex resource.
            </para>
          </listitem>
        </itemizedlist>

        <para>
          The main element for ADA in the author working directory is the rule
          file. This file has the name <filename moreinfo="none">Properties.txt</filename>
          (although it can be changed) and specifies which are the resource
          files and how they need to be processed to obtain the final
          resources. Each working directory needs a file with the rules
          applying to the files contained in it.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="whatisnotada">
      <question>
        <para>What ADA is not?</para>
      </question>
      <answer>
        <para>
          ADA is not a text editor, nor a graphic editor, nor an integrated
          creative environment. The author may use tools to create the
          resources, and ADA is used to automatically combine them into a
          global creation process.
        </para>

        <para>
          To use an analogy, ADA offers a very efficient courier service that,
          if you comply with certain requirements when creating resources, it
          takes them very quickly to the assembling plant, combines them with
          other resources contributed by other authors and automatically
          creates a final resource.
        </para>
      </answer>
    </qandaentry>
    <qandaentry id="whyisadaneeded">
      <question>
        <para>Why is ADA needed?</para>
      </question>
      <answer>
        <para>
          ADA is oriented toward reducing the creation/modification cycle of a
          set of resources with a non-trivial organization. In the information
          era, the creation process is changing radically. Authors are no
          longer required to use a concrete tool, but instead, certain formats
          are used to easily publish content. But what really takes a
          multi-user distributed authoring scenario to a new dimension is a
          <emphasis>simple modification cycle</emphasis>. Think Wikipedia, its
          distributed authoring paradigm has consolidated beyond any doubt,
          but in order for those authors to contribute effectively, resources
          are extremely easy to modify.
        </para>

        <para>
          A typical situation when a number of authors contribute toward a
          common resource is illustrated in the following figure. There is
          usually an entity that absorbs the complexity of providing a
          homogeneous view of the material usually through an expensive and
          time consuming production stage. This production requires then an
          additional step to bring all the material to the final web
          publishing platform.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/AuthorCycle.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Conventional authoring cycle</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          The following picture illustrates the change in methodology that can
          be achieved with the help of ADA. By providing a fast two-way
          information channel between creation and production, the management
          of a set of resources can be truly improved. ADA provides the rules
          that automatically connect the source documents with the final
          published resources such that changes can be performed at a very
          low turnaround cost.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/AuthorNewCycle.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Conventional authoring cycle</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          But aside from the turnaround time for changes, resources tend to be
          built hierarchically from the multiple sources. The internal
          organization of a resource can be often replicated in the process in
          which it is built. For example, to create the electronic version of
          a book, there is certain amount of work that can be done for each
          chapter individually accompanied by certain inter-chapter
          processing. The rules defined in ADA are prepared to be applied
          hierarchically at different points of the overall production
          procedure. The following picture illustrates a hypothetical scenario
          in which a resource is built by combining resources from four
          authors in three gradual stages.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ProductionCycle.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Full production cycle with ADA</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>
      </answer>
    </qandaentry>
  </qandaset>
</section>






  <section id="Installing_ADA_in_Windows" xreflabel="Top of the Section">
  <title>Installing ADA in Windows</title>
  <qandaset>
    <qandaentry id="requiredapplicationsinwindows">
      <question>
        <para>What are the required applications to run ADA in Windows?</para>
      </question>
      <answer>
        <para>
          ADA is prepared to supply rules to be used with several tools, but
          these tools need to be installed in the system. If they are not, the
          rules are never applied. However, to obtain the minimum
          functionality, ADA needs <emphasis>at least</emphasis> three
          applications to be installed (all of them Open Source, by the way.)
        </para>

        <itemizedlist>
          <listitem>
            <para>
              A <ulink url="http://java.sun.com">Java Run Time
              Environment (or simply a JRE)</ulink>.
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="http://www.cygwin.com">Cygwin</ulink>: A Linux-like
              environment for Windows. This application itself contains
              several additional packages used by ADA.
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="http://ant.apache.org">Ant</ulink>: A Java based
              build tool. ADA relies on Ant to decide which documents to build
              and which tools to use for the task. The rules are all written
              as Ant building files.
            </para>
          </listitem>
        </itemizedlist>

        <para>
          Aside from these three tools, ADA allows to process certain file
          types if some additional programs are installed. For example,
          translating figures from <ulink url="http://en.wikipedia.org/wiki/Scalable_Vector_Graphics">SVG</ulink>
          to <ulink url="en.wikipedia.org/wiki/PNG">PNG</ulink> can be done
          using <command moreinfo="none">Inkscape</command> but it needs to be properly
          installed and available for execution.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="how_to_install_jre" xreflabel="Java has been installed">
      <question>
        <para>
          How to install a Java Run-time Environment (or JRE) in Windows?
        </para>
      </question>
      <answer>
        <para>
          Java is a free tool developed by Sun Microsystems and the
          instructions on how to install it in windows provided with the
          package. You may download the software from <ulink url="http://www.java.com/en/download/download_the_latest.jsp">the
          official Free Java Download page</ulink>. Once the download
          finishes, execute the installer that asks a few simple questions and
          installs Java in your system.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="howtoinstallcygwin" xreflabel="How to install Cygwin">
      <question>
        <para>I got Java already installed, What else is required to run ADA?</para>
      </question>
      <answer>
        <para>
          Once <xref linkend="how_to_install_jre"/>, the next step is to
          download the <command moreinfo="none">Cygwin</command> tool, a Linux-like
          environment for Windows. Once downloaded, the initial page of the
          installer is shown in the following figure.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/CygwinSetUp.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Initial Cygwin Setup Program</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          After starting the set-up program, you need to specify several
          parameters to establish a connection with a server. Keep advancing on
          the installation steps until the screen to select the packages like
          the one in the following figure is shown.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/CygwinSelectPackages.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Screen to select packages in Cygwin</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          Click in the button with name <command moreinfo="none">View</command> that appears above
          the package list until the word <quote>Full</quote> appears to its
          left. At that point, all packages suitable to be installed are shown
          alphabetically ordered. From the list, you need to select
          <emphasis>at least</emphasis> the following packages.
        </para>

        <itemizedlist>
          <listitem>
            <para><command moreinfo="none">bash</command>: The GNU Bourne Again Shell.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">coreutils</command>: GNU core utilities.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">docbook-xml4*</command>: Docbook XML DTDs. Install
            all the packages with different versions to guarantee a wider
            compatibility scope.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">docbook-xsl</command>: XSL stylesheets to process
            DocBook.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">file</command>: Determine file types using the magic
            number.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">findutils</command>: Utilities for finding
            files.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">gawk</command>: A pattern scanning processing
            language.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">grep</command>: Search and print textual input for
            lines matching a specific pattern.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">libxslt</command>: The GNOME XSLT Library.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">libxml2</command>: XML C parser and toolkit.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">openssh</command>: SSH client and server programs.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">git</command>: Fast version control system used to
            download the latest ADA version.</para>
          </listitem>
        </itemizedlist>

        <para>
          ADA is capable of using additional tools, but they are not essential
          for the installation. The set-up program takes a few minutes to
          download all the required packages through a reasonably fast net
          connection. Keep in mind that this installer application remains
          installed in your computer and therefore can be executed at any
          other time to add/remove applications to the
          <command moreinfo="none">Cygwin</command> environment.
        </para>

        <para>
          After all the required packages are installed, finish the execution
          of the set-up program and start a <emphasis>Cygwin
          shell</emphasis>. This is done by clicking on the icon that the
          set-up program has left on your desktop or browsing through the
          program menu and selecting the Cygwin executable. Once started, a
          window like the one shown in the following figure appears on the
          screen.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/CygwinShell.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Cygwin shell screen</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          This window is a typical Linux command interpreter ready to process
          your commands. It is just a different way to give orders to your
          computer. Instead of clicking in different icons and menus,
          <command moreinfo="none">Cygwin</command> allows you to type the orders at the
          prompt of this interpreter. The first check is to make sure the
          Java Run-time Environment (or JRE) is properly installed. Go ahead
          and type the command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">which java</command></programlisting>

        <para>
          If the answer is a single path to a file with name
          <command moreinfo="none">java</command> similar to
        </para>

        <programlisting format="linespecific">/cygdrive/c/WINDOWS/system32/java</programlisting>

        <para>
          then the JRE is properly installed. If the message says something
          similar to <quote>which: no java in
          (/usr/local/bin:/usr/bin:/....)</quote> then you need to review your
          Java installation, because no JRE was found.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="install_ant" xreflabel="Ant installation">
      <question>
        <para>
          Got Java and Cygwin already installed, what is missing to run ADA?
        </para>
      </question>
      <answer>
        <para>
          The next tool required by ADA is <ulink url="http://ant.apache.org">Ant</ulink>, a Java based build
          tool. Ant is a multi-platform tool, and the installation simply
          amounts to downloading a zip file, deploying its files in a
          directory, and declaring a couple of environment variables.
        </para>

        <para>
          When deploying Ant in a directory there are two choices: install Ant
          as a regular windows application, or install Ant inside Cygwin
          (remember that <command moreinfo="none">Cygwin</command> is a simple Linux-like
          environment within your Windows system). The two choices are very
          similar because it only requires a JRE to be available. The
          important step is to set the environment variables ANT_HOME to point
          to the directory where Ant is installed and <varname>PATH</varname>
          to include the <filename moreinfo="none">bin</filename> directory inside that
          directory.
        </para>

        <para>
          To add a new variable or modify a current variable in the execution
          environment in Windows you need to first select the <quote>Control
          Panel</quote>, then select the <quote>System</quote> link. A new
          window opens with several panes. Select the pane with name
          <quote>Advanced</quote> and then click on the button with name
          <quote>Environment Variables</quote>. It is recommended to insert
          these definitions as part of the System Variables.
        </para>

        <para>
          A new variable with name <command moreinfo="none">ANT_HOME</command> (all uppercase)
          has to be declared and its value must be the directory where the Ant
          files where deployed from the zip archive. Additionally, the
          <varname>PATH</varname> variable (which is already defined) needs to
          be modified by adding the path to the <filename moreinfo="none">bin</filename>
          directory within the Ant installation directory. That is, append to
          the string already in the variable a semicolon and then the path to
          the bin directory within Ant (something similar to
          <filename moreinfo="none">C:\Applications\Ant\bin</filename>.)
        </para>

        <para>
          Once the installation is finished, you may check the availability of
          the tool by opening a new Cygwin shell. Type the command
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">which ant</command></programlisting>

        <para>
          If the answer is a single path to a file with name
          <command moreinfo="none">ant</command> such as
        </para>

        <programlisting format="linespecific">/cygdrive/c/Program Files/apache-ant-1.7.0/bin/ant</programlisting>

        <para>
          Ant is properly installed. If the message says <quote>which: no ant
          in (/usr/local/bin:/usr/bin:/....)</quote>, Ant is not being found
          and you need to review your installation steps.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="Fetch_ada_in_windows">
      <question>
        <para>
          Once I have the JRE, Cygwin and Ant installed, How do I install ADA?
        </para>
      </question>
      <answer>
        <para>
          Open a Cygwin shell and go to the directory where you want ADA
          installed (a directory with name <filename moreinfo="none">ADA</filename> will be
          created. The computer needs to be connected to the net. Execute the
          command:
        </para>

        <programlisting id="git_install_command" format="linespecific">$ <command moreinfo="none">git clone http://flautin.it.uc3m.es/abel/ADA</command></programlisting>

        <para>
          A list of messages appear on the screen. After a while (depending on
          the speed of your net connection), the command terminates and a new
          directory with name <filename moreinfo="none">ADA</filename> has been created
          containing all the required files.
        </para>
        <para>
          In order to make ADA available, the PATH environment variable needs
          to be modified by adding the path to the <filename moreinfo="none">bin</filename>
          directory. You may follow the same procedure described in the <xref linkend="install_ant"/>.
        </para>

        <para>
          Once the environment variable <command moreinfo="none">PATH</command> has been modified to
          include the <filename moreinfo="none">bin</filename> directory within ADA, open a
          brand new Cygwin shell and type the following command
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">which adado</command></programlisting>

        <para>
          As in the case of the <xref linkend="install_ant"/>, if the
          answer is a single path to the <filename moreinfo="none">adado</filename> file
          similar to
        </para>

        <programlisting format="linespecific">/home/.../.../ADA/bin/adado</programlisting>

        <para>
          ADA is properly installed. If the message says <quote>which: no
          adado in (/usr/local/bin:/usr/bin:/....)</quote>, ADA is not
          available for execution and you need to review your installation.
        </para>

        <para>
          The final step to make sure that the commands provided by ADA are
          available is to <xref linkend="run_adacheck"/>.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="no_catalogs">
      <question>
        <para>
          ADA takes a huge amount of time to process Docbook documents, why?
        </para>
      </question>

      <answer>
        <para>
          The symptoms for this problem is an unusually large amount of time for
          the toolkit to process a Docbook file. The process eventually
          finishes, but it takes for ever (in the order of minutes to process
          one or two files).
        </para>

        <para>
          The stylesheets in ADA import a set of default stylesheets to process
          most of the Docbook constructs. The location of these styleheets may
          vary from machine to machine. The way to solve this problem is using
          XML Catalogs. A catalog is a file specific for a single machine that
          specifies the location where certain files are installed. If this
          catalog is not properly deployed, <command moreinfo="none">xsltproc</command> (the
          XSLT processor used by ADA) obtaines them all from the web. The number
          of stylesheets is high and therefore, processing time goes through the
          roof.
        </para>

        <para>
          Te solution for this problem is to make sure the packages specified in
          <xref linend="howtoinstallcygwin"/> are properly installed.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="new_version_upgrade">
      <question>
        <para>
          A new version of ADA has been published, how do I upgrade?
        </para>
      </question>
      <answer>
        <para>
          ADA is distributed using the tool <command moreinfo="none">git</command> which keeps
          track of the files you already have and the changes that need to be
          applied to upgrade to the latest version. The upgrade process
          requires simply to open a shell window, go to the directory where
          ADA is installed and execute the command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git pull</command></programlisting>

        <para>
          The command will inform in some fairly cryptic way of the changes
          that are taking place. In principle, if the source files have not
          been modified, the change will go smoothly. If you have some
          personal modifications in the source files, you need first to tell
          <command moreinfo="none">git</command> to store those changes. You need to execute
          the command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git commit -a -m "Your message here"</command></programlisting>

        <para>
          Try again to execute <command moreinfo="none">git pull</command>. This time, the
          update process should go smoothly. There could be some conflicts
          when <command moreinfo="none">git</command> tries to merge these changes with the
          ones you introduced. If such situation happens, it is called a
          <quote>merge conflict</quote> and it needs to be solved manually by
          the user. If you touched the source code of ADA, then we assume that
          you know how to solve merge conflicts.
        </para>
      </answer>
    </qandaentry>
  </qandaset>
</section>






  <section id="Installing_ADA_in_Linux" xreflabel="Top of the Section">
  <title>Installing ADA in Linux</title>

  <qandaset>
    <qandaentry>
      <question>
        <para>Which packages are required to use ADA in Linux?</para>
      </question>
      <answer>
        <para>ADA uses primarily <ulink url="http://ant.apache.org">Ant</ulink>,
        and it is distributed using <command moreinfo="none">git</command>. The bare minimum
        required packages are: <command moreinfo="none">Ant</command> (including the
        <command moreinfo="none">ant-optional</command> package), a Java run-time environment
        (JRE) and <command moreinfo="none">git</command>.</para>

        <para>Additionally to these packages, the following list are highly
        recommended:</para>

        <itemizedlist>
          <listitem>
            <para><command moreinfo="none">bash</command>: The GNU Bourne Again Shell.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">coreutils</command>: GNU core utilities.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">docbook-xml</command>: Docbook XML DTDs.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">docbook-xsl</command>: XSL stylesheets to process
            DocBook.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">file</command>: Determine file types using the magic
            number.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">findutils</command>: Utilities for finding
            files.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">gawk</command>: A pattern scanning processing
            language.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">grep</command>: Search and print textual input for
            lines matching a specific pattern.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">libxslt</command>: The GNOME XSLT Library.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">xsltproc</command>: XSLT command line processor.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">libxml2</command>: XML C parser and toolkit.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">openssh-client</command>: SSH client program to
            connect to remote sites.</para>
          </listitem>
          <listitem>
            <para><command moreinfo="none">git</command>: Fast version control system used to
            download the latest ADA version.</para>
          </listitem>
        </itemizedlist>

        <para>But to fully exploit ADA functionality, there are additional tools
        that need to be installed. See <xref linkend="run_adacheck"/> for more
        details.</para>
      </answer>
    </qandaentry>

    <qandaentry>
      <question>
        <para>
          Once I installed all the required packages, How do I install
          ADA?
        </para>
      </question>
      <answer>
        <para>
          ADA is distributed using the <command moreinfo="none">git</command> version control
          tool. Open a terminal and type the command:
        </para>

        <programlisting id="git_install_command" format="linespecific">$ <command moreinfo="none">git clone http://flautin.it.uc3m.es/abel/ADA</command></programlisting>

        <para>
          A new directory with name <filename moreinfo="none">ADA</filename> will be
          created. In order to make ADA available, you need to include the
          path to its <filename moreinfo="none">bin</filename> directory as part of your
          <varname>PATH</varname> environment variable.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="no_catalogs">
      <question>
        <para>
          ADA takes a huge amount of time to process Docbook documents, why?
        </para>
      </question>

      <answer>
        <para>
          The symptoms for this problem is an unusually large amount of time for
          the toolkit to process a Docbook file. The process eventually
          finishes, but it takes for ever (in the order of minutes to process
          one or two files).
        </para>

        <para>
          The stylesheets in ADA import a set of default stylesheets to process
          most of the Docbook constructs. The location of these styleheets may
          vary from machine to machine. The way to solve this problem is using
          XML Catalogs. A catalog is a file specific for a single machine that
          specifies the location where certain files are installed. If this
          catalog is not properly deployed, <command moreinfo="none">xsltproc</command> (the
          XSLT processor used by ADA) obtaines them all from the web. The number
          of stylesheets is high and therefore, processing time goes through the
          roof.
        </para>

        <para>
          Te solution for this problem is to make sure the packages specified in
          <xref linend="howtoinstallcygwin"/> are properly installed.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="new_version_upgrade">
      <question>
        <para>
          A new version of ADA has been published, how do I upgrade?
        </para>
      </question>
      <answer>
        <para>
          ADA is distributed using the tool <command moreinfo="none">git</command> which keeps
          track of the files you already have and the changes that need to be
          applied to upgrade to the latest version. The upgrade process
          requires simply to open a shell window, go to the directory where
          ADA is installed and execute the command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git pull</command></programlisting>

        <para>
          The command will inform in some fairly cryptic way of the changes
          that are taking place. In principle, if the source files have not
          been modified, the change will go smoothly. If you have some
          personal modifications in the source files, you need first to tell
          <command moreinfo="none">git</command> to store those changes. You need to execute
          the command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git commit -a -m "Your message here"</command></programlisting>

        <para>
          Try again to execute <command moreinfo="none">git pull</command>. This time, the
          update process should go smoothly. There could be some conflicts
          when <command moreinfo="none">git</command> tries to merge these changes with the
          ones you introduced. If such situation happens, it is called a
          <quote>merge conflict</quote> and it needs to be solved manually by
          the user. If you touched the source code of ADA, then we assume that
          you know how to solve merge conflicts.
        </para>
      </answer>
    </qandaentry>

  </qandaset>
</section>







  <section id="Processing_resources_with_ADA" xreflabel="Top of the Section">
  <title>Processing resources with ADA</title>
  <qandaset>
    <qandaentry id="run_adacheck" xreflabel="Which resources are processed by ADA">
      <question>
        <para>What kind of resources can be processed by ADA?</para>
      </question>
      <answer>
        <para>ADA is a building tool, and to <quote>build</quote> a resource it
        needs some applications to be properly installed in your computer. To
        see what tools are managed by ADA and available, open a shell (a regular
        shell in Linux or a Cygwin shell in Windows) and type the
        command:</para>

        <programlisting format="linespecific">$ <command moreinfo="none">adacheck</command></programlisting>

        <para>ADA prints the value of some relevant variables followed by the
        list of the tools that are available. For example:</para>

        <programlisting format="linespecific">     [echo]
     [echo] Tool               | Installed |  Missing
     [echo] -------------------+-----------+-----------------------------
     [echo] Xfig               |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Inkscape           |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Gimp               |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Convert            |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Xsltproc           |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Latex              |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Dvips              |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Ps2pdf             |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Pdflatex           |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo] Dblatex            |     *     |
     [echo] -------------------+-----------+-----------------------------
     [echo]                    | * Only If |
     [echo] ppt2pdf            |OpenOffice |
     [echo]                    |2.4 or latr|
     [echo] -------------------+-----------+-----------------------------
     [echo] Pdfnup             |     *     |
     [echo] -------------------+-----------+-----------------------------

BUILD SUCCESSFUL
Total time: 1 second
</programlisting>

        <para>This listing shows the tools that ADA is capable of using. If you
        don't have all of them available, don't worry, ADA is capable of working
        with a subset of these tools (although your functionality will be
        reduced).</para>
      </answer>
    </qandaentry>

    <qandaentry id="how_to_run_ada" xreflabel="How to define which files to process">
      <question>
        <para>How to tell ADA which files should process and how?</para>
      </question>
      <answer>
        <para>ADA needs from the user the set of files to apply a set of
        pre-defined production rules.  This information should all be contained
        in a regular text file with name <filename moreinfo="none">Properties.txt</filename> in
        the same directory where your files are located. The format of this file
        is very simple: any line starting with the symbol <quote>#</quote> or
        empty is ignored. The rest of lines should have the structure
        <command moreinfo="none">name=value</command>. The names that can be used are
        pre-defined by ADA. The following sections of this document describe the
        available variables and explain the values that can be assigned.</para>

        <para>The following figure illustrates at a certain level of abstraction
        how ADA uses this file to process your files and produce the
        resources.</para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/Rules.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Rules used by ADA</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>An example of a <ulink url="Samples/SimpleDoc/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink> content is shown in the following figure:</para>

        <programlisting format="linespecific"># Definition to process the SVG files with inkscape
inkscape.files=*.svg

# Definition of the XML files to be processed by Xsltproc
xsltproc.files=index.xml

# Files to copy to another location when requested
export.files=*.png
</programlisting>

        <para>The first definition simply states that all files with the
        <filename moreinfo="none">*.svg</filename> extension should be processed by
        inkscape. The default behavior of this rule is to produce a file in PNG
        format. The second variable assignment states that the <ulink url="Samples/SimpleDoc/index.xml"><filename moreinfo="none">index.xml</filename>
        file</ulink> should be processed with the <command moreinfo="none">xsltproc</command>
        rule, which means that a default stylesheet is applied. Finally, the
        last assignment states that if this directory is required to
        <quote>produce</quote> resources from a different location, only the
        files with extension <filename moreinfo="none">*.png</filename> are to be copied to such
        remote location.</para>

        <para>All rules present in ADA have default values assigned with the
        most common behavior. This means that in most cases, by including a
        small set of definitions in the <filename moreinfo="none">Properties.txt</filename>
        file, ADA will perform the appropriate operations.</para>
      </answer>
    </qandaentry>

    <qandaentry id="adado" xreflabel="How to execute ADA">
      <question>
        <para>How to tell ADA to build all the resources?</para>
      </question>
      <answer>
        <para>Once the <filename moreinfo="none">Properties.txt</filename> file with the
        required assignments has been created, to apply these rules simply open
        a shell (regular shell in Unix or a Cygwin shell in Windows) and, in the
        correct directory type the following command:</para>

        <programlisting format="linespecific">$ <command moreinfo="none">adado</command></programlisting>

        <para>A few lines will then appear on the screen. ADA is writing the
        rules that is applying as well as the directories in which the
        processing is taking place. For example:</para>

        <programlisting format="linespecific">     [echo] BEGIN [path to your current dir]
     [echo] inkscape.processing         RUN
     [echo] xsltproc.processing.nopre   RUN
     [echo] END [path to your current dir]

BUILD SUCCESSFUL
Total time: 4 seconds</programlisting>

        <para>The previous execution shows the result of applying the <ulink url="Samples/SimpleDoc/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink> shown in the question on <xref linkend="run_adacheck"/>. Two rules are executed within the current
        directory.</para>

        <para>If an error appears while ADA executes the rules, the information
        about the anomaly is stored in the file <filename moreinfo="none">build.out</filename>
        and the first lines are shown on the screen:</para>

        <programlisting format="linespecific">     [echo] BEGIN /path to current dir]/SimpleDoc
     [echo] inkscape.processing         RUN
     [echo] xsltproc.processing.nopre   RUN

---------------------------------- ADA ERROR ----------------------------------

-- Full error information in file:
   ./build.out

                            ==== Error excerpt ====
/[path to a file]/index.xml:45: parser error : expected '&gt;'

^
unable to parse /[path to a file]/index.xml
                            =======================

-------------------------------------------------------------------------------</programlisting>
      </answer>
    </qandaentry>

    <qandaentry id="variable_catalog">
      <question>
        <para>Which variables can be used in the
        <filename moreinfo="none">Properties.txt</filename> file?</para>
      </question>

      <answer>
        <para>The complete collection of variables that can be included in a
        <filename moreinfo="none">Properties.txt</filename> file are contained in the <ulink url="Properties_sample.txt">sample of
        <filename moreinfo="none">Properties.txt</filename> file</ulink>. Remember, however,
        that only those variables that include a definition different from the
        default need to be included in that file.</para>
      </answer>
    </qandaentry>

      <qandaentry id="using_regexp_for_files">
        <question>
          <para>Can I specify a set of files using a regular expression in
          <filename moreinfo="none">Properties.txt</filename>?</para>
        </question>
        <answer>
          <para>Yes. ADA allows two regular expression patterns.</para>
          <itemizedlist>
            <listitem>
              <para><quote>*</quote> matches zero or more characters</para>
            </listitem>
            <listitem>
              <para><quote>?</quote> matches one character</para>
            </listitem>
          </itemizedlist>

          <para>For example, if you have several figures and each of them with a
          version with a suffix <command moreinfo="none">_en.svg</command> and a suffix
          <command moreinfo="none">_es.svg</command>), you may select all of them with the
          expression <command moreinfo="none">*_e?.xml</command>. These patterns may be used
          anywhere file lists are required unless otherwise noted. Regular
          expressions are not allowed when specifying sets of files to delete
          for security reasons.</para>

          <para>If you want this type of rule to be applied, not only to all the
          files matching this pattern in this directory, but to all directories,
          see <xref linkend="global_rule"/>.</para>
        </answer>
      </qandaentry>

      <qandaentry id="property_in_command_line" xreflabel="How to execute with                                                            one variable modified">
        <question>
          <para>Can I execute the <command moreinfo="none">adado</command> once but with one
          single variable modified from the definition in
          <filename moreinfo="none">Properties.txt</filename>?</para>
        </question>
        <answer>
          <para>Yes. In fact, you may include as many variable definitions in
          the command line as you see fit. They need to be provided with the
          following format:</para>

          <programlisting format="linespecific">-Dpropertyname=propertyvalue</programlisting>

          <para>If tye property value contains spaces, then the parameter needs
          to be given with the following syntax:</para>

          <programlisting format="linespecific">'-Dpropertyname="propertyvalue with spaces"'</programlisting>

          <para>Any argument written beyond <command moreinfo="none">adado</command> is directly
          passed to an invocation of Ant (the rule processing engine used by
          ADA). See the Ant manual for a detailed discussion of the available
          options.</para>
        </answer>
      </qandaentry>

      <qandaentry id="ada_course_home" xreflabel="How to re-use definitions across an entire project">
        <question>
          <para>Can I have definitions or use certain files that are used in
          different locations within a <quote>project</quote>?</para>
        </question>
        <answer>
          <para>Yes. Although there is no formal definition of
          <quote>project</quote> within ADA, it is very common to have files or
          definitions that apply to all files included in a set of
          directories. The way this is solved in ADA is by detecting a special
          directory in the hierarchy called the <emphasis>course home</emphasis>
          directory. The idea is for users to have multiple of these directories
          one for each large project of shared resources.</para>

          <para>ADA tries to provide the least invasive solution, so rather than
          requiring an extra definition with the location of this course home
          directory, it detects it automatically by searching for the file with
          name <filename moreinfo="none">AdaCourseParams.xml</filename> in up to ten levels of
          directories above the current one. If a file with this name is found,
          the variable <varname>ada.course.home</varname> is then assinged the
          directory where the file is located.</para>

          <para>For example, let us assume that your project contains some
          stylesheet to be used in multiple locations. You may give this file
          the name <filename moreinfo="none">AdaCourseParams.xml</filename> and place it at the
          highest level in your hierarchy of directories. From any directory you
          may refer to such file in the <filename moreinfo="none">Properties.txt</filename> file
          as shown in the following example.</para>

          <example>
            <title>Example of use of <varname>ada.course.home</varname></title>
            <programlisting format="linespecific">mergestyles.master.style=${ada.course.home}AdaCourseParams.xml
export.dst.dir=${ada.course.home}scratch</programlisting>
          </example>

          <para>The variable <varname>ada.course.home</varname> is used to
          access the common stylesheet as well as a prefix to a directory where
          to export resources.</para>

          <para>Variable <varname>ada.course.home</varname> is one of the global
          variables that ADA defines. The entire list is:</para>

          <informaltable frame="all" id="global_vars_table">
            <tgroup rowsep="1" colsep="1" cols="3">
              <colspec colnum="1" colname="col1" align="left"/>
              <colspec colnum="2" colname="col2" align="left"/>
              <colspec colnum="3" colname="col3" align="center"/>
              <thead>
                <row>
                  <entry align="center">Variable name</entry>
                  <entry align="center">Description</entry>
                  <entry align="center">Default</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry><varname>basedir</varname></entry>
                  <entry>The directory where the rules are being applied</entry>
                  <entry>Initially, current directory</entry>
                </row>
                <row>
                  <entry><varname>user.dir</varname></entry>
                  <entry>Directory from where ADA has been invoked</entry>
                  <entry>Current directory</entry>
                </row>
                <row>
                  <entry><varname>user.home</varname></entry>
                  <entry>Home directory for the user</entry>
                  <entry>System dependent</entry>
                </row>
                <row>
                  <entry><varname>ada.home</varname></entry>
                  <entry>Directory where ADA is installed</entry>
                  <entry>System dependent</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable>

          <para>If what you want is not a variable definition valid for an
          entire project, but a variable for all the projects, check <xref linkend="global_rule"/>.</para>
        </answer>
      </qandaentry>

    <qandaentry id="global_rule" xreflabel="How to make a variable declaration valid for all projects">
      <question>
        <para>Can I have a variable declaration for all the projects?</para>

        <para>The file <filename moreinfo="none">Properties.txt</filename> contains variable
        assignments only valid for the current directory. Is it possible to
        define a variable such that the definition is used in all the
        directories of all the projects processed by ADA?</para>
      </question>
      <answer>
        <para>Yes. You may have this type of assignments in two additional files
        that are read by ADA:</para>

        <itemizedlist>
          <listitem>
            <para>The file with name <filename moreinfo="none">Ada.properties</filename> if
            present in the ADA Course Home directory (see <xref linkend="ada_course_home"/> to know where is this directory.)</para>
          </listitem>
          <listitem>
            <para>The <filename moreinfo="none">.ant.properties</filename> file if present in
            your home directory (see <xref linkend="run_adacheck"/> to find out
            where Ant assumes where is this directory.)</para>
          </listitem>
        </itemizedlist>

        <para>The order in which these files are processed is:
        <filename moreinfo="none">Ada.properties</filename>,
        <filename moreinfo="none">Properties.txt</filename>, and
        <filename moreinfo="none">.ant.properties</filename>. If a variable is defined in more
        than one file, only the <emphasis>first definition</emphasis> is taken
        into account. As a consequence, you may have general definitions in the
        <filename moreinfo="none">.ant.properties</filename> of your home directory that may be
        overwritten by definitions in the <filename moreinfo="none">Properties.txt</filename>
        file in the local directory, and these can be overwritten by the
        <filename moreinfo="none">Ada.properties</filename> file in the project home. The
        following figure shows the effect of reading these files in this
        order:</para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/GlobalRule.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Definition file processing</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>The value of <varname>Var1</varname> is taken from the
        <filename moreinfo="none">Ada.properties</filename> file, <varname>Var2</varname> is
        taken from the <filename moreinfo="none">Properties.txt</filename> file, and
        <varname>Var3</varname> is taken from the
        <filename moreinfo="none">.ant.properties</filename> file in the user home
        directory.</para>
      </answer>
    </qandaentry>


  </qandaset>
</section>






  <section id="Applying_XSLT" xreflabel="Top of the Section">
  <title>Applying a XSL Style Sheet to a XML file</title>

  <qandaset>
    <qandaentry id="apply_xsl" xreflabel="How to apply a XSL stylesheet">
      <question>
        <para>How to apply a stylesheet to a XML file?</para>
      </question>
      <answer>

        <para>The rule to apply a stylesheel to a XML file requires only to
        define the source file. ADA has a default stylesheet that is applied to
        a XML file if none is defined and is based in Docbook (see <xref linkend="docbook_processing"/> for more details).</para>

        <para>The following variables can be defined to apply a XSL stylesheet
        to one or several XML files:</para>

        <informaltable frame="all" id="xsltproc_vars" xml:base="VarTables/Xsltproc_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>xsltproc.exec</varname>
        </entry>
        <entry>Name of the XSLT processor executable</entry>
        <entry>xsltproc</entry>
      </row>
      <row>
        <entry>
          <varname>xsltproc.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>xsltproc.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>xsltproc.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>xsltproc.style.file</varname>
        </entry>
        <entry>Full path to the stylesheet file</entry>
        <entry>${ada.home}/ADA_Styles/DocbookProfile.xsl</entry>
      </row>
      <row>
        <entry>
          <varname>xsltproc.output.format</varname>
        </entry>
        <entry>Output file has the same name as the source but the extension is replaced
by this value</entry>
        <entry>.html</entry>
      </row>
      <row>
        <entry>
          <varname>xsltproc.extra.args</varname>
        </entry>
        <entry>Extra arguments to pass to the XSLT processor</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>xsltproc.files</varname>
        </entry>
        <entry>Source file names (no path, it is xsltproc.src.dir)</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>xsltproc.multilingual.files</varname>
        </entry>
        <entry>Source file names (no path) to process in multilingual mode</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>mergestyles.master.style</varname>
        </entry>
        <entry>An additional stylesheet to combine with xsltproc.style.file</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>xsltproc.profile.lang</varname>
        </entry>
        <entry>Defaul language to consider when processing documents</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>The variables that need to be defined to activate this rule are
        either <varname>xsltproc.files</varname> or
        <varname>xsltproc.multilingual.files</varname>. The variable
        <varname>mergestyles.master.style</varname> is used primarily to merge
        an external stylesheet with the given one and apply both of them (see
        <xref linken="modified_stylesheet"/>).</para>

        <para>For example, let us consider <ulink url="Samples/ApplyXSL/index.xml">a simple XML file</ulink> that needs to
        be processed by the stylesheet <filename moreinfo="none">Dump.xsl</filename> (included
        in the styles directory in ADA). The output of this processing should be
        left in a files with the same name but with the suffix
        <filename moreinfo="none">_Cump.xml</filename>. The variable definitions required in the
        <ulink url="Samples/ApplyXSL/Properties.txt"><filename moreinfo="none">Properties.txt</filename></ulink>
        file are:</para>

        <programlisting format="linespecific">
# Definition of the XML files to be processed by Xsltproc
xsltproc.files=index.xml
xsltproc.style.file=${ada.home}/ADA_Styles/Dump.xsl
xsltproc.output.format=_Dump.xml
</programlisting>

        <para>Note the use of the global variable <varname>ada.home</varname> to
        refer to a style included with ADA (see <xref linkend="ada_course_home"/> for more details).</para>
      </answer>
    </qandaentry>

    <qandaentry id="docbook_processing" xreflabel="How to translate Docbook to HTML">
      <question>
        <para>How to translate Docbook files to HTML?</para>
      </question>
      <answer>
        <para>Open your favorite XML editor, create a Docbook file and save
        it. If you want to apply the Docbook XSL Stylesheet to translate the
        file to HTML you just need to define the variable
        <varname>xsltproc.files</varname>, because the default style applied by
        this rule translates the file to HTML.</para>

        <para>For example, consider <ulink url="Samples/Docbook/TextBookSelect.xml">the Docbook document with name
        <filename moreinfo="none">TectBookSelect.xml</filename></ulink>. To obtain the
        corresponding HTML file, the content of the <ulink url="Samples/Docbook/Properties.txt"><filename moreinfo="none">Properties.txt</filename></ulink>
        is:</para>

        <programlisting format="linespecific">xsltproc.files=TextBookSelect.xml
</programlisting>
      </answer>
    </qandaentry>

    <qandaentry id="docbook_to_pdf">
      <question>
        <para>How to translate Docbook files to PDF?</para>
      </question>

      <answer>
        <para>Although in theory there is a workflow to translate Dobook files
        to PDF using the FO format, the approach used in ADA relies on the
        <code>dblatex</code> program. This tool takes a Docbook file, translates
        it to LaTeX and generates a PDF file from it. The rule needs this
        executable to be properly installed in the system. The variables to use
        in the <filename moreinfo="none">Properties.txt</filename> file are:</para>

        <informaltable frame="all" id="dblatex_vars" xml:base="VarTables/Dblatex_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>dblatex.exec</varname>
        </entry>
        <entry>Name of the Docbook to PDF processor executable</entry>
        <entry>dblatex</entry>
      </row>
      <row>
        <entry>
          <varname>dblatex.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>dblatex.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>dblatex.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>dblatex.files</varname>
        </entry>
        <entry>Source file names (no path, it is dblatex.src.dir)</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>dblatex.extra.args</varname>
        </entry>
        <entry>Extra arguments to pass to the LaTeX processor</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>dblatex.compliant.mode</varname>
        </entry>
        <entry>If true, default dblatex behavior,
otherwise ada-flavored behavior (supress version page)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example, given a <ulink url="Samples/Dblatex/TextBookSelect.xml">Docbook file</ulink>, a PDF
        file is obtained with the following definitions in the <ulink url="Samples/Dblatex/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink>:</para>

        <programlisting format="linespecific">dblatex.files=TextBookSelect.xml
dblatex.compliant.mode=false
</programlisting>

      </answer>
    </qandaentry>

    <qandaentry id="modified_stylesheet" xreflabel="How to use a slightly modified stylesheet">
      <question>
        <para>How can I use a slightly modified generic stylesheet?</para>

        <para>There are multiple stylesheets with numerous parameters, but I
        simply want to modified some of them. I cannot touch the original
        document because it's being shared by a pool of authors.</para>

        <para>How can I still re-use most of the definitions and override some
        of them?</para>
      </question>
      <answer>
        <para>ADA offers this possibility by taking all your personal
        definitions in an extra XML file and merging it with a conventional
        style. This file is defined in the variable
        <varname>mergestyles.master.style</varname>.</para>

        <para>Suppose you want to use the style file in
        <filename moreinfo="none">${ada.home}/ADA_Styles/HeadTail.xsl</filename> to generate an
        HTML page. To reuse those definitions and override some of them, create
        a local stylesheet (for example, a file with name
        <filename moreinfo="none">MyPersonalValues.xml</filename>) containing
        <emphasis>only</emphasis> the definitions you want to override. Assign
        in <filename moreinfo="none">Properties.txt</filename> the value
        <filename moreinfo="none">MyPersonalValues.xml</filename> to the variable
        <varname>mergestyles.master.style</varname> and use the style sheet
        <filename moreinfo="none">${ada.home}/ADA_Styles/HeadTail.xsl</filename> by assigning its
        value to <varname>xsltproc.style.file</varname> as shown in the
        following example:</para>

        <programlisting format="linespecific">mergestyles.master.style=MyPersonalValues.xml

xsltproc.style.file=${ada.home}/ADA_Styles/HeadTail.xsl
xsltproc.files=index.xml</programlisting>

        <para>The previous definitions instruct ADA to apply to the file
        <filename moreinfo="none">index.xml</filename> the style sheet resulting from combining
        <filename moreinfo="none">${ada.home}/ADA_Styles/HeadTail.xsl</filename> with the file
        <filename moreinfo="none">MyPersonalValues.xml</filename> containing your
        modifications.</para>

        <para>The resulting applied style sheet is a file left in the current
        directory with name
        <filename moreinfo="none">MyPersonalValues_HeadTail.xsl</filename>.</para>
      </answer>
    </qandaentry>
  </qandaset>
</section>






  <section id="Style_HeadTail" xreflabel="Top of the Section">
  <title>Pre-defined styles and parameters for HTML documents</title>


  <qandaset>
    <qandaentry id="general_params">
      <question>
        <para>Which general style variables are defined by ADA?</para>
      </question>
      <answer>

        <para>Ada keeps some definitions that are used in multiple locations in
        the built-in style sheets. The purpose of these definitions are to be
        overwritten by definitions that apply to each project in particular (see
        <xref linkend="modified_stylesheet"/> for details.</para>

        <informaltable frame="all" id="_vars" xml:base="ParamTables/GeneralParams_description.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>ada.publish.host</varname>
        </entry>
        <entry>Host where the material is published</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.publish.dir</varname>
        </entry>
        <entry>Directory in ada.publish.host where the material is published</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.institution.name</varname>
        </entry>
        <entry>Your institution name</entry>
        <entry>Your institution name</entry>
      </row>
      <row>
        <entry>
          <varname>ada.course.home.url</varname>
        </entry>
        <entry>URL pointing to the course</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.course.icon</varname>
        </entry>
        <entry>Image representing the course icon (typically 16x16)</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.course.icon.type</varname>
        </entry>
        <entry>mime-type of the previous file</entry>
        <entry>'image/x-icon'</entry>
      </row>
      <row>
        <entry>
          <varname>ada.course.degree</varname>
        </entry>
        <entry>Degree to which this course belongs</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.course.edition</varname>
        </entry>
        <entry>Something such as Fall 20?? or Spring 20??</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.course.image</varname>
        </entry>
        <entry>URL pointing to a larger image of the course</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.course.name</varname>
        </entry>
        <entry>Course name</entry>
        <entry>ada.course.name</entry>
      </row>
      <row>
        <entry>
          <varname>ada.course.short.edition</varname>
        </entry>
        <entry>Abbreviation of the course edition (e.g Fall??)</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.course.short.name</varname>
        </entry>
        <entry>Abbreviation of the course name (e.g. CS4703)</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.course.year</varname>
        </entry>
        <entry>Year where the course is taking place</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>The recommendation is to include these and other style parameters
        with the appropriate values in a common file, name it
        <filename moreinfo="none">AdaCourseParams.xml</filename> and place it at the top of your
        project to notify ADA the location of the
        <varname>ada.course.home</varname> (see <xref linkend="ada_course_home"/>). The stylesheets include the default values
        of these parameters, therefore, only those with values different from
        the default need to be included in the file.</para>
      </answer>
    </qandaentry>

    <qandaentry id="headtail_pararms">
      <question>
        <para>How can I use the default ADA style to insert a Header and a Tail
        in a HTML file?</para>
      </question>

      <answer>
        <para>The stylesheel with name <filename moreinfo="none">HeadTail.xsl</filename> allows
        the customazation of a HTML document by defining the following
        parameters:</para>

        <informaltable frame="all" id="_vars" xml:base="ParamTables/HeadTailParams_description.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>ada.page.author</varname>
        </entry>
        <entry>Author to include in the meta element in HTML head</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.cssstyle.url</varname>
        </entry>
        <entry>URL pointing to a CSS file to include in the HTML head</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.google.analytics.account</varname>
        </entry>
        <entry>Account to include in the Google Analytics HTML snippet.</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.google.gadget.url</varname>
        </entry>
        <entry>Link pointing to a Google Gadget to be included in the upper                  left corner of the page</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.bigtitle</varname>
        </entry>
        <entry>yes/no to enable a big title on top of the page</entry>
        <entry>no</entry>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.center.bottom</varname>
        </entry>
        <entry>Text to insert at the bottom row of the Header table</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.center.top.logo</varname>
        </entry>
        <entry>URL to the image to show in the top center of the table                  header</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.center.top.logo.alt</varname>
        </entry>
        <entry>Alt attribute for the previous image</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.center.top.logo.url</varname>
        </entry>
        <entry>URL to make the image a link</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.left.logo</varname>
        </entry>
        <entry>URL to the image to show in the left side of the table header</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.left.logo.alt</varname>
        </entry>
        <entry>Alt attribute for the previous image</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.left.logo.url</varname>
        </entry>
        <entry>URL to make the image a link</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.right.logo</varname>
        </entry>
        <entry>URL to the image to show in the right side of the table header</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.right.logo.alt</varname>
        </entry>
        <entry>Alt attribute for the previous image</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.head.right.logo.url</varname>
        </entry>
        <entry>URL to make the image a link</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.refresh.rate</varname>
        </entry>
        <entry>Include a refresh rate in the page header</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.license</varname>
        </entry>
        <entry>Yes/no to include license information at the bottom of the                  page</entry>
        <entry>no</entry>
      </row>
      <row>
        <entry>
          <varname>ada.page.license.name</varname>
        </entry>
        <entry>Name of the license</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.license.logo</varname>
        </entry>
        <entry>URL to an image to accompany the license information</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.license.alt</varname>
        </entry>
        <entry>Alt attribute for the previous image</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.license.url</varname>
        </entry>
        <entry>URL to point when clicking in the license image</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>ada.page.show.lastmodified</varname>
        </entry>
        <entry>yes/no controlling if the last modified info is shown at                  bottom</entry>
        <entry>no</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>


        <para>Through <ulink url="Samples/HeadTail/Params.xml">the definition of
        some or all of these variables</ulink>, the obtained HTML document has
        the structure shown in the following figure:</para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="Samples/HeadTail/HeadTailExplain.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Effect of the HeadTail style sheet</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>
      </answer>
    </qandaentry>

    <qandaentry>
      <question>
        <para>How to insert some extra links at the top of the page?</para>
      </question>
      <answer>
        <para>ADA allows to include a set of links at the header of a
        document. There are two ways to define these links:</para>

        <orderedlist numeration="loweralpha" inheritnum="ignore" continuation="restarts">
          <listitem>
            <para>By assignining the style parameter
            <varname>ada.page.header.links</varname> the Docbook snippet to insert
            in the header.</para>
          </listitem>
          <listitem>
            <para>By including in the Docbook document a <code>note</code>
            element with the attribute <code>condition</code> equal to
            <code>AdminInfo</code> and a <code>para</code> element with the
            <code>condition</code> attribute equal to
            <code>ada.page.header.links</code> containing
            the Docbook snippet to process.
            </para>
          </listitem>
        </orderedlist>

        <para>For example, by creating <ulink url="Samples/HeaderLinks/Style.xsl">a simple style sheet including
        <filename moreinfo="none">HeaderLinks.xsl</filename></ulink> and <ulink url="Samples/HeaderLinks/index.xml">a Docbook file with the element
        <code>&lt;note condition="AdminInfo"&gt;</code></ulink>, and the <ulink url="Samples/HeaderLinks/Properties.txt"><filename moreinfo="none">Properties.txt</filename></ulink>
        file with the proper definitions, <ulink url="Samples/HeaderLinks/index.html">the resulting document</ulink> has
        in its header the given link.</para>
      </answer>
    </qandaentry>
  </qandaset>
</section>






  <section id="Image_Creation" xreflabel="Top of the Section">
  <title>Creating and processing Images</title>



  <qandaset>
    <qandaentry id="process_xfig">
      <question>
        <para>How to process a figure with Xfig?</para>
      </question>
      <answer>
        <para>Open Xfig and create a figure. Save it in Xfig format. Suppose
        that the figure needs to be translated to PNG format. Open the file
        <filename moreinfo="none">Properties.txt</filename> (if not created, see <xref linkend="how_to_run_ada"/>) and set the following variables to suit your
        needs:</para>

        <informaltable frame="all" id="xfig_vars" xml:base="VarTables/Xfig_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>xfig.exec</varname>
        </entry>
        <entry>Name of the executable to transform *.xfig files</entry>
        <entry>fig2dev</entry>
      </row>
      <row>
        <entry>
          <varname>xfig.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>xfig.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>xfig.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>xfig.output.format</varname>
        </entry>
        <entry>Format of the output file (see fig2dev for options)</entry>
        <entry>png</entry>
      </row>
      <row>
        <entry>
          <varname>xfig.border</varname>
        </entry>
        <entry>Border to insert around image</entry>
        <entry>2</entry>
      </row>
      <row>
        <entry>
          <varname>xfig.smooth</varname>
        </entry>
        <entry>Smooth factor when exporting to bitmat format</entry>
        <entry>4</entry>
      </row>
      <row>
        <entry>
          <varname>xfig.extra.args</varname>
        </entry>
        <entry>Extra arguments to pass to fig2dev</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>xfig.files</varname>
        </entry>
        <entry>Source file names (no path, it is xfig.src.dir)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example. If the figures with names <ulink url="Samples/Xfig/modules.fig"><filename moreinfo="none">modules.fig</filename></ulink>
        and <ulink url="Samples/Xfig/structure.fig"><filename moreinfo="none">structure.fig</filename></ulink>
        are stored in the current directory and versions in PNG format are
        needed, the following assignment is required in the file <ulink url="Samples/Xfig/Properties.txt"><filename moreinfo="none">Properties.txt</filename></ulink>.</para>

        <programlisting format="linespecific">xfig.files=module.fig structure.fig
</programlisting>

        <para>Execute ADA to obtain the processed figures (see <xref linkend="adado"/>).</para>
      </answer>
    </qandaentry>

    <qandaentry id="inkscape_processing" xreflabel="How to process a figure with Inkscape">
      <question>
        <para>How to process a figure with Inkscape?</para>
      </question>
      <answer>
        <para>Open Inkscape and create a figure. Save it in SVG format. Suppose
        that this figure needs to be translated to PNG format. Open the file
        <filename moreinfo="none">Properties.txt</filename> (if not created, see <xref linkend="how_to_run_ada"/>) and set the approriate value for some of the
        following variables:</para>

        <informaltable frame="all" id="inkscape_vars" xml:base="VarTables/Inkscape_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>inkscape.exec</varname>
        </entry>
        <entry>Name of the inkscape executable</entry>
        <entry>inkscape</entry>
      </row>
      <row>
        <entry>
          <varname>inkscape.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>inkscape.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>inkscape.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>inkscape.output.format</varname>
        </entry>
        <entry>Comma separated list of formats to produce (e.g.: png,eps,ps,pdf).
No whitespaces should appear in the middle.</entry>
        <entry>png</entry>
      </row>
      <row>
        <entry>
          <varname>inkscape.files</varname>
        </entry>
        <entry>Source file names (no path, it is inkscape.src.dir)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example. If the figures with names <ulink url="Samples/Inkscape/chart.svg"><filename moreinfo="none">chart.svg</filename></ulink>
        and <ulink url="Samples/Inkscape/kanjidic.svg"><filename moreinfo="none">kanjidic.svg</filename></ulink>
        are stored in the current directory and versions in png format are
        needed, the following assignment is required in the file
        <ulink url="Samples/Inkscape/Properties.txt"><filename moreinfo="none">Properties.txt</filename></ulink>.</para>

        <programlisting format="linespecific">inkscape.files=chart.svg kanjidic.svg
</programlisting>

        <para>With such values defined, execute ADA to obtain the processed
        figures (see <xref linkend="adado"/>).</para>
      </answer>
    </qandaentry>

      <qandaentry id="multiple_image_format" xreflabel="How to use alternative image formats in Docbook">
        <question>
          <para>How do I select the appropriate image format for Docbook?</para>
        </question>
        <answer>
          <para>Vector graphics (like SVG, Postscript, PDF, etc.) are usually
          preferred for graphics drawn with computer programs, because they
          maintain quality when they have to be scaled. Fonts and lines are
          smooth even when they are scaled to high resolutions, e.g. for
          printing.</para>

          <para>However, the only image formats that are guaranteed to be shown
          on any browser are bitmap-based (JPEG, GIF and PNG).  HTML documents
          should include only images in those formats to maintain
          compatibility.</para>

          <para>Because sometimes it is interesting to generate both an HTML and
          a PDF version of a document, produced from the same Docbook sources,
          Docbook allows the author to select different image formats for HTML
          and PDF.  For computer-drawn illustrations, the PNG format is
          preferred for HTML documents, whereas PDF format is preferred for PDF
          output (because Ada uses internally <emphasis>dblatex</emphasis> and
          <emphasis>pdflatex</emphasis> for producing PDF documents from Docbook
          sources).</para>

          <para>The following example shows how an author can specify
          alternative image formats:</para>

          <programlisting format="linespecific">&lt;mediaobject&gt;
  &lt;imageobject role="html"&gt;
    &lt;imagedata fileref="drawing.png" format="PNG"/&gt;
  &lt;/imageobject&gt;
  &lt;imageobject role="dblatex"&gt;
    &lt;imagedata fileref="drawing.pdf" format="PDF"/&gt;
  &lt;/imageobject&gt;
  &lt;textobject&gt;
    &lt;phrase&gt;Example drawing&lt;/phrase&gt;
  &lt;/textobject&gt;
&lt;/mediaobject&gt;</programlisting>

          <para>If the drawing is in SVG format, both the PNG and PDF versions
          can be obtained with the <emphasis>Inkscape</emphasis> rule (see <xref linkend="inkscape_processing"/>).  The following lines in
          <code>Properties.txt</code> do that:</para>

          <programlisting format="linespecific">inkscape.files=*.svg
inkscape.output.format= pdf,png</programlisting>

          <para>Back to <xref linkend="Processing_resources_with_ADA"/>.</para>
        </answer>
      </qandaentry>


  </qandaset>
</section>






  <section id="Style_FlashSWF" xreflabel="Top of the Section">
  <title>Including a Flash Movies or Shockwave files</title>



  <qandaset>
    <qandaentry id="include_flash_video_in_docbook" xreflabel="How to include Flash Video in Docbook">
      <question>
        <para>How to include a flash video in a Docbook document?</para>
      </question>
      <answer>
        <para>Embedding a flash video in an HTML page can be done with flash
        players that are downloaded by the browser and offer functionality
        such as a start, stop and pause buttons, volume control, etc. ADA uses
        the player available in <ulink url="http://www.jeroenwijering.com/">www.jeroenwijering.com</ulink>.</para>

        <para>From the point of view of the author, these details should be
        hidden, and worry only about the basic data such as the video file,
        height and width of the screen and that's it.</para>

        <para>The stylesheets included in ADA to process Docbook allow you to
        include a video player embedded in your page simply by providing a
        special markup using the <command moreinfo="none">&lt;para&gt;</command> element. The
        following example shows the structure of this element:</para>

        <programlisting format="linespecific">&lt;para id="video_1" condition="ada.flv.player"&gt;
  &lt;phrase condition="width"&gt;320&lt;/phrase&gt;
  &lt;phrase condition="height"&gt;200&lt;/phrase&gt;
  &lt;phrase condition="file"&gt;player.flv&lt;/phrase&gt;
  &lt;phrase condition="image"&gt;playerthumb.jpg&lt;/phrase&gt;
  &lt;phrase condition="showstop"&gt;true&lt;/phrase&gt;
&lt;/para&gt;</programlisting>

        <para>In order to maintain the Docbook file valid, the parameters are
        passed as nested <command moreinfo="none">&lt;code&gt;</command> elements with the
        attribute <command moreinfo="none">condition</command> equal to the name of the
        parameter. The available names are:</para>

        <informaltable frame="all" id="embed_flv_vars">
          <tgroup rowsep="1" colsep="1" cols="3">
            <colspec colnum="1" colname="col1" align="left"/>
            <colspec colnum="2" colname="col2" align="left"/>
            <colspec colnum="3" colname="col3" align="center"/>
            <thead>
              <row>
                <entry align="center">Variable name</entry>
                <entry align="center">Description</entry>
                <entry align="center">Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>backcolor</entry>
                <entry>Background color for the controls.</entry>
                <entry>0xFFFFFF</entry>
              </row>
              <row>
                <entry>file</entry>
                <entry>URL pointing at the video file to play</entry>
                <entry/>
              </row>
              <row>
                <entry>frontcolor</entry>
                <entry>Text and buttons color</entry>
                <entry>0x000000</entry>
              </row>
              <row>
                <entry>height</entry>
                <entry>Height of the viewing area</entry>
                <entry>320</entry>
              </row>
              <row>
                <entry>id</entry>
                <entry>Id of the viewing area</entry>
                <entry/>
              </row>
              <row>
                <entry>image</entry>
                <entry>
                  Thumbnail image to place on the screen when the video is not
                  being played.
                </entry>
                <entry/>
              </row>
              <row>
                <entry>lightcolor</entry>
                <entry>Rollover colors for the controls.</entry>
                <entry>0x000000</entry>
              </row>
              <row>
                <entry>screencolor</entry>
                <entry>Control of the viewing area</entry>
                <entry>0x000000</entry>
              </row>
              <row>
                <entry>showstop</entry>
                <entry>Boolean controlling if the stop button is shown</entry>
                <entry>false</entry>
              </row>
              <row>
                <entry>width</entry>
                <entry>Width of the viewing area</entry>
                <entry>260</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </answer>
    </qandaentry>

    <qandaentry id="include_shockwave_video_in_docbook">
      <question>
        <para>How to include a Shockwave Flash (swf) document in a Docbook
        document?</para>
      </question>
      <answer>
        <para>Embedding a Shockwave file in an HTML page can be done by
        including a special paragraph in Docbook with the values for certain
        parameters. A special stylesheet in ADA will then produce the proper
        element in HTML to view the Shockwave file. The idea is similar to
        <xref linkend="include_flash_video_in_docbook"/> but requires less
        information.</para>

        <para>The special markup in docbook to include a a showkwave is shown
        in the following example:</para>

        <example>
          <title>Markup to include a Shockwave file in Docbook</title>
          <programlisting format="linespecific">&lt;para condition="ada.swf.player"&gt;
  &lt;phrase condition="width"&gt;425&lt;/phrase&gt;
  &lt;phrase condition="height"&gt;355&lt;/phrase&gt;
  &lt;phrase condition="file"&gt;File.swf&lt;/phrase&gt;
  Additonal text and &lt;ulink url="link.html"&gt;links&lt;/ulink&gt; you might include.
&lt;/para&gt;</programlisting>
        </example>

        <para>In order to maintain the Docbook file valid, the parameters are
        passed as nested <code>&lt;phrase&gt;</code> elements with the
        attribute <code>condition</code> equal to the name of the
        parameter. The available names are:</para>

        <informaltable frame="all" id="embed_swf_vars">
          <tgroup rowsep="1" colsep="1" cols="3">
            <colspec colnum="1" colname="col1" align="left"/>
            <colspec colnum="2" colname="col2" align="left"/>
            <colspec colnum="3" colname="col3" align="center"/>
            <thead>
              <row>
                <entry align="center">Variable name</entry>
                <entry align="center">Description</entry>
                <entry align="center">Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>file</entry>
                <entry>URL pointing at the shockwave file to use</entry>
                <entry/>
              </row>
              <row>
                <entry>height</entry>
                <entry>Height of the viewing area</entry>
                <entry>320</entry>
              </row>
              <row>
                <entry>id</entry>
                <entry>Id of the viewing area (optional)</entry>
                <entry/>
              </row>
              <row>
                <entry>width</entry>
                <entry>Width of the viewing area</entry>
                <entry>260</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </answer>
    </qandaentry>
  </qandaset>
</section>






  <section id="Processing_multilingual">
  <title>Creating and processing multingual Docbook files</title>

  <qandaset>
    <qandaentry id="multilingual">
      <question>
        <para>How to process multilingual Docbook files?</para>
      </question>
      <answer>
        <para>The Docbook tool chain offers a powerful functionality called
        <emphasis>profiling</emphasis> or <emphasis>conditional text</emphasis>
        (search for <quote>Docbook profiling</quote> for more detailed
        information). Each Docbook element may include a fixed set of attributes
        that are used to select or ignore portions of a document. The exact
        definition of profiling with a generic attribute <command moreinfo="none">attr</command>
        is:</para>


        <informaltable frame="all" id="profile_definition">
          <tgroup rowsep="1" colsep="1" cols="1">
            <colspec colnum="1" colname="col1" align="left"/>
            <tbody>
              <row>
                <entry>
                  <para>If a document contains elements with an attribute with
                  name <command moreinfo="none">attr</command> with value
                  <command moreinfo="none">val</command>, and the XSLT processor is given the
                  option <command moreinfo="none">profile.attr</command> with value
                  <command moreinfo="none">val</command>, then all elements that have the
                  attribute <command moreinfo="none">attr</command> with a value not
                  containing <command moreinfo="none">val</command> are suppressed as if they
                  were not part of the document. To apply a concrete profiling
                  attribute you need to replace <command moreinfo="none">attr</command> by the
                  name of your attribute and <command moreinfo="none">val</command> by the
                  proper value.</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>The list of attributes which can be used for profiling is fixed by
        the Docbook stylesheets (there are actually more than 10). One of these
        attributes is <code>lang</code> and therefore, it may be used to handle
        documents written in more than one langugage. Each element containing
        text in a language is marked with the appropritate value of the
        <code>lang</code> attribute. If an element is common to both languages,
        it should contain no <code>lang</code> attribute. A possible strategy is
        then to label each paragraph with the attribute <command moreinfo="none">lang</command>
        and the appropriate language. Currently, the supported languages are
        English (<code>lang</code> attribute with value <quote>en</quote>) and
        Spanish (<code>lang</code> attribute with value
        <quote>es</quote>).</para>


        <para>For each language supported by ADA, the produced file names are
        created by appending a suffix with an underscore followed by the
        abbreviated language name in lower case (i.e. <quote>_en</quote> for the
        English version and <quote>_es</quote> for the Spanish version.</para>

        <para>The placement of the <command moreinfo="none">lang</command> attribute can be
        chosen as to minimize the number of duplicated elements and maintain the
        document valid. The following example shows a snippet of bilingual
        (English/Spanish) Docbook with a figure that needs also to be
        distinguished.</para>

        <programlisting format="linespecific">    &lt;para lang="es"&gt;
    La estructura de esta tabla se puede ver en la siguiente figura:&lt;/para&gt;

  &lt;para lang="en"&gt;
    The structure of this table can be seen in the following figure:&lt;/para&gt;

  &lt;informalfigure id="reversetable_fig_pagetable"&gt;
    &lt;mediaobject&gt;
      &lt;imageobject lang="es"&gt;
        &lt;imagedata align="center" fileref="tablestruct_es.png" format="PNG" /&gt;
      &lt;/imageobject&gt;
      &lt;imageobject lang="en"&gt;
        &lt;imagedata align="center" fileref="tablestruct_en.png" format="PNG" /&gt;
      &lt;/imageobject&gt;
    &lt;/mediaobject&gt;
  &lt;/informalfigure&gt;</programlisting>

        <para>Note that the location of the <command moreinfo="none">lang</command> attribute is
        as deep in the document structure as possible to increase the number of
        common elements and at the same time maintaining the validity of the
        document. More precisely, checking the Docbook manual, a
        <command moreinfo="none">mediaobject</command> element accepts multiple
        <command moreinfo="none">imageobject</command> elements inside. But this one does not
        accept multiple <command moreinfo="none">imagedata</command> elements. As a conclusion,
        the multiple language versions can be easily accomodated by including an
        <code>imagobject</code> element per language.</para>

        <para>ADA contains rules to do process a Docbook file containing
        elements in various languages (currently English and Spanish), and
        generate two separated files.</para>

        <para>The variable <varname>xsltproc.multilingual.files</varname> of the
        rule to apply a XSL stylesheet must contain the file names to be process
        in multilingual mode (see <xref linkend="apply_xsl"/> for more
        details).</para>

        <para>For example, the following <ulink url="Samples/Multilingual/index.xml">Docbook file</ulink> uses the
        <code>lang</code> attribute:</para>

        <programlisting format="linespecific">&lt;?xml version="1.0" encoding="UTF-8"?&gt;

&lt;!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"&gt;

&lt;section&gt;
  &lt;title&gt;
    &lt;phrase lang="es"&gt;T√≠tulo de este documento&lt;/phrase&gt;
    &lt;phrase lang="en"&gt;Title for this document&lt;/phrase&gt;
  &lt;/title&gt;

  &lt;para lang="es"&gt;El t√≠tulo de este documento debe incluir dos elementos
  &lt;code&gt;phrase&lt;/code&gt; uno con cada valor del atributo &lt;code&gt;lang&lt;/code&gt; porque
  un documento no admite dos t√≠tulos. La multiplicidad de lenguajes, por tanto,
  se acomoda dentro de &lt;code&gt;title&lt;/code&gt; mediante el uso del elemento
  &lt;code&gt;phrase&lt;/code&gt; que no tiene efecto en como se visualiza el texto.&lt;/para&gt;

  &lt;para lang="en"&gt;The document title must include two &lt;code&gt;phrase&lt;/code&gt;
  elements with the title in each language and the appropriate value of the
  &lt;code&gt;lang&lt;/code&gt; attribute because a Docbook section does not admit two
  &lt;code&gt;title&lt;/code&gt; elements. Multilingual elements, then needs to be
  accomodated within &lt;code&gt;title&lt;/code&gt; with the use of the &lt;code&gt;phrase&lt;/code&gt;
  element which has no effect on how the document is rendered.&lt;/para&gt;

  &lt;para lang="es"&gt;A continuaci√≥n se muestra una figura en versi√≥n multiling√ºe:&lt;/para&gt;

  &lt;para lang="en"&gt;The following figure has also a multilingual structure:&lt;/para&gt;

  &lt;informalfigure id=""&gt;
    &lt;mediaobject&gt;
      &lt;imageobject lang="es"&gt;
        &lt;imagedata align="center" fileref="tablestruct_es.png" format="PNG" /&gt;
      &lt;/imageobject&gt;
      &lt;imageobject lang="en"&gt;
        &lt;imagedata align="center" fileref="tablestruct_en.png" format="PNG" /&gt;
      &lt;/imageobject&gt;
    &lt;/mediaobject&gt;
  &lt;/informalfigure&gt;

  &lt;para lang="es"&gt;La figura se incluye mediante el siguiente Docbook:&lt;/para&gt;
  &lt;para lang="en"&gt;The figure is included with the following Docbook:&lt;/para&gt;

  &lt;programlisting&gt;&lt;![CDATA[&lt;informalfigure id=""&gt;
  &lt;mediaobject&gt;
    &lt;imageobject lang="es"&gt;
        &lt;imagedata align="center" fileref="tablestruct_es.png" format="PNG" /&gt;
    &lt;/imageobject&gt;
    &lt;imageobject lang="en"&gt;
        &lt;imagedata align="center" fileref="tablestruct_en.png" format="PNG" /&gt;
    &lt;/imageobject&gt;
  &lt;/mediaobject&gt;
&lt;/informalfigure&gt;]]&gt;&lt;/programlisting&gt;
&lt;/section&gt;
</programlisting>

        <para>By including the following definitions in the <ulink url="Samples/Multilingual/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink>:</para>

        <programlisting format="linespecific">inkscape.files=*.svg

xsltproc.multilingual.files=index.xml


</programlisting>

        <para>Two files <ulink url="Samples/Multilingual/index_en.html"><filename moreinfo="none">index_en.html</filename></ulink>
        and <ulink url="Samples/Multilingual/index_es.html"><filename moreinfo="none">index_es.html</filename></ulink>
        are produced.</para>


      </answer>

    </qandaentry>

  </qandaset>
</section>






  <section id="Copyfiles">
  <title>Copy files from/to a different location</title>

  <qandaset>
    <qandaentry id="copyfile_cases">
      <question>
        <para>Are there multiple ways to copy files between directories?</para>
      </question>
      <answer>
        <para>ADA consider the following scenarios to copy files from one
        location to another.</para>

        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem>
            <para>Copy an auxiliary file that exists as-is from one location to
            another. This is the simplest case. Consider a set of files that are
            always present in one location and simply need to be replicated on a
            different location. ADA executes a rule to perform this task just at
            the beginning of the production step. See <xref linkend="copyfiles"/> for more details.</para>
          </listitem>
          <listitem>
            <para>Invoke the production rules in a remote directory to create
            certain required files and then copy them to a different
            location. The difference between this case and the previous one is
            that the files to be copied are a result of production rules
            provided by ADA. In other words, they first need to be produced and
            then copied. The production of this resources in remote directories
            is the first rule executed when invoking ADA. See <xref linkend="subrecursive_processing"/> for a detailed description.</para>
          </listitem>
          <listitem>
            <para>The third considered scenario is when the files produced in
            the current directory are declared to be copied (although they are
            not specifically copied until requested). In other words, certain
            files are stated to be suitable to be copied or
            <quote>exported</quote>. See <xref linkend="export_processing"/> for
            a detailed description.</para>
          </listitem>
        </orderedlist>
      </answer>
    </qandaentry>

    <qandaentry id="copyfiles" xreflabel="How to copy auxiliary files">
      <question>
        <para>How to copy auxiliary files from/to a different location?</para>

        <para>Two possible scenarios are considered by this rule. The first one
        is when you need to select and copy certain specific files from a
        different location into your current directory before processing the
        rules localy. The second is when some of your files need to be copied to
        a specific location.</para>
      </question>
      <answer>

        <para>ADA allows to specify the source directory and a collection of
        files and copy them to a destination directory. The variables to include
        in the <filename moreinfo="none">Properties.txt</filename> to control this procedure
        are:</para>

        <informaltable frame="all" id="copyfiles_vars" xml:base="VarTables/Copyfiles_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>copyfiles.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>copyfiles.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>copyfiles.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>copyfiles.files</varname>
        </entry>
        <entry>Source file names (no path, it is copyfiles.src.dir)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example, let us assume that you need the auxiliary file
        <filename moreinfo="none">styles.css</filename> from the directory above the one you are
        currently working. The following definitions in the <ulink url="Samples/Copyfiles/Properties.txt"><filename moreinfo="none">Properties.txt</filename></ulink>
        are required:</para>

        <programlisting format="linespecific">copyfiles.src.dir=..
copyfiles.files=style.css
</programlisting>

        <para>This rule is executed at the very begining of the directory
        processing and therefore is specially suited to manipulate files that
        are always present. If you need to copy files from/to a location that
        are the result of applying a production rule, then you need to use
        either the Export (copy files that have been produced, see <xref linkend="export_processing"/>) or the Subrecursive (produce files before
        the local production, see <xref linkend="subrecursive_processing"/>)
        rules.</para>
      </answer>
    </qandaentry>

    <qandaentry id="subrecursive_processing" xreflabel="How to process other directories before the current one">
      <question>
        <para>Can I specify some directories to be processed before executing
        the production rules in the current one?</para>

        <para>I have a directory that processes a bunch of files, but before
        that, it needs some other resources in other locations to be produced
        by ADA and placed in this directory. Is it possible to simply specify
        those directories?</para>
      </question>

      <answer>
        <para>Yes. And this is one of the key features that ADA uses to allow
        hierarchical resource building. The generic scenario considered is such
        that to produce a set of resources, some other resources need to be
        created in different locations and <emphasis>exported</emphasis> to
        obtain the final product.</para>

        <para>Let us assume that all the remote directories contain the
        <filename moreinfo="none">Properties.txt</filename> file in which the export variables
        containing the list of files to export have been defined (see <xref linkend="export_processing"/> for the details). Two scenarios are
        considered by this functionality depending on the location where to
        export the resource is decided.</para>

        <itemizedlist>
          <listitem>
            <para>A remote directory is pre-processed but the location to copy
            the exported resources is passed as a parameter. This means that
            if in the <filename moreinfo="none">Properties.txt</filename> of the remote file
            the variable <varname>export.dst.dir</varname> is defined, it is
            <emphasis>overwritten</emphasis> by the value given in the
            invoking directory.</para>
          </listitem>
          <listitem>
            <para>A remote directory is pre-processed and the location to copy
            the exported resources is taken from the
            <filename moreinfo="none">Properties.txt</filename> file in this remote
            directory.</para>
          </listitem>
        </itemizedlist>

        <para>ADA allows the definition of two sets of directories each of
        them processed in each of the scenarios previously described. The
        following variables control the execution of the production process in
        a set of directories:</para>

        <informaltable frame="all" id="subrecursive_vars" xml:base="VarTables/SubRecursive_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>subrecursive.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>subrecursive.dirs</varname>
        </entry>
        <entry>Dirs to execute and export resources to ${subrecursive.dst.dir}</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>subrecursive.dst.dir</varname>
        </entry>
        <entry>Location where the exported resources in ${subrecursive.dirs} are copied</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>subrecursive.dirs.nodst</varname>
        </entry>
        <entry>Dirs to execute and export as specified in their Properties.txt file</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>subrecursive.target</varname>
        </entry>
        <entry>Production rule executed in the remote directories</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>


        <para>The values stored in these variables have a special effect when
        combined with the variables used for exporting resources in the remote
        repository (see <xref linkend="export_processing"/>.) The
        following figure shows the possible scenarios when combining the
        definitions of the destination where the files are copied:</para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/SubrecursiveExport.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Exporting recursively</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>The following figure shows the effect of the two types of
        subrecursive processing with and without a destination for the
        exported resources.</para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/SubrecursiveExport2.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Exporting recursively in both scenarios</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>
      </answer>
    </qandaentry>

    <qandaentry id="export_processing" xreflabel="How to declare which resources are exported">
      <question>
        <para>How to specify which resources should be exported?</para>
      </question>
      <answer>
        <para>When creating resources in a directory, typically, only a subset
        of files are supposed to be used in the outside. These files are what
        we call the <emphasis>exported</emphasis> resources. The variables
        inside the <filename moreinfo="none">Properties.txt</filename> used to capture this
        functionality are:</para>

        <informaltable frame="all" id="export_vars">
          <tgroup rowsep="1" colsep="1" cols="3">
            <colspec colnum="1" colname="col1" align="left"/>
            <colspec colnum="2" colname="col2" align="left"/>
            <colspec colnum="3" colname="col3" align="center"/>
            <thead>
              <row>
                <entry align="center">Variable name</entry>
                <entry align="center">Description</entry>
                <entry align="center">Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry><varname>export.src.dir</varname></entry>
                <entry>Directory from where to take the files to export</entry>
                <entry>Current directory</entry>
              </row>
              <row>
                <entry><varname>export.dst.dir</varname></entry>
                <entry>Directory where to copy the exported resources</entry>
                <entry>Value of <varname>export.src.dir</varname></entry>
              </row>
              <row>
                <entry><varname>export.files</varname></entry>
                <entry>
                  Space or comma separated list of file names (with no path)
                  of the resources to export
                </entry>
                <entry/>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>There are two typical scenarios when it comes to using these
        variables.</para>

        <itemizedlist>
          <listitem>
            <para>A directory in which resources are simply created and
            prepared to export, but without a destination in mind. This is the
            case of material that is suitable to be re-used in multiple
            locations. In this case, only the variable
            <varname>export.files</varname> is defined to contain those
            resources to export. The other two variables are left with their
            default values.</para>

            <para>With this definition, any other directory that needs these
            resources could export them to a given location (see <xref linkend="subrecursive_processing"/> for more details).</para>
          </listitem>
          <listitem>
            <para>A directory in which resources are always exported to the
            same location. This is usually the case of a directory that is
            already close to the final destination of the material and is in
            charge of combining resources and place them in their final
            location. In such scenario, the variables
            <varname>export.files</varname> and
            <varname>export.dst.dir</varname> contain respectively the set of
            resources to place and the directory where they have to be
            copied.</para>
          </listitem>
        </itemizedlist>
      </answer>
    </qandaentry>

    <qandaentry id="exportcontrol">
      <question>
        <para>Is it possible to consider a directory for building only under
        some special conditions?</para>

        <para>I have some directories that, although present in my project, I
        would like to control its presence in the final version easily. For
        example, suppose I would like to control the presence of a special
        page in my final site, that is, go from a version in which that page
        nor any link to it are present in the site, to a version in which both
        the link and the page are present.</para>
      </question>
      <answer>
        <para>This functionality is considered in ADA and provided through a
        combination of multiple mechanisms. The presence or not of a set of
        resources in the final version of a site is achieved by either
        executing or not the exporting rules (see <xref linkend="export_processing"/> for the details). The following
        variables are provided to create a <emphasis>condition</emphasis> such
        that if satisfied, resource export is executed, but if not satisfied,
        no resource is exported:</para>

        <informaltable frame="all" id="exportcontrol_vars" xml:base="VarTables/ExportControl_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>exportcontrol.debug.level</varname>
        </entry>
        <entry>Debug level for the decission if export is allowed</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>exportcontrol.begin</varname>
        </entry>
        <entry>Date/time when validity window opens</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>exportcontrol.end</varname>
        </entry>
        <entry>Date/time when validity window closes</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>exportcontrol.now</varname>
        </entry>
        <entry>Time to consider as actual time</entry>
        <entry>${ada.current.datetime}</entry>
      </row>
      <row>
        <entry>
          <varname>exportcontrol.date.format</varname>
        </entry>
        <entry>Date/time format enforced on variables</entry>
        <entry>yyyy-MM-dd'T'HH:mm:ss</entry>
      </row>
      <row>
        <entry>
          <varname>exportcontrol.open</varname>
        </entry>
        <entry>Set the validity window directly open (true/false)</entry>
        <entry>true</entry>
      </row>
      <row>
        <entry>
          <varname>exportcontrol.profile.revision</varname>
        </entry>
        <entry>List of semicolon separated values in revision to open the export</entry>
        <entry>${ada.profile.revision}</entry>
      </row>
      <row>
        <entry>
          <varname>exportcontrol.profile.revision.value</varname>
        </entry>
        <entry>Given revision value to compare and decide if export is open</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>Given these variables, the export rule is executed if
        <emphasis>all the following conditions are satisfied</emphasis>:</para>

        <informaltable frame="all" id="exportcontrol_condition">
          <tgroup rowsep="1" colsep="1" cols="1">
            <colspec colnum="1" colname="col1" align="left"/>
            <tbody>
              <row>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para><varname>exportcontrol.open</varname> is
                      true</para>
                    </listitem>
                    <listitem>
                      <para><varname>exportcontrol.begin</varname> is empty or
                      its value is before
                      <varname>exportcontrol.now</varname></para>
                    </listitem>
                    <listitem>
                      <para><varname>exportcontrol.end</varname> is empty or
                      its value is after
                      <varname>exportcontrol.now</varname></para>
                    </listitem>
                    <listitem>
                      <para><varname>exportcontrol.profile.revision</varname>
                      is empty or
                      <varname>exportcontrol.profile.revision.value</varname>
                      is empty or the former is contained in the
                      latter.</para>
                    </listitem>
                  </itemizedlist>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>Clear uh? The condition is so complicated because it combines
        several control mechanisms. The most common situation is to use only one
        of them. The condition is easily understood if broken into the following
        possible scenarios of use (in increasing level of complexity):</para>

        <itemizedlist>
          <listitem>
            <para>Allow/skip the export rule in a directory by changing only
            one definition in <filename moreinfo="none">Properties.txt</filename>. This is
            achieved by simply using the definition:</para>

            <programlisting format="linespecific">exportcontrol.open=true</programlisting>

            <para>If the value of this variable is different from
            <quote>true</quote> the export rule is not executed.</para>
          </listitem>

          <listitem>
            <para>A directory should only be exported during a certain time
            window. Define the time interval with the variables
            <varname>exportcontrol.begin</varname> and
            <varname>exportcontrol.end</varname>. For example:</para>

              <programlisting format="linespecific">exportcontrol.begin=2008-06-25T19:00:00
portcontrol.end=2018-06-25T19:00:00</programlisting>
          </listitem>

          <listitem>
            <para>Keep a list of directories allowed to export. This is
            achieved using the two variables
            <varname>exportcontrol.profile.revision</varname> and
            <varname>exportcontrol.profile.revision.value</varname>. You
            should first choose a keyword assigned to each directory you want
            to control. Assign that keyword to the
            <varname>exportcontrol.profile.revision.value</varname>variable as
            shown in the example:</para>

              <programlisting format="linespecific">exportcontrol.profile.revision.value=keyword</programlisting>

            <para>Set the value of
            <varname>exportcontrol.profile.revision</varname> with the
            semi-colon separated list of keywords of those modules you want to
            activate. This definition should be included in a file common for
            the entire project (see <xref linkend="global_rule"/>.)</para>
          </listitem>
        </itemizedlist>

        <para>ADA allows you use more than one of these conditions
        together. The export is actually execute if <emphasis>all of
        them</emphasis> are satisfied.</para>
      </answer>
    </qandaentry>
  </qandaset>
</section>






  <section id="Processing_Latex" xreflabel="Top of the Section">
  <title>Processing LaTeX documents</title>

  <qandaset>
    <qandaentry id="latex_processing" xreflabel="How to process LaTeX files?">
      <question>
        <para>How to process LaTeX files?</para>
      </question>

      <answer>
        <para>ADA provides a rule to specify a set of LaTeX files to be
        processed. The variables to define in the
        <filename moreinfo="none">Properties.tex</filename> file are:</para>

        <informaltable frame="all" id="latex_vars" xml:base="VarTables/Latex_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>latex.exec</varname>
        </entry>
        <entry>Name of the LaTeX processor executable</entry>
        <entry>latex</entry>
      </row>
      <row>
        <entry>
          <varname>latex.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>latex.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>latex.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${latex.src.dir}</entry>
      </row>
      <row>
        <entry>
          <varname>latex.files</varname>
        </entry>
        <entry>Source file names (no path, it is latex.src.dir)</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>latex.extra.args</varname>
        </entry>
        <entry>Extra arguments to pass to the LaTeX processor</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example, if the source file is <ulink url="Samples/Latex/input.tex">a LaTeX file</ulink>, the required
        definitions in the <ulink url="Properties.txt"><filename moreinfo="none">Properties.txt</filename></ulink> file
        are:</para>

        <programlisting format="linespecific">latex.files=input.tex
</programlisting>

        <para>Note that the rule <emphasis>does not</emphasis> execute LaTeX
        multiple times to remove potentially undefined references. A more
        complex rule is required for that task (and it has not been developed
        yet).</para>
      </answer>
    </qandaentry>

    <qandaentry id="dvi_to_ps">
      <question>
        <para>How to translate <filename moreinfo="none">dvi</filename> files to
        <filename moreinfo="none">ps</filename>?</para>
      </question>
      <answer>
        <para>ADA provides a rule such that given a set of
        <filename moreinfo="none">*.dvi</filename> files, it translates them to Postscript. The
        variables used in the <filename moreinfo="none">Properties.txt</filename> file are:
        </para>

        <informaltable frame="all" id="dvips_vars" xml:base="VarTables/Dvips_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>dvips.exec</varname>
        </entry>
        <entry>Name of the dvips executable</entry>
        <entry>dvips</entry>
      </row>
      <row>
        <entry>
          <varname>dvips.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>dvips.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>dvips.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>dvips.files</varname>
        </entry>
        <entry>Source file names (no path, it is dvips.src.dir)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example, if in a directory we want to process <ulink url="Samples/Dvips/input.tex">a LaTeX file</ulink> to obtain a DVI file,
        and then translate this last file to Postscript, the <ulink url="Samples/Dvips/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink> should include the following definitions:</para>

        <programlisting format="linespecific">latex.files=input.tex

dvips.files=*.dvi
</programlisting>

      </answer>
    </qandaentry>

    <qandaentry id="prosper_slides">
      <question>How to create PDF slides using the LaTeX package
      Prosper?</question>
      <answer>
        <para>Yet to be written.</para>
      </answer>
    </qandaentry>
  </qandaset>

</section>






  <section id="Processing_PDF" xreflabel="Top of the Section">
  <title>Processing PDF documents</title>

  <qandaset>
    <qandaentry id="pdfnup">
      <question>
        <para>How can I produce n-up PDF files?</para>
      </question>

      <answer>
        <para>ADA provides a rule that given a set of PDF files produces n-up
        files, where <quote>n</quote> is a parameter. The availability of this
        rule depends on the executable <filename moreinfo="none">pdfnup</filename> being
        properly installed in the system. The set of variables to include in the
        <filename moreinfo="none">Properties.txt</filename> file are:</para>

        <informaltable frame="all" id="pdfnup_vars" xml:base="VarTables/PDFnup_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>pdfnup.exec</varname>
        </entry>
        <entry>Name of the executable to use</entry>
        <entry>pdfnup</entry>
      </row>
      <row>
        <entry>
          <varname>pdfnup.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>pdfnup.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>pdfnup.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${pdfnup.src.dir}</entry>
      </row>
      <row>
        <entry>
          <varname>pdfnup.nup.option</varname>
        </entry>
        <entry>How to organize the pages in a sheet</entry>
        <entry>1x2</entry>
      </row>
      <row>
        <entry>
          <varname>pdfnup.files</varname>
        </entry>
        <entry>Source file names (no path, it is pdfnup.src.dir)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example, to produce a 2-up version of a <ulink url="Samples/PDFnup/Document.pdf">a PDF file</ulink>, the required
        definitions in the <ulink url="Samples/PDFnup/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink> are:</para>

        <programlisting format="linespecific">pdfnup.files=Document.pdf
pdfnup.nup.option=2x1
</programlisting>

        <para>Note that the PDF file to process may be produced by another ADA
        rule.</para>
      </answer>
    </qandaentry>

    <qandaentry id="ppt2pdf">
      <question>
        <para>How to translate automatically Microsoft PowerPoint or Word files
        to PDF?</para>
      </question>

      <answer>

        <para>WARNING: This functionality is still in Beta. ADA has a rule to
        invoke OpenOffice directly and produce a PDF file from either a
        PowerPoint or a Word file. The functionality relies on a specific macro
        being available in a properly installed OpenOffice instance. The
        variables to control this rule are:</para>

        <informaltable frame="all" id="msf2pdf_vars" xml:base="VarTables/Msf2PDF_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>msf2pdf.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>msf2pdf.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>msf2pdf.files</varname>
        </entry>
        <entry>Source file names (no path, it is msf2pdf.src.dir)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>Note that this rule does not allow to control where the newly
        produced PDF are stored. It is assumed that the same directory of the
        source file is considered.</para>
      </answer>
    </qandaentry>

    <qandaentry id="ps2pdf">
      <question>
        <para>How can I translate Postscript to PDF?</para>
      </question>

      <answer>
        <para>ADA includes a rule to translate a set of given Postscript files
        to PDF. The variables to include in the
        <filename moreinfo="none">Properties.txt</filename> file are:</para>

        <informaltable frame="all" id="ps2pdf_vars" xml:base="VarTables/Ps2pdf_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>ps2pdf.exec</varname>
        </entry>
        <entry>Name of the executable used for the translation</entry>
        <entry>ps2pdf</entry>
      </row>
      <row>
        <entry>
          <varname>ps2pdf.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>ps2pdf.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>ps2pdf.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${ps2pdf.src.dir}</entry>
      </row>
      <row>
        <entry>
          <varname>ps2pdf.files</varname>
        </entry>
        <entry>Source file names (no path, it is ps2pdf.src.dir)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example, given a <ulink url="Samples/Ps2pdf/Document.ps">PostScript file</ulink>, the content of
        the <ulink url="Samples/Ps2pdf/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink> should include the definitions:</para>

        ps2pdf.files=Document.ps



        <para>Note that the rule can only be applied if the proper translation
        tool is installed in the system.</para>

      </answer>
    </qandaentry>
  </qandaset>
</section>








  <section id="Git_for_authors" xreflabel="Top of the Section">
  <title>Using Git as an author with ADA</title>

  <qandaset>
    <qandaentry id="what_is_VCS">
      <question>
        <para>
          What is a <ulink url="en.wikipedia.org/wiki/Revision_control">version control
          system</ulink>?
        </para>
      </question>
      <answer>
        <para>
          A Version Control System (VCS) is a tool that allows the manipulation of
          different versions of information units (typically files) by
          multiple users.
        </para>

        <para>
          Files change over time, and current file systems store only the last
          version. Version control systems, on the other hand store (almost)
          all the different versions that files have over time. The location
          where these versions are stored is commonly known as a
          <emphasis>repository</emphasis>. But on top of storing versions,
          these tools also offer multiple operations to manipulate them. The
          two most common operations amount to send a new version of the files
          to the repository and get the latest version of the repository.
        </para>

        <para>
          But when a set of users is sharing files, version management may
          become specially complicated. What happens if two users have the
          same file and both modify it? Who has the latest version? How is this
          situation managed? Actual VCS tools have very sophisticated
          techniques to solve these situations and offer users a comfortable
          environment to manipulate complicated multiple versions of large
          sets of files.
        </para>

        <para>
          As with almost any application, there are multiple VCS, both open
          source and commercial. ADA is itself managed using
          <command moreinfo="none">GIT</command>, an open source VCS, and the authoring
          environment proposed relies also in the use of the same tool. The
          problem of version control is orthogonal to authoring. In other
          words, any distributed authoring environment probably has some
          degree of file sharing and version management. If you solve this
          problem with <command moreinfo="none">git</command> or any other tool is independent
          of the problem of creating and assembling resources as supported by
          ADA.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="gitwhatis" xreflabel="What is git">
      <question>
        <para>What is Git?</para>
      </question>
      <answer>
        <para>
          Git is a modern, fast, open-source distributed version control
          system, originally developed by Linus Torvalds.  It is being used in
          large-scale open-source projects like, for example, the Linux Kernel
          and the X Window System <emphasis>X.org</emphasis>, although it is
          suitable also for small projects.
        </para>

        <para>
          Unlike other well-known version control systems like CVS and
          Subversion (which rely on a central repository), Git uses a
          distributed repository. A central repository is not necessary because
          each developer can have her own repository with the full history of
          the project. Changes done by a developer in her repository can be
          easily copied to other repositories.
        </para>

        <para>
          GIT approaches the problem of managing versions of a set of files
          from the point of view of four locations as shown in the following
          figure (derived from an excellent post by <ulink url="http://osteele.com">Oliver Steel's Blog</ulink>).
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/GitScenario.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Git scenario</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          The user works with her files normally. The <quote>index</quote> is
          similar to a container in which the changes to the files can be
          deposited gradually to later be packed and sent to the local
          repository. As it can be seen in the figure, there are commands to
          send changes from the files to the index, from the index to the
          local repository or even directly from the files to the repository.
        </para>

        <para>
          This workflow can be done entirely in a local machine with no
          information exchange with any other repository. However, if the
          different versions need to be shared through an external repository,
          <command moreinfo="none">git</command> offers commands to send these changes or
          update the local files with the latest revision respect to the
          remote repository. These commands are explained in the
          following questions.
        </para>

        <para>
          But aside from this four-location scenario, Git, as all VCS tools,
          offers a very powerful functionality to group and manage versions
          into what are called <emphasis>branches</emphasis>. Branches are
          different views of the local repository that contain different
          versions of the files in the repository. At any point in time, the
          work directory and the index are pointing to one and only one branch
          of the repository. It then appears the notion of <quote>being placed
          in a branch</quote> (or should we say <quote>perched</quote>) while
          working with our local files managed by git.
        </para>

        <para>
          The most commonly used operations with branches are: create a branch
          with a name (simply duplicate the content of the current branch),
          change the current branch, and merge the content of one branch with
          the current branch. Branches might be a bit counterintiutive at
          first, but together with an extremely powerful merge capability,
          offer an effective way to organize multiple versions in a complex
          set of files.
        </para>

        <para>
          For further information about Git, go to the <ulink url="http://git.or.cz/">official Git Web site</ulink>.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="gitinstall" xreflabel="How to install Git">
      <question>
        <para>How do I install Git?</para>
      </question>
      <answer>
        <para>
          Git is multi-platform. It can be installed on Windows, Linux and Mac
          systems.
        </para>

        <itemizedlist>
          <listitem>
            <para>
              On Windows, you have two options: the software is already
              installed as part of Cygwin (see <xref linkend="howtoinstallcygwin"/>) or as an standalone windows
              program called <ulink url="http://code.google.com/p/msysgit/">msys-git
              installer</ulink>. If you choose the later option,
              the first step is to download the installer
              from the project page.
            </para>

            <para>
              Start the installer and advance on the required steps until the
              system tries to adjust the <varname>PATH</varname> environment
              as shown in the following figure:
            </para>

            <informalfigure float="0">
              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/GitWindowsInstall.png" format="PNG"/>
                </imageobject>
                <textobject>
                  <phrase>Git Setup Path Environment</phrase>
                </textobject>
              </mediaobject>
            </informalfigure>

            <para>
              The option of installing Git Bash Only needs to be select to
              avoid conflicts with the Git version already installed as part
              of the Cygwin environment.
            </para>

            <para>
              Git needs an additional program to transfer data to and from a
              remote repository. When selecting the SSH executable, select
              OpenSSH as shown in the following figure.
            </para>

            <informalfigure float="0">
              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/GitWindowsInstall2.png" format="PNG"/>
                </imageobject>
                <textobject>
                  <phrase>Git Setup SSH Tool</phrase>
                </textobject>
              </mediaobject>
            </informalfigure>

            <para>
              Once the installation has finished, you have two options to work
              with Git, either a shell terminal which opens if you execute the
              installed program named <command moreinfo="none">Git Bash</command>, or a
              graphical user interface named <command moreinfo="none">Git GUI</command>. This
              last interface offers the initial commands to clone, create or
              open a repository.
            </para>

            <para>
              After selecting a repository, Git GUI allows you to create a
              link to start the GUI directly manipulating that repository as
              shown in the following figure.
            </para>

            <informalfigure float="0">
              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/GitWindowsInstall4.png" format="PNG"/>
                </imageobject>
                <textobject>
                  <phrase>Git GUI Create Shortcut</phrase>
                </textobject>
              </mediaobject>
            </informalfigure>
          </listitem>

          <listitem>
            <para>
              On Linux, it should be available as a regular package in your
              distribution. For example, the main Git package in Debian is
              called <command moreinfo="none">git-core</command>. It can be installed using
              <emphasis>Aptitude</emphasis> or any other available package
              manager.
            </para>
          </listitem>

          <listitem>
            <para>
              On Mac, the <ulink url="http://code.google.com/p/git-osx-installer/">Git OS X
              installer</ulink> is available.
            </para>
          </listitem>
        </itemizedlist>
      </answer>
    </qandaentry>

    <qandaentry id="gitrepositories">
      <question>
        <para>
          My Git repository is local to my machine, but how is the content
          shared with other authors and course coordinators?
        </para>
      </question>
      <answer>
        <para>
          The distributed model offered by Git allows several workflows. One
          possible workflow is presented here, but different alternatives are
          also possible. It is assumed that a set of authors create content
          for a course that is ultimately combined in a common location by a
          person called the <emphasis>coordinator</emphasis> to produce the
          final version to be published in the Web.
        </para>

        <para>
          Also, a repository for the course material (and optionally course
          administration files) must be installed in an location associated to
          the course and such that all the authors must be able to exchange
          files (for example through SSH). This repository will be referred to
          as the <emphasis>shared repository</emphasis> in some parts of this
          FAQ.
        </para>

        <para>
          The course coordinator sets up an initial version of the shared
          repository. Git repositories allow for versions to be grouped in
          what is called a <emphasis>branch</emphasis>. Branches are copies of
          the repository such that versions can be selected from any of them
          to manipulate. There is always a branch called
          <filename moreinfo="none">master</filename> and the coordinator should use it as the
          <emphasis>official</emphasis> one containing the course material (if
          you are a course coordinator, see <xref linkend="git-admin-shared-repo"/>).  Published material is intended
          to be built from the contents of this branch.  The course
          coordinator is the person in charge of combining the changes from
          all the authors into this branch. In order to maintain the new
          versions produced by the authors properly contained, a branch should
          be created for each author that is going to use the
          repository. Authors will modify files in their respective local
          repositories and eventually upload a new version of their files to
          the proper branch of the shared repository. The coordinator takes
          authors' contributions from their branches and merges them into this
          repository (if you are a course coordinator, see <xref linkend="git-admin-merge"/>). The following figure illustrates the
          interaction between authors and course coordinator through the
          shared repository.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/GitAuthorBranches.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Git GUI Create Shortcut</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          As it can be seen, in addition to the course shared repository,
          authors have their own local repository in their workspace (their
          laptop, corporate user account, etc.) These repositories can be
          easily set up by cloning the course repository (see <xref linkend="gitclone"/>). Authors then edit and store their versions
          in their local repositories, and when the new version is ready to be
          shared with the rest of authors, they push the changes to the proper
          author branch in the shared repository (see <xref linkend="gitpush"/>).
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="gitclone" xreflabel="How to clone a repository">
      <question>
        <para>
          How do I create my local repository from the
          shared repository?
        </para>

        <para>
          The course coordinator gave me the URL to access the shared
          repository. How do I obtain the initial files from that repository
          before starting to work?. How do I set-up my local Git repository
          from it?
        </para>
      </question>

      <answer>
        <para>
          A repository containing a copy of another repository is obtained
          using the <command moreinfo="none">clone</command> command. Let us suppose that the
          shared repository is available through SSH with the following
          parameters:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              Remote host where the course account is available:
              <command moreinfo="none">accounts.example.com</command>.
            </para>
          </listitem>
          <listitem>
            <para>
              User name of the course account: <command moreinfo="none">mycourse</command>.
            </para>
          </listitem>
          <listitem>
            <para>
              Path within the course account where the shared repository
              resides: <command moreinfo="none">/home/mycourse/repository/material</command>.
            </para>
          </listitem>
          <listitem>
            <para>
              Name of your branch in the shared repository:
              <command moreinfo="none">john</command>.
            </para>
          </listitem>
        </itemizedlist>

        <para>
          Open a Git Shell window (see <xref linkend="gitinstall"/>). Go to
          the directory where you want to store your repository (take into
          account that git will create a new folder with the name
          <filename moreinfo="none">material</filename>). Execute the following command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git clone ssh://mycourse@accounts.example.com/home/mycourse/repository/material</command></programlisting>

        <para>
          You will be asked to authenticate with <command moreinfo="none">mycourse</command>'s
          password. The program will then print several messages and after a
          while a clone of the shared repository should appear now in a new
          sub-directory called <command moreinfo="none">material</command> inside your current
          directory. The following figure illustrates this process.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/GitAuthorCloned.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Cloned repository in author area</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          With the previous command you may have downloaded a self-contained
          directory, in which case, all the files are already available for
          regular use, or a directory with references to some complementary
          material. These directories are called <quote>submodules</quote> and
          need a special treatment. A directory contains these modules if the
          file <filename moreinfo="none">.gitmodules</filename> is present in the top
          directory.
        </para>

        <para>
          In the presence of modules, there are two additional commands that
          need to be executed in order to obtain the
          <emphasis>entire</emphasis> repository.
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git submodule init</command>
$ <command moreinfo="none">git submodule update</command></programlisting>

        <para>
          The first command simply inserts the submodule declaration as part
          of the repository (a simple declaration is downloaded with the first
          <command moreinfo="none">clone</command> command). The second effectively clones the
          additional modules.
        </para>

        <para>
          You may now enter in the top directory of the cloned copy and type
          <command moreinfo="none">git status</command>:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git status</command>
# On branch master
nothing to commit (working directory clean)</programlisting>

        <para>
          As you can see, the repository has been successfully downloaded, you
          are in the <filename moreinfo="none">master</filename> branch and the working
          directory is clean of any changes. If the command says that you are
          placed on a branch different from <command moreinfo="none">master</command>, then
          you just must change to that branch with the command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git checkout master</command></programlisting>

        <para>
          If you are not placed on the <command moreinfo="none">master</command> branch and
          the previous command failed, it means that the
          <command moreinfo="none">master</command> branch was not cloned. To create it you
          must type:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git checkout -b master origin/master</command></programlisting>

        <para>
          Your repository should now be placed on branch
          <command moreinfo="none">master</command> as illustrated in the following figure.
        </para>

        <para>
          Before beginning to work, you need to edit the configuration file of
          your repository to simplify the exchange of information with your
          author branch in the shared repository. Open the file
          <filename moreinfo="none">.git/config</filename> in your repository directory with a
          plain text editor and add the line <command moreinfo="none">push =
          master:john</command> at the end of the <command moreinfo="none">remote
          "origin"</command> section. Remember that <command moreinfo="none">john</command> is
          the name of your branch in the shared repository in this
          example. The file should now look something like this:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">cat .git/config</command>
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote "origin"]
        url = ssh://john@accounts.example.com/home/mycourse/repository/material
        fetch = +refs/heads/*:refs/remotes/origin/*
        <command moreinfo="none">push = master:john</command>
[branch "master"]
        remote = origin
        merge = refs/heads/master</programlisting>

        <para>
          Now your local repository is ready to work. Go ahead and modify your
          files in this repository, and eventually send the changes first to
          the index (if you need to do so) and then to your local repository
          (see <xref linkend="gitcommit"/>). Whenever you think appropriate
          push your changes to your branch in the shared repository (see <xref linkend="gitpush"/>), and to obtain the latest version from the
          repository, update from time to time your local repository(see <xref linkend="gitpull"/>).

        </para>
      </answer>
    </qandaentry>

    <qandaentry id="gitcommit" xreflabel="How to commit changes">
      <question>
        <para>How do I commit changes to my local git repository?</para>
      </question>
      <answer>
        <para>
          <quote>Commits</quote> are the basic unit used by Git to keep track
          of the different versions of the contents it manages. Only the
          versions committed into the repository are available later for
          reverting changes, examining history, computing differences between
          versions, etc. In other words, if you never commit files, it is like
          working with no VCS at all. So, commit often, in an orderly fashion
          (this takes some experience) and trying to separate changes in
          logical units (this takes even more experience).
        </para>

        <para>
          Authors make continuous changes to their content. After changing
          some files, typically when they finish a logical unit of work
          (e.g. finish writing or reviewing a document section, including a
          figure in a document, finish a draft they want to share with others,
          etc.), authors send the new version to the local repository. The
          action of sending a new version into the local repository is called
          a <emphasis>commit</emphasis>.  For each commit, Git stores the
          differences between the files now and the files in
          the previous commit.
        </para>

        <para>
          When you have a new version of the files you want to commit, it
          helps sometimes to take a look at those changes before sending them
          to the repository. This is achieved with the <command moreinfo="none">git
          status</command> command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git status</command>
# On branch master
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       <command moreinfo="none">new file:   images/ReallyCoolImage.svg</command>
#
# Changed but not updated:
#   (use "git add &lt;file&gt;..." to update what will be committed)
#
#       <command moreinfo="none">modified:   MyCoolResource.xml</command>
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#       <command moreinfo="none">MyCoolResource.html</command>
#       <command moreinfo="none">MyCoolReource.pdf</command>
#       <command moreinfo="none">build.out</command></programlisting>

        <para>
          The text dumped on the screen is the way Git has to tell us what is
          the situation between your files, the index and the local repository
          (refresh your memory with <xref linkend="gitwhatis"/>). It first
          shows those files that are already inside the index and ready to be
          committed (in the example
          <filename moreinfo="none">images/ReallyCoolImage.svg</filename>). It then shows the
          files that have changed but are not inside the index (in this case
          <filename moreinfo="none">MyCoolResource.xml</filename>). And it finally shows those
          files that Git knows nothing about them, or in other words, are
          ignored
          by git or <emphasis>untracked</emphasis>. If you need a much more
          detailed report on the changes made, use the command <command moreinfo="none">git
          diff</command>, which shows the lines that changed (were added,
          removed or modified) in all the modified files.
        </para>

        <para>
          There are two typical ways to send changes to the local
          repository. If you want to send only the files in the index, then
          the command is <command moreinfo="none">git commit</command>. In order to be
          considered as changes, files need to be explicitly placed in the
          index with the command <command moreinfo="none">git add file</command>. If this
          concept of the index is too confusing, forget about it for the time
          being and use it only once you feed the need for it.
        </para>

        <para>
          The alternative way of doing a commit is to ignore the index and
          simply send the changes in all the files (the second section on the
          report shown by <command moreinfo="none">git status</command>). To achieve this,
          just type <command moreinfo="none">git commit -a</command>. This command commits all
          the files that have been modified since the last commit
          (independently of being in the index or not).
        </para>

        <para>
          The <command moreinfo="none">commit</command> command always asks for a message
          describing the changes that are being sent to the repository. There
          is this unwritten convention that says that comments should include
          a summary (similar to an email subject) in the first line, then an
          empty line and then a longer description of the changes if needed.
        </para>

        <example>
          <title>Example of a comment attached to a git commit</title>
          <programlisting format="linespecific">Redesigned completely the figure on this section

The figure was actually very confusing, so I modified the arrows (which were
backwards and added some colors so make it more intuitive.
       <command moreinfo="none">modified:   MyCoolResource.xml</command></programlisting>
        </example>

        <para>
          Git places several lines in the editor as part of the message. But
          all of them start with the <quote>#</quote> symbol that says that it
          will be ignored. Git places them there just in case you want to
          include any of them, and saves you the time to type it (as the last
          line in the example)
        </para>

        <para>
          If you create a new file, Git ignores its presence and is listed as
          <emphasis>untracked</emphasis>. If you want that file to be part of
          the versions managed by Git you must include it explicitly with the
          command <command moreinfo="none">git add &lt;filename&gt;</command>. This command also
          includes the new file in the index. The next time you commit your
          changes, the file will be considered by Git. After adding a file you
          may check the status of your working files with the command
          <command moreinfo="none">git status</command>.
        </para>

        <para>
          Sometimes, but only sometimes, you've modified lots of files, and
          instead of creating a new version with all the changes, you would
          like to document the changes separately by grouping some files. For
          example, you made two clearly identified changes. One in files
          <filename moreinfo="none">f1</filename> and <filename moreinfo="none">f2</filename>, and the second
          in files <filename moreinfo="none">f3</filename> and <filename moreinfo="none">f4</filename>. The
          command <command moreinfo="none">git commit -a</command> will send the new versions
          of all four files to the repository, but you would like to send the
          first two with a message and the second two with another message in
          separated commits.
        </para>

        <para>
          This is precisely the purpose of the index! The index is this
          fictitious box in which files are prepared and packed to be sent to
          the local repository. By using the command <command moreinfo="none">git add
          &lt;filenames&gt;</command>, you can place the files you want in the
          index. Once you have the right files, run the command <command moreinfo="none">git
          commit</command> (without the <command moreinfo="none">-a</command> option!) and the
          files in the index, and only them, are sent to the repository. No
          other changes in your local files are considered and the index
          appears now as empty. You can then proceed to place in the index the
          second set of files and execute the second commit.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="gittrackedfiles">
      <question>
        <para>What files should be added into the Git repository?</para>
      </question>
      <answer>
        <para>
          Source code management tools, like Git, are designed to
          track <emphasis>source files</emphasis>.
          Files produced automatically by compilers, stylesheets,
          image transformation programs, etc. should not be tracked.
        </para>
        <para>
          This does not mean that untracked files cannot be inside
          your working directory, they can, but just that they
          should not be added
          into the Git repository. Do not worry about having them in
          your  working directory, because only files that are
          added explicitly with the <command moreinfo="none">git add &lt;filename&gt;</command>
          command are tracked by Git. Be careful when you add
          a directory with <command moreinfo="none">git add</command>, because it
          adds all the files inside it into the repository.
          If there are files in that directory that should not be
          added, it is better to list the files to be added explicitly.
        </para>
        <para>
          In the case of ADA, add into the Git repository your Docbook source
          files, your figures in the vector format produced by your
          favorite drawing program (normally SVG files), configuration files
          like <filename moreinfo="none">Properties.txt</filename> and
          <filename moreinfo="none">Params.xml</filename> and, in general, any other resources
          that are not generated automatically by ADA.
        </para>
        <para>
          In general, do not include into the Git repository
          files like PDFs and HTMLs
          produced from Docbook or LaTex sources,
          PNG images produced from SVG figures, the backup files
          that are saved by some editors, etc.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="gitcommitlocal">
      <question>
        <para>
          I have just committed some changes, why are they not visible in the
          shared repository?
        </para>
      </question>
      <answer>
        <para>
          When you commit changes, they are only stored in your local
          repository. Remember, you own your repository. If you want those
          changes to be stored also in the shared repository, you have to
          explicitly send them (or push them!) to that repository after
          committing. See <xref linkend="gitpush"/> for further explanation.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="gitpull" xreflabel="How to update your local repository with others' changes">
      <question>
        <para>
          How do I update my local repository to see the latest changes
          published on the course shared repository?
        </para>
      </question>

      <answer>
        <para>
          Make sure your are placed in your <command moreinfo="none">master</command> branch
          and type the command:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git pull</command></programlisting>

        <para>
          If there have been any changes in the course repository (ore more
          precisely in its <command moreinfo="none">master</command> branch) they are now
          included in your repository.
        </para>

        <para>
          The <command moreinfo="none">pull</command> can only be executed if your index is
          empty. Remember that empty box in <xref linkend="gitwhatis"/>? To
          make sure you have no pending changes, commit them before executing
          <command moreinfo="none">git pull</command>.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="gitpush" xreflabel="How to send changes to the shared repository">
      <question>
        <para>
          How do I send the changes in my local repository to the shared
          repository?
        </para>
        <para>
          I have created some cool resources and they are committed into my
          local repository, and now I want to share them with the rest of
          authors.  How do I upload the new files to the shared repository?
        </para>
      </question>

      <answer>
        <para>
          If your changes have been committed into your the
          <command moreinfo="none">master</command> branch and you have set-up your local
          repository following the instructions in <xref linkend="gitclone"/>,
          you just have to execute:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git push</command></programlisting>

        <para>
          Your changes should be now on your branch in the
          shared repository. If your modifications are ready to
          be reviewed by the course coordinator,
          you may tell her that there are new contents there.
          The course coordinator will review them and,
          if they are all right, put them into the official branch.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="git_author_triangle_flow" xreflabel="How to exchange files with the shared repository">
      <question>
        <para>
          I got a clone of the shared repository and know a few commands. How
          is the interaction then taking place?
        </para>

        <para>
          After cloning, and modified files, I sent the new version to my
          local repository, I <quote>pulled</quote> new versions from the
          shared repository and I see how new files appear/dissapear/change,
          and I even <quote>pushed</quote> some changes of my own to that
          repository, can I see the big picture now?
        </para>
      </question>

      <answer>
        <para>
          The proposed workflow (there are many others possible) is
          illustrated in the following figure.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/GitAuthorTriangle.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Git/Author interaction triangle</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>

        <para>
          You initiated the process by cloning the shared repository (see
          <xref linkend="gitclone"/>), then modified your own files and first
          committed those new versions to your local repository (see <xref linkend="gitclone"/>), once these changes were ready to be shared
          you pushed them to the shared repository (see <xref linkend="gitpush"/>) and where stored in a different branch
          specially reserved for your changes. Somebody else, after inspecting
          (or not) your changes, took them and promoted them to the master
          branch by a <quote>merge</quote> operation. If any other file has
          changed in the shared repository, you may pull them (see <xref linkend="gitpull"/>.
        </para>

        <para>
          So, a hypothetical sequence of commands in your regular day to day
          work as an author would be:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git pull</command> # (Get the latest files)
... Work on your material and produce really cool stuff ...
$ <command moreinfo="none">git add &lt;new files&gt;</command> # (Some new files need to be added)
$ <command moreinfo="none">git commit (-a)</command> # (I'm done, store the changes locally)
... Go home/coffee up/take a nap/Lunch/Phone/ whatever
... Work on your material and modify it again ...
$ <command moreinfo="none">git commit (-a)</command> # (I'm done with this other set of changes)
$ <command moreinfo="none">git push</command> # (Ready for prime time. Send it to the shared repository)
... Notify the coordinator that there is new stuff ready ...
... Wait for any comments ...
$ <command moreinfo="none">git pull</command> # (Get the latest files again)
...</programlisting>
      </answer>
    </qandaentry>

  </qandaset>
</section>






  <section id="Git_for_course_coordinator" xreflabel="Top of the Section">
  <title>Using Git as a course coordinator with ADA</title>

  <qandaset>
    <qandaentry id="git-admin-shared-repo" xreflabel="How to set-up the shared repository">
      <question>
        <para>
          I am a course coordinator. How do I set-up the shared repository?
        </para>
      </question>
      <answer>
        <para>
          You need first some account or location which is accessible to the
          rest of authors. It will be assumed that you have such
          account. Enter in the course account and decide where you want to
          put the shared repository. It can be anywhere, but remember not to
          put it in a place served by a Web server if you want your repository
          not to be public. Once you have created a directory for the
          repository (named, for example, <filename moreinfo="none">material</filename>),
          enter into this directory and type:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git init</command></programlisting>

        <para>
          The <filename moreinfo="none">material</filename> directory is now a Git repository
          placed on branch <command moreinfo="none">master</command>, with no content. This
          will be the official branch of the shared course repository. It
          means that whatever files are on that branch, they are taken as the
          official versions.
        </para>

        <para>
          Create the initial layout for your course (directories, common
          files, etc.) and commit your changes.  The command <command moreinfo="none">git
          add</command> will be useful to include files in the version control
          mechanism (see <xref linkend="gitcommit"/>). Remember that Git does
          not handle empty directories. Therefore, if you create directories
          with no material , you may want to create an initial version of
          <filename moreinfo="none">Properties.txt</filename> inside that directory and add it
          at the set of files controlled by Git.
        </para>

        <para>
          After you have finished your initial layout and committed it, create
          a new branch for each contributing author:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git branch john</command>
$ <command moreinfo="none">git branch mary</command>
$ <command moreinfo="none">git branch laura</command>
$ <command moreinfo="none">git branch peter</command></programlisting>

        <para>
          There is no need to create all the required branches in advance. You
          may create additional branches whenever new authors are considered.
        </para>

        <para>
          The shared repository is now ready. Tell the authors the basic
          parameters to access it (remote machine they should connect to, name
          of the course account, location of the repository in the course
          account, and their author branch name).
        </para>

        <para>
          There are several ways you may interact with this repository. One of
          them could be to keep a clone of this repository in your local
          workspace. Follow the instructions in <xref linkend="gitclone"/>
          and obtain such clone. One possible workflow produces all the
          changes in the <command moreinfo="none">master</command> branch in your local
          repository and push the changes into the <command moreinfo="none">master</command>
          branch of the shared repository when it is ready to be made
          public. For more detailed instructions on how to manage all the
          changes, follow the instructions in <xref linkend="git-admin-clone"/>.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="git-admin-clone" xreflabel="How the coordinator clones the shared repository">
      <question>
        <para>I am a course coordinator. How do I set-up my local
          repository?
        </para>
      </question>
      <answer>
        <para>
          We recommend you to create a clone of the shared repository in your
          own workspace (probably your laptop or desktop computer).  Follow
          the instructions in <xref linkend="gitclone"/> to create your
          repository and set-up your branch <command moreinfo="none">master</command>, with
          the exception that the line you should add to your
          <filename moreinfo="none">.git/config</filename> file which in your case is
          <command moreinfo="none">push = master:master</command>:
        </para>

<programlisting format="linespecific">$ <command moreinfo="none">cat .git/config</command>
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote "origin"]
        url = ssh://YourLogin@accounts.example.com/home/mycourse/repository/material
        fetch = +refs/heads/*:refs/remotes/origin/*
        <command moreinfo="none">push = master:master</command>
[branch "master"]
        remote = origin
        merge = refs/heads/master</programlisting>

        <para>
          This change is because your <command moreinfo="none">master</command> branch in your
          local repository will be the branch where you prepare the official
          material that other authors will see after you push the changes into
          the <command moreinfo="none">master</command> branch of the shared repository.
        </para>

        <para>
          Your main role as the course coordinator is to supervise the changes
          proposed by your team of authors and incorporate them to the
          official <command moreinfo="none">master</command> branch of the shared
          repository. But in order to do that, you have to access to the
          contributions of all the authors. To perform such task replicate in
          your local repository the author branches in the shared
          repository. For example:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git branch --track john origin/john</command>
$ <command moreinfo="none">git branch --track mary origin/mary</command>
$ <command moreinfo="none">git branch --track laura origin/laura</command>
$ <command moreinfo="none">git branch --track peter origin/peter</command></programlisting>

        <para>
          Your local repository is now prepared for merging contributions from
          other authors. Don't worry, the merging will be done with the help
          of Git which is really good at it. If you happen to be not only the
          course coordinator but also an author, then it is recommended to
          have your own local branch to do such changes and then merge them
          into the <command moreinfo="none">master</command> branch. A typical sequence when
          you have changes and you want them to be included in the master
          branch is:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git checkout master</command>
$ <command moreinfo="none">git checkout -b new-calendar</command>
... edit ... commit ... edit ... commit ...
$ <command moreinfo="none">git checkout master</command>
$ <command moreinfo="none">git merge new-calendar</command>
$ <command moreinfo="none">git branch -d new-calendar</command></programlisting>

        <para>
          The command <command moreinfo="none">git checkout -b</command> creates a new branch
          starting from the current branch (<command moreinfo="none">master</command> in this
          case). After you have edited and committed (probably several
          commits), you can merge those changes into the official branch with
          <command moreinfo="none">git merge</command>. Finally, you can safely remove the
          temporary branch with <command moreinfo="none">git branch -d</command>.  If you plan
          to do further changes in the short-term about the same topic, you
          can skip the last step, and reuse the branch.
        </para>
      </answer>


    </qandaentry>

    <qandaentry id="git-admin-merge" xreflabel="How to merge contributions from authors">
      <question>
        <para>
          I am a course coordinator. How do I merge contents from authors into
          the official course branch?
        </para>
      </question>
      <answer>
        <para>
          Merging is probably the most delicate of the steps, but Git gives
          you a lot of flexibility to perform this operation. As with the rest
          of the proposed workflow, there are multiple alterntives for merging
          contributions from a set of authors, but a concrete one is explained
          here.
        </para>

        <para>
          You should have created a local repository and you have your
          <command moreinfo="none">master</command> branch as well as one branch per
          author. If you are not at this point, stop right here and go back to
          <xref linkend="git-admin-clone"/>.
        </para>

        <para>
          Suppose you want to merge some changes introduced by Mary. She
          should have pushed her changes into the <command moreinfo="none">mary</command>
          branch in the shared repository.  Go to your <command moreinfo="none">mary</command>
          local branch and update it (that is, fetch those changes from the
          shared repository):
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git checkout mary</command>
$ <command moreinfo="none">git pull</command></programlisting>

        <para>
          The first command places you in the branch assigned to Mary, the
          second, as the name says, <quote>pulls</quote> those changes to your
          local copy of such branch. You may review them and take a look at
          the history of commits performed by Mary with <command moreinfo="none">git
          log</command>. If you see no problems and the changes are good to be
          incorporated to the official branch, it is time then to
          <emphasis>merge</emphasis> her changes into the
          <command moreinfo="none">master</command> branch (if you are not happy with the
          changes ask Mary to fix the problems). In order to merge
          <emphasis>into</emphasis> the master branch, you need to change to
          such branch:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git checkout master</command>
$ <command moreinfo="none">git merge mary</command></programlisting>

        <para>
          The changes of Mary should now be available in your local
          <command moreinfo="none">master</command> branch. Since this is the official source
          of material for the entire course, make sure the material is built
          correctly with <command moreinfo="none">adado</command>. If you need to fix details,
          you may do so and commit the changes normally to your local
          repository. So far, no change has left your local repository to the
          shared one. Once you are finished with the modifications and see the
          material perfectly stable again, you want them to be in the official
          branch of the shared repository, available for all the authors. It
          is time then to push these changes:
        </para>

        <programlisting format="linespecific">$ <command moreinfo="none">git push</command></programlisting>

        <para>
          Authors will now be able to obtain these changes the next time they
          execute <command moreinfo="none">git pull</command> from their local repository.
        </para>


        <para>
          If you made it to this point, and you went several times around this
          loop of pulling changes, review them and pushing them to the shared
          repository, you are ready to explore a bit deeper what Git is
          capable of doing. The commands in this FAQ are just a small subset
          of the real functionality.
        </para>
      </answer>
    </qandaentry>
  </qandaset>
</section>






  <section id="Exercises_to_submit" xreflabel="Top of the Section">
  <title>Typesetting Exercises to be Submitted</title>


  <qandaset>
    <qandaentry id="exercise_submit" xreflabel="How to create a document with answers to sumit">
      <question>
        <para>How to create a document with answers to be submitted?</para>
      </question>

      <answer>
        <para>Creating a HTML document with one or several exercises can be
        easily done with the rules presented in the previous sections (see <xref linkend="docbook_processing"/>, for example). But in some cases, certain
        activities require more than one document and more importantly, the
        possibility of interfacing the documents with other platforms to submit
        answers, automatic grading, etc.</para>

        <para>ADA offers the possibility of preparing a set of files around the
        concept of <quote>exercise</quote>. The scenario that is assumed is the
        following:</para>

        <itemizedlist>
          <listitem>
            <para>The exercise needs one or more documents given to the students
            describing the steps to obtain the answers. This document will be
            referred to as the <quote>hand out</quote> (see <xref linkend="exercise_handout"/> for more details).
            </para>
          </listitem>
          <listitem>
            <para>A second document, similar to the previous one but including
            the solutions. It could be used for publication at a later stage,
            for the teaching staff to have during class, etc. This document will
            be referred to as the <quote>solutions</quote> (see <xref linkend="exercise_solution"/> for more details).
            </para>
          </listitem>
          <listitem>
            <para>A third document explicitly oriented only to the teaching
            staff including descriptions of the tasks to perform, comments,
            evaluation criteria, etc. This document is concieved such that it
            never is shown to the students and thus will be referred as the
            <quote>professor guide</quote> (see <xref linkend="exercise_professorguide"/> for more details).
            </para>
          </listitem>
          <listitem>
            <para>An additional HTML page to submit the answers through a web
            form. The elements to submit are derived from the included
            exercises. The assumption is that the exercise, and the instructions
            of what to submit are kept together. When combining several
            exercises, the submission form contains the instructions (fields,
            labels, etc.) of the exercises. This document will be referred to as
            the <quote>submission page</quote> (see <xref linkend="exercise_submission"/> for more details).</para>
          </listitem>
          <listitem>
            <para>Additional functionality to include in the documents
            previously described such as a fixed set of fields in the submission
            page (name, id, email, etc), a countdown to the dealine in the
            hand-out and submission documents, a link to the evaluation
            criteria, etc.</para>
          </listitem>
        </itemizedlist>

        <para>The variables used in the previously described scenario suitable
        to be defined in the <filename moreinfo="none">Properties.txt</filename> are:</para>

        <informaltable frame="all" id="exercisesubmit.processing_vars" xml:base="VarTables/ExerciseSubmit_vars.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>exercisesubmit.debug.level</varname>
        </entry>
        <entry>Debug level to apply to these rules (see ada.debug.level)</entry>
        <entry>${ada.debug.level}</entry>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.src.dir</varname>
        </entry>
        <entry>Directory where the sources are taken</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.dst.dir</varname>
        </entry>
        <entry>Directory where the produced files are created</entry>
        <entry>${basedir}</entry>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.style.file</varname>
        </entry>
        <entry>Stylesheet to obtain hand-out, solutions and professor guide</entry>
        <entry>${ada.home}/ADA_Styles/ExerciseSubmit.xsl</entry>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.submit.style.file</varname>
        </entry>
        <entry>Stylesheet to apply to the submission page</entry>
        <entry>${ada.home}/ADA_Styles/Submit.xsl</entry>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.extra.args</varname>
        </entry>
        <entry>Extra options to pass to the XSLT processor</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.output.format</varname>
        </entry>
        <entry>Output file has the same name as the source but the extension is replaced
by this value</entry>
        <entry>.html</entry>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.files</varname>
        </entry>
        <entry>Source file names (no path, it is exercisesubmit.src.dir)</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.multilingual.files</varname>
        </entry>
        <entry>Source file names (no path) to process in  multilingual mode</entry>
        <entry/>
      </row>
      <row>
        <entry>
          <varname>mergestyles.master.style</varname>
        </entry>
        <entry>An additional stylesheet to combine with xsltproc.style.file</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>When used, this rule creates the previously described documents:
        hand-out, solutions, professor guide and submission page. Two stylesheet
        files are specified. The variable
        <varname>exercisesubmit.style.file</varname> is used to produce the hand
        out, solutions and professor guide document. The variable
        <varname>exercisesubmit.submit.style.file</varname> is used to obtain
        the submission page. Multilingual versions of all these documents can be
        produced using the
        <varname>exercisesubmit.multilingual.files</varname>.</para>
      </answer>
    </qandaentry>

    <qandaentry id="exercise_handout" xreflabel="How to produce the hand-out document of an exercise">
      <question>
        <para>How to customize the hand-out document of an exercise
        document?</para>
      </question>
      <answer>
        <para>The structure of the hand-out document is similar to the one
        obtained when using the stylesheet <filename moreinfo="none">HeadTail.xsl</filename>
        (see <xref linkend="headtail_pararms"/> for more details). The additional
        variables to control the the style are:</para>

        <informaltable frame="all" id="_vars" xml:base="ParamTables/ExerciseSubmitParams_description.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>exercisesubmit.include.toc</varname>
        </entry>
        <entry>Yes/no variable to include a TOC a the top of the page</entry>
        <entry>yes</entry>
      </row>
      <row>
        <entry>
          <varname>exercisesubmit.submission.page.url</varname>
        </entry>
        <entry>URL to the submission page (if not given, taken from the XML)</entry>
        <entry/>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>For example, let us consider <ulink url="Samples/ExerciseSubmit/index.xml">a XML file</ulink> that contains
        two exercises. With the following definitions in the <ulink url="Samples/ExerciseSubmit/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink>:</para>

        <programlisting format="linespecific">mergestyles.master.style=Params.xml

exercisesubmit.files=index.xml
</programlisting>

        <para>and some customization definitions in the <ulink url="Samples/ExerciseSubmit/Params.xml"><filename moreinfo="none">Params.xml</filename>
        file</ulink>, the <ulink url="Samples/ExerciseSubmit/index.html">resulting handout
        document</ulink> has the appearance shown in the following
        figure:</para>

        <informaltable frame="all" id="exercise_handout_capture">
          <tgroup rowsep="1" colsep="1" cols="1">
            <colspec colnum="1" colname="col1" align="left"/>
            <tbody>
              <row>
                <entry>
                  <informalfigure float="0">
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="Samples/ExerciseSubmit/Index.png" format="PNG"/>
                      </imageobject>
                      <textobject>
                        <phrase>Exercise hand out document</phrase>
                      </textobject>
                    </mediaobject>
                  </informalfigure>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </answer>
    </qandaentry>

    <qandaentry id="exercise_solution" xreflabel="How to produce the solution of an exercise document">
      <question>
        <para>How to produce the solution of an exercise document?</para>
      </question>
      <answer>
        <para>The solution document is conceived as a document that has entirely
        the same text as the hand out but extended with annotations containing
        the solution to the posed questions. These annotations can be placed at
        only three levels of the document: section, note and phrase.</para>

        <para>To include the solution information inside a section, the
        attribute <code>condition</code> must be present in this element with
        the value <code>solution</code>. The section with this attribute is
        ignored when processing the hand out document and considered when
        processing the solution document.</para>

        <para>The inclusion of the solution information in a <code>note</code>
        element is similar to the previous one but this element is intended to
        be included at a lower level within the document (for example, inside an
        entry in a table, between two paragraphs, in a list, etc.) The presence
        of the <code>condition</code> attribute with value <code>solution</code>
        has the same effect than in the case of the <code>section</code> element
        previously described.</para>

        <para>The third method to include the solution information is to place
        it in the middle of regular text. By using the <code>phrase</code>
        element with the attribute <code>condition</code> equal to the value
        <code>solution</code>, small text strings can be interspersed through in
        the middle of a paragraph.</para>

        <para>For example, let us consider <ulink url="Samples/ExerciseSubmit/index.xml">a XML file</ulink> that contains
        two exercises with the information about the solutions. With the
        following definitions in the <ulink url="Samples/ExerciseSubmit/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink>:</para>

        <programlisting format="linespecific">mergestyles.master.style=Params.xml

exercisesubmit.files=index.xml
</programlisting>

        <para>and some customization definitions in the <ulink url="Samples/ExerciseSubmit/Params.xml"><filename moreinfo="none">Params.xml</filename>
        file</ulink>, the <ulink url="Samples/ExerciseSubmit/index_solution.html">resulting solution
        document</ulink> has the appearance shown in the following
        figure:</para>

        <informaltable frame="all" id="exercise_solution_capture">
          <tgroup rowsep="1" colsep="1" cols="1">
            <colspec colnum="1" colname="col1" align="left"/>
            <tbody>
              <row>
                <entry>
                  <informalfigure float="0">
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="Samples/ExerciseSubmit/Index_solution.png" format="PNG"/>
                      </imageobject>
                      <textobject>
                        <phrase>Exercise document with solutions</phrase>
                      </textobject>
                    </mediaobject>
                  </informalfigure>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>The presence or absence of the solution information is controlled
        by the following style parameter:</para>

        <informaltable frame="all" id="_vars" xml:base="ParamTables/SolutionSection_description.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>solutions.include.guide</varname>
        </entry>
        <entry>yes/no variable to show the solution in the document</entry>
        <entry>'no'</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>The rule to generate the solution document invokes the proper
        style sheet changing the value of this variable to
        <quote>yes</quote>.</para>
      </answer>
    </qandaentry>

    <qandaentry id="exercise_professorguide" xreflabel="How to produce the professor guide of an exercise       document">
      <question>
        <para>How to produce the professor guide of an exercise document?</para>
      </question>
      <answer>
        <para>The document called the <quote>professor guide</quote> is intended
        for the use of the teaching staff. It includes the solution information
        and special annotations and remarks not to be seen by the students. Two
        elements are prepared to encapsulate these comments: <code>note</code>
        and <code>section</code>. In both cases, the <code>condition</code>
        attribute must have the value <code>professorguide</code>.</para>

        <para>For example, let us consider <ulink url="Samples/ExerciseSubmit/index.xml">a XML file</ulink> that contains
        two exercises with the information to include in the professor
        guide. With the following definitions in the <ulink url="Samples/ExerciseSubmit/Properties.txt"><filename moreinfo="none">Properties.txt</filename>
        file</ulink>:</para>

        <programlisting format="linespecific">mergestyles.master.style=Params.xml

exercisesubmit.files=index.xml
</programlisting>

        <para>and some customization definitions in the <ulink url="Samples/ExerciseSubmit/Params.xml"><filename moreinfo="none">Params.xml</filename>
        file</ulink>, the <ulink url="Samples/ExerciseSubmit/index_pguide.html">resulting solution
        document</ulink> has the appearance shown in the following
        figure:</para>

        <informaltable frame="all" id="exercise_pguide_capture">
          <tgroup rowsep="1" colsep="1" cols="1">
            <colspec colnum="1" colname="col1" align="left"/>
            <tbody>
              <row>
                <entry>
                  <informalfigure float="0">
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="Samples/ExerciseSubmit/Index_pguide.png" format="PNG"/>
                      </imageobject>
                      <textobject>
                        <phrase>Exercise document with the professor guide</phrase>
                      </textobject>
                    </mediaobject>
                  </informalfigure>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>The presence or absence of the professor guide information is
        controlled by the following style parameter:</para>

        <informaltable frame="all" id="_vars" xml:base="ParamTables/PguideSection_description.xml">
  <tgroup rowsep="1" colsep="1" cols="3">
    <colspec colnum="1" colname="col1" align="left"/>
    <colspec colnum="2" colname="col2" align="left"/>
    <colspec colnum="3" colname="col3" align="center"/>
    <thead>
      <row>
        <entry align="center">Name</entry>
        <entry align="center">Description</entry>
        <entry align="center">Default value</entry>
      </row>
    </thead>
    <tbody>
      <row>
        <entry>
          <varname>professorguide.include.guide</varname>
        </entry>
        <entry>yes/no variable to show the professor guide info</entry>
        <entry>'no'</entry>
      </row>
    </tbody>
  </tgroup>
</informaltable>

        <para>The rule to generate the professor guide document invokes the
        proper style sheet changing the value of this variable to
        <quote>yes</quote>.</para>
      </answer>
    </qandaentry>

    <qandaentry id="exercise_submission" xreflabel="How to produce the submission page of an exercise document">
      <question>
        <para>How to produce the submission page of an exercise document?</para>
      </question>
      <answer>
        <para/>
      </answer>
    </qandaentry>
  </qandaset>
</section>






  <section id="Typesetting_exams" xreflabel="Top of the Section">
  <title>Typesetting exams with ADA</title>

  <qandaset>
    <qandaentry id="Ada_and_exam_typesetting">
      <question>
        <para>
          How does ADA support exam typesetting?
        </para>
      </question>
      <answer>
        <para>
          ADA includes a set of stylesheets to transform a Docbook document
          with certain special elements into an HTML document with the
          appearance of an exam. As with the rest of styles in ADA, some
          elements are parameters and therefore can be easily
          customized. Alternatively, you may use this style as the basis
          for your own customized style.
        </para>

        <para>
          There are two sets of variables and rules depending on the type of
          exam.  If an exam contains a set of questions that need to be
          shuffled and two versions be produced, then the variables with the
          prefix <varname>testexam</varname> are used. If the exam is simply a set
          of exercises and no shuffle is required, then the varaiables with
          the prefix <varname>exam</varname> are required. In the same
          directory, two exams, one of each type may coexist.
        </para>

        <para>
          The variables that can be included in the
          <filename moreinfo="none">Properties.txt</filename> file are:
        </para>

        <informaltable frame="all" id="exam_vars">
          <tgroup rowsep="1" colsep="1" cols="3">
            <colspec colnum="1" colname="col1" align="left"/>
            <colspec colnum="2" colname="col2" align="left"/>
            <colspec colnum="3" colname="col3" align="center"/>
            <thead>
              <row>
                <entry align="center">Variable name</entry>
                <entry align="center">Description</entry>
                <entry align="center">Default</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <varname>testexam.src.dir</varname> or
                  <varname>exam.src.dir</varname>
                </entry>
                <entry>
                  Directory from where to obtain the source file for the test
                  exam.
                </entry>
                <entry>Current directory</entry>
              </row>
              <row>
                <entry>
                  <varname>testexam.file</varname> or
                  <varname>exam.file</varname>
                </entry>
                <entry>
                  File containing the exam to be processed.
                </entry>
                <entry/>
              </row>
              <row>
                <entry>
                  <varname>testexam.bilingual.file</varname> or
                  <varname>exam.bilingual.file</varname>
                </entry>
                <entry>
                  File containing the exam to be processed in bilingual mode,
                  that is, an English version and a Spanish version. Note that
                  one and only one bilingual or non-bilingual file can be
                  specified as source. Any combination between Test exam or
                  regular exam is allowed.
                </entry>
                <entry/>
              </row>
              <row>
                <entry>
                  <varname>testexam.dst.dir</varname> or
                  <varname>exam.dst.dir</varname>
                </entry>
                <entry>Directory where the new files are created.</entry>
                <entry>Current directory</entry>
              </row>
              <row>
                <entry>
                  <varname>testexam.equation.dir</varname> or
                  <varname>exam.equation.dir</varname>
                </entry>
                <entry>
                  Directory where the auxliary files to render equations are
                  pcreated
                </entry>
                <entry>
                  Value of <varname>testexam.src.dir</varname> or
                  <varname>exam.src.dir</varname>
                </entry>
              </row>
              <row>
                <entry>
                  <varname>testexam.output.format</varname> or
                  <varname>exam.output.format</varname>
                </entry>
                <entry>
                  The resulting HTML files are created with this extension.
                </entry>
                <entry><filename moreinfo="none">.html</filename></entry>
              </row>
              <row>
                <entry>
                  <varname>testexam.style.file</varname> or
                  <varname>exam.style.file</varname>
                </entry>
                <entry>
                  Stylesheet to apply to the source file.
                </entry>
                <entry>Installed Exam Stylesheet</entry>
              </row>
              <row>
                <entry>
                  <varname>testexam.extra.args</varname> or
                  <varname>exam.extra.args</varname>
                </entry>
                <entry>
                  Additional options to pass directly to <command moreinfo="none">xsltproc</command>.
                </entry>
                <entry/>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>
          You main check the content of the following samples of the
          <filename moreinfo="none">Properties.txt</filename> file to:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <ulink url="Samples/TestExam/Properties.txt">Create a True/False
              or Multiple Choice test exam</ulink>
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="Samples/TestExamBL/Properties.txt">Create a
              True/False or Multiple Choice bilingual test exam</ulink>
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="Samples/Exam/Properties.txt">Create a regular
              exam</ulink> (No T/F or Multiple choice questions)
            </para>
          </listitem>
          <listitem>
            <para>
              <ulink url="Samples/ExamBL/Properties.txt">Create a regular
              bilingual exam</ulink>  (No T/F or Multiple choice questions)
            </para>
          </listitem>
        </itemizedlist>
      </answer>
    </qandaentry>

    <qandaentry id="ada_exam_elements_parameterized" xreflabel="How to produce the exam heading">
      <question>
        <para>
          How to produce the exam heading?
        </para>
      </question>

      <answer>
        <para>
          The stylesheet needs certain special elements and parameters to
          generate the exam heading. Furthermore, certain special elements
          may be included in the Docbook source document to produce additional
          elements in the HTML version. The customization then is achieved by
          using both mechanisms: parameters and elements in the document. The
          following figure shows an exam in which all the customizable parts
          have been substituted by the parameter names or the element to
          include in the source document.
        </para>

        <informaltable frame="all">
          <tgroup rowsep="1" colsep="1" cols="1">
            <colspec colnum="1" colname="col1" align="center"/>
            <tbody>
              <row>
                <entry>
                  <para>
                    <informalfigure float="0">
                      <mediaobject>
                        <imageobject>
                          <imagedata fileref="Samples/Exam/ExamCapture.png" format="PNG"/>
                        </imageobject>
                        <textobject>
                          <phrase>
                            Sample of exam heading with stylesheet parameters
                          </phrase>
                        </textobject>
                      </mediaobject>
                    </informalfigure>
                  </para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>

        <para>
          The <ulink url="Samples/Exam/Test.xml">docbook source document to
          create an exam like the one shown in the previous figure</ulink>
          must have a &lt;section&gt; element as root. The content of this
          section together with the values of the parameters are used to
          produce the HTML file.
        </para>

        <para>
          Additional parameters available for customization but not shown in
          the figure are:
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <varname>ada.exam.fontfamily</varname>: Font family used in the
              HTML head section (default to Verdana).
            </para>
          </listitem>
          <listitem>
            <para>
              <varname>ada.exam.fontsize</varname>: Font size used in the
              HTML head section (default to 10pt).
            </para>
          </listitem>
          <listitem>
            <para>
              <varname>ada.exam.render.separate.cover</varname>: Boolean to
              force a pagebreak after the exam cover (if value is
              <quote>yes</quote>), or include the exam content right after the
              head (any value different from <quote>yes</quote>.
            </para>
          </listitem>
          <listitem>
            <para>
              <varname>ada.exam.author</varname>: Author name to include in the
              HTML head section.
            </para>
          </listitem>
          <listitem>
            <para>
              <varname>ada.exam.include.id</varname>: Boolean to control the
              inclusion of an ID identifying the exam right below the
              <quote>part</quote> variable in the version including the
              solutions. The parameter takes values <quote>yes/no</quote>, and
              the value shown in the HTML document is taken from the
              <command moreinfo="none">status</command> attribute given in the root
              <command moreinfo="none">section</command> element.
            </para>
          </listitem>
        </itemizedlist>

        <para>
          The generic structure of a Docbook file to render with the exam
          heading would be something similar to (see also the <ulink url="Samples/Exam/Test.xml">Docbook source file used to create the
          exam in the previous figure</ulink>):
        </para>

        <programlisting format="linespecific">&lt;section lang="en" id="ExamID"&gt;

  &lt;title&gt;Title to insert in the HTML head&lt;/title&gt;
  &lt;para condition="part"&gt;Problems&lt;/para&gt;

  &lt;para condition="duration"&gt;1 hour and 15 minutes&lt;/para&gt;
  &lt;para condition="scoring"&gt;50 points over 100&lt;/para&gt;
  &lt;para condition="date"&gt;May 16th, 2008 at 16:30&lt;/para&gt;

  &lt;para condition="note"&gt;
    The rules for the exam are...
  &lt;/para&gt;

  &lt;para condition="name"/&gt; &lt;!-- To include the name box --&gt;

  &lt;section&gt;
    &lt;title&gt;Section with the exercises (this title is ignored)&lt;/title&gt;
    &lt;section&gt;
      &lt;title&gt;This is the first exercise (this title is ignored)&lt;/title&gt;
      &lt;para&gt;
        Exam content. Either regular docbook describing a problem or a
        qandaset element with several qandaentry elements each of them
        containing one or several questions
      &lt;/para&gt;
    &lt;/section&gt;
    ...
  &lt;/section&gt;
&lt;/section&gt;</programlisting>

        <para>
          If the exam contains only true/false questions, the style includes a
          table with scoring data (number of correct, incorrect and empty
          answers as well as the final score) if the element <code>&lt;para
          condition="score"/&gt;</code> is included in the root
          <command moreinfo="none">section</command> element. The following figure shows the
          resulting box if the element is included.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="Samples/TestExam/ScoreRendering.png" format="PNG"/>
            </imageobject>
            <textobject><phrase>Box for scores</phrase></textobject>
          </mediaobject>
        </informalfigure>

        <para>
          The <ulink url="Samples/TestExam/Params.xml">file containing the
          parameter values</ulink> would have a structure similar to:
        </para>
        <programlisting format="linespecific">&lt;xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  xmlns="http://www.w3.org/1999/xhtml" version="1.0"&gt;

  &lt;xsl:param name="ada.exam.include.id" select="'no'"/&gt;
  &lt;xsl:param name="ada.exam.render.separate.cover" select="'yes'"/&gt;
  &lt;xsl:param name="ada.exam.author"&gt;Author that created the exam&lt;/xsl:param&gt;
  &lt;xsl:param name="ada.exam.topleft.image"&gt;Logo.png&lt;/xsl:param&gt;
  &lt;xsl:param name="ada.exam.topleft.image.alt"&gt;My Logo&lt;/xsl:param&gt;
  &lt;xsl:param name="ada.exam.topleft.toptext"&gt;The degree name&lt;/xsl:param&gt;
  &lt;xsl:param name="ada.exam.topleft.centertext"&gt;Course name&lt;/xsl:param&gt;
  &lt;xsl:param name="ada.exam.topleft.centertext.en"&gt;Date&lt;/xsl:param&gt;
  &lt;xsl:param name="ada.exam.topleft.bottomtext"&gt;Some other message&lt;/xsl:param&gt;
  ...
&lt;/xsl:stylesheet&gt;</programlisting>

        <para>
          See <xref linkend="modified_stylesheet"/> to see how the file
          containing these definitions is included in the
          <filename moreinfo="none">Properties.txt</filename> file
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="typeset_tf_questions" xreflabel="How to typeset a true/false question exam">
      <question>
        <para>
          How to typeset an exam with true/false questions?
        </para>
      </question>

      <answer>
        <para>
          Additionaly to producing an exam heading (see <xref linkend="ada_exam_elements_parameterized"/>) the ADA stylesheet is
          capable of detecting true/false questions with certain structure and
          produce two HTML documents with these questions shuffled.
        </para>

        <para>
          The questions must be described using the
          <command moreinfo="none">qandaentry</command> docbook element which is provided
          preciselly to mark the content of questions and answers.
        </para>

        <para>
          The following listing shows the content of a <ulink url="Samples/TestQuestions/TFQuestion.xml">Docbook file with the
          definition of a multiple choice question</ulink>:
        </para>

        <programlisting format="linespecific">&lt;qandadiv condition="TestQuestion" id="Question ID"&gt;
  &lt;blockinfo&gt;
    &lt;author&gt;
      &lt;personname&gt;
        &lt;firstname&gt;AuthorFirst&lt;/firstname&gt;&lt;surname&gt;AuthorLast&lt;/surname&gt;
      &lt;/personname&gt;
    &lt;/author&gt;
  &lt;/blockinfo&gt;
  &lt;para&gt;Any text preceding the (possible) multiple questions.&lt;/para&gt;
  &lt;qandaentry&gt;
    &lt;!-- Any text to precede the question --&gt;
    &lt;para&gt;
        Include here any Docbook subset introducing the first question.
    &lt;/para&gt;
    &lt;question&gt;
      &lt;para&gt;First Question text&lt;/para&gt;
    &lt;/question&gt;
    &lt;!-- Answer value as attribute --&gt;
    &lt;answer condition="False" /&gt;
  &lt;/qandaentry&gt;
  &lt;qandaentry&gt;
    &lt;!-- Any text to precede the question --&gt;
    &lt;para&gt;
        Include here any Docbook subset introducing the second question.
    &lt;/para&gt;
    &lt;question&gt;
      &lt;para&gt;Second question text&lt;/para&gt;
    &lt;/question&gt;
    &lt;!-- Answer value as attribute --&gt;
    &lt;answer condition="True" /&gt;
  &lt;/qandaentry&gt;
&lt;/qandadiv&gt;</programlisting>

        <para>
          The <command moreinfo="none">condition</command> attribute in the
          <command moreinfo="none">qandadiv</command> element with the value
          <command moreinfo="none">TestQuestion</command> is used to state the type of
          rendering to be used, in this case, two possible answers,
          <quote>True</quote> or <quote>False</quote>. The
          <command moreinfo="none">id</command> attribute can be used to uniquely identify
          questions in a catalog.
        </para>

        <para>
          The <command moreinfo="none">blockinfo</command> element is used to store some basic
          information about the question. Some additional elements can be
          included within this block as explained in <xref linkend="exam_handling_question_catalogs"/>. Following this element,
          an arbitrary Docbook fragment can be included. This is useful if,
          for example, a problem statement is followed by several related
          true/false questions. These questions need to be included in the
          same <command moreinfo="none">qandadiv</command> element. When shuffling questions,
          ADA shuffles independently the questions within this unit.
        </para>

        <para>
          After this optional portion, questions are each included inside a
          <command moreinfo="none">qandaentry</command>. This element may include again an
          arbitrary Docbook fragment to introduce the question, the question
          itself surrounded by the <command moreinfo="none">question</command> element and a
          signe <command moreinfo="none">answer</command>
          element with the <command moreinfo="none">condition</command> attribute equal to the
          correct answer. Acceptable true values are
          <quote>Correct</quote>, <quote>Correcto</quote>,
          <quote>True</quote>, and <quote>Cierto</quote>. Acceptable false values
          are <quote>Incorrect</quote>, <quote>Incorrecto</quote>,
          <quote>False</quote>, and <quote>Falso</quote>.
        </para>

        <para>
          The HTML obtained with the previously included Docbook structure is
          shown in the following figure.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="Samples/TestQuestions/TFRendering.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Sample of multiple choice question</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>
      </answer>
    </qandaentry>

    <qandaentry id="typeset_mc_questions" xreflabel="How to typeset a multiple choice question exam">
      <question>
        <para>
          How to typeset an exam with multiple choice
          questions?
        </para>
      </question>

      <answer>
        <para>
          Additionaly to producing an exam heading (see <xref linkend="ada_exam_elements_parameterized"/>) the ADA stylesheet is
          capable of detecting true/false and multiple choice questions with
          certain structure and produce two versions with these questions
          shuffled.
        </para>

        <para>
          The questions must be described using the
          <command moreinfo="none">qandaentry</command> docbook element which is provided
          preciselly to mark the content of questions and answers.
        </para>

        <para>
          The following listing shows the content of a <ulink url="Samples/TestQuestions/MCQuestion.xml">Docbook file with the
          definition of a multiple choice question</ulink>:
        </para>

        <programlisting format="linespecific">&lt;qandadiv condition="TestMCQuestion" id="Your own unique id"&gt;
  &lt;blockinfo&gt;   &lt;!-- Basic meta info for this question --&gt;
    &lt;author&gt;
      &lt;personname&gt;
        &lt;firstname&gt;AuthorName&lt;/firstname&gt;&lt;surname&gt;AuthorSurname&lt;/surname&gt;
      &lt;/personname&gt;
    &lt;/author&gt;
  &lt;/blockinfo&gt;
  &lt;para&gt;Any text preceding the (possible) multiple questions.&lt;/para&gt;
  &lt;qandaentry&gt;
    &lt;para&gt; &lt;!-- Any text to precede the question --&gt;
        Include here any Docbook subset introducing the questions
    &lt;/para&gt;
    &lt;question&gt;
      &lt;para&gt;Question text.&lt;/para&gt;
    &lt;/question&gt;
    &lt;!--
         Answer list. The correct one needs to include the condition attribute
         with value "Correct, True, Correcto or Cierto".
    --&gt;
    &lt;answer condition="Correct"&gt;&lt;para&gt;First answer&lt;/para&gt;&lt;/answer&gt;
    &lt;answer&gt;&lt;para&gt;Second answer&lt;/para&gt;&lt;/answer&gt;
    &lt;answer&gt;&lt;para&gt;Third answer&lt;/para&gt;&lt;/answer&gt;
    &lt;answer&gt;&lt;para&gt;Fourth answer&lt;/para&gt;&lt;/answer&gt;
  &lt;/qandaentry&gt;
&lt;/qandadiv&gt;</programlisting>

        <para>
          The <command moreinfo="none">condition</command> attribute with the value
          <command moreinfo="none">TestMCQuestion</command> attribute is used to state the
          type of rendering to be used, in this case, a set of possible answer
          with a white square on their left. The <command moreinfo="none">id</command>
          attribute can be used to uniquely identify questions in a wider
          catalog.
        </para>

        <para>
          The <command moreinfo="none">blockinfo</command> element is used to store some basic
          information about the question. Some additional elements can be
          included within this block as explained in <xref linkend="exam_handling_question_catalogs"/>. Following this element,
          an arbitrary Docbook fragment can be included. This is useful if,
          for example, a problem statement is followed by several related
          questions (see <xref linkend="typeset_tf_questions"/> for an
          example). These questions need to be included in the same
          <command moreinfo="none">qandadiv</command> element. When shuffling questions, ADA
          shuffles independently the questions within this unit.
        </para>

        <para>
          After this optional portion, questions are each included inside a
          <command moreinfo="none">qandaentry</command>. This element may include again an
          arbitrary Docbook fragment to introduce the question, the question
          itself surrounded by the <command moreinfo="none">question</command> element and the
          multiple answers surrounded by the <command moreinfo="none">answer</command>
          element. Correct answers are distinguished by the
          <command moreinfo="none">condition</command> attribute in the
          <command moreinfo="none">answer</command> element with one of the values
          <quote>Correct</quote>, <quote>Correcto</quote>, <quote>True</quote>
          or <quote>Cierto</quote>.
        </para>

        <para>
          The HTML obtained with the previously included Docbook structure is
          shown in the following figure.
        </para>

        <informalfigure float="0">
          <mediaobject>
            <imageobject>
              <imagedata fileref="Samples/TestQuestions/MCRendering.png" format="PNG"/>
            </imageobject>
            <textobject>
              <phrase>Sample of multiple choice question</phrase>
            </textobject>
          </mediaobject>
        </informalfigure>
      </answer>
    </qandaentry>

    <qandaentry id="exam_how_many_files_are_produced" xreflabel="How many files are produced when processing an                            exam">
      <question>
        <para>
          How many files are produced when processing the source file for an
          exam?
        </para>
      </question>

      <answer>
        <para>
          That depends on the type of exam being manipulated. If the exam
          contains a test (either variable <varname>testexam.file</varname> or
          <varname>testexam.bilingual.file</varname> are defined) then there
          are numerous extra files produced because of the shuffling
          mechanism. The following table summarizes the four possible
          scenarios when combined with single language file or bilingual file
          when processing an exam file with name
          <filename moreinfo="none">examfile.xml</filename> (the expression
          <code>foo_[a,b]</code> means that two files are produced,
          <filename moreinfo="none">foo_a</filename> and <filename moreinfo="none">foo_b</filename>).
        </para>

        <informaltable frame="all" id="exam_created_files">
          <tgroup rowsep="1" colsep="1" cols="3">
            <colspec colnum="1" colname="col1" align="left"/>
            <colspec colnum="2" colname="col2" align="left"/>
            <colspec colnum="3" colname="col3" align="left"/>
            <thead>
              <row>
                <entry align="center"/>
                <entry align="center">Test (T/F or Multiple Choice)</entry>
                <entry align="center">Regular Exam</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry role="rowhead" align="center">One language</entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[1,2].html</filename>: Two sets of
                        shuffled questions.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile.html</filename>: Questions in the
                        given order.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[1,2]_solution.html</filename>: Two
                        sets of shuffled questions with solutions.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[1,2]_stats.html</filename>: Two
                        sets of shuffled questions with solutions and
                        statistics (see <xref linkend="exam_keep_stats"/>)
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_stats.html</filename>: Questions
                        with solutions and statistics in the given order.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_raw.xml</filename>: File for ADA
                        internal use.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">tex-math-equations.*</filename>: Files to
                        support mathematical formulas. For ADA internal use.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">equations</filename>: Directory where
                        equations are stored as PNG files. For ADA internal use.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile.html</filename>: Exam as it is
                        supposed to be taken.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_solutions.html</filename>:
                        Exam including the solution.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_pguide.html</filename>: Exam with
                        solutions and annotations done by the teaching staff.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">tex-math-equations.*</filename>: Files to
                        support mathematical formulas. For ADA internal use.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">equations</filename>: Directory where
                        equations are stored as PNG files. For ADA internal use.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
              </row>
              <row>
                <entry role="rowhead" align="center">Bilingual</entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[1,2]_[en,es].html</filename>: Two
                        sets of shuffled questions in each language.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile.html</filename>: Questions in both
                        languages and the given order (for consistency
                        reviewing purposes).
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[1,2]_[en,es]_solution.html</filename>:
                        Two sets of shuffled questions with solutions in each
                        language.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_solutions.html</filename>:
                        Questions in both languages with the solutions in the
                        given order.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[1,2]_[en,es]_stats.html</filename>:
                        Two sets of shuffled questions in each language with
                        solutions and statistics (see <xref linkend="exam_keep_stats"/>)
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_stats.html</filename>: Questions in
                        both languages with solutions and statistics in the
                        given order.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_raw.xml</filename>: File for ADA
                        internal use.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">tex-math-equations.*</filename>: Files to
                        support mathematical formulas. For ADA internal use.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">equations</filename>: Directory where
                        equations are stored as PNG files. For ADA internal use.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
                <entry>
                  <itemizedlist>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[en,es].html</filename>: Two
                        versions of the exam, one in each language.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile.html</filename>: File with text in
                        both languages together (for consistency purposes).
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[en,es]_solution.html</filename>:
                        The exam including solutions in each language.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_solutions.html</filename>:
                        Text in both languages with the solutions.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_[en,es]_pguide.html</filename>:
                        Exam in each language including the solution and the
                        comments by the teaching staff.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">examfile_pguide.html</filename>: File with
                        text, solution and comments by the teaching staff in
                        both languages together.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">tex-math-equations.*</filename>: Files to
                        support mathematical formulas. For ADA internal use.
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <filename moreinfo="none">equations</filename>: Directory where
                        equations are stored as PNG files. For ADA internal use.
                      </para>
                    </listitem>
                  </itemizedlist>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable>
      </answer>
    </qandaentry>

    <qandaentry id="exam_handling_question_catalogs" xreflabel="How to select a subset of questions from a catalog">
      <question>
        <para>
          Is it possible to have a Docbook file that selects only a subset of
          questions from a catalog?
        </para>
      </question>
      <answer>
        <para>
          Although not a functionality provided by ADA, by combining questions
          encoded in Docbook with the possibility of including a fragment of
          a XML file into another (using <code>xinclude</code>), questions
          can be managed in large catalogs and select only a subset for a
          given exam.
        </para>

        <para>
          The idea is to centralize all the test questions created over the
          years into a single large Docbook file with the format explaned in
          <xref linkend="typeset_tf_questions"/> and <xref linkend="typeset_mc_questions"/>. When creating a new exam, a
          special set of questions can be selected by providing a set of
          identifiers. Two conditions are required to perform such operation:
          question sets need to have identifiers (aside from the unique
          question identifier stored in the <command moreinfo="none">id</command> attribute)
          and a mechanism to select from the file only those questions with a
          given identifier.
        </para>

        <para>
          ADA proposes to identify sets of questions by means of three
          identifiers to facilitate stratified searches. An example of the
          Docbook element chosen to include this information is as follows:
        </para>

        <programlisting format="linespecific">&lt;qandadiv condition="TestQuestion" id="Q Id"&gt;
  &lt;blockinfo&gt;
    &lt;author&gt;
      &lt;personname&gt;
        &lt;firstname&gt;Author First&lt;/firstname&gt;&lt;surname&gt;Author Last&lt;/surname&gt;
      &lt;/personname&gt;
    &lt;/author&gt;
    <command moreinfo="none">&lt;printhistory&gt;
      &lt;para arch="ID_1" revision="ID_2" vendor="ID_3" /&gt;
    &lt;/printhistory&gt;</command>
  &lt;/blockinfo&gt;
  &lt;qandaentry&gt;
    &lt;question&gt;Question Text&lt;/question&gt;
    &lt;/question&gt;
    &lt;answer condition="True" /&gt;
  &lt;/qandaentry&gt;
&lt;/qandadiv&gt;</programlisting>

        <para>
          The <command moreinfo="none">printhistory</command> element may contain an arbitrary
          number of <command moreinfo="none">para</command> elements each of them with three
          identifiers. With this scheme, a question may belong to more than
          one set of questions (for example when re-used in more than one
          exam) and have one of these identifiers for each set.
        </para>

        <para>
          For example, given the file <filename moreinfo="none">QuestionCatalog.xml</filename>
          with a large number of questions, selecting those questions that
          belong to a set is achieved by using the <quote>Xinclude</quote>
          notation. The usage of such element within a XML file is shown in
          the following listing:
        </para>

        <programlisting format="linespecific">&lt;qandaset defaultlabel="number"&gt;
  <command moreinfo="none">&lt;xi:include href="QuestionCatalog.xml"
    xpointer="xpointer(//*/qandadiv/blockinfo/printhistory/para[@arch =
              'ID_1'][@revision = 'ID_2'][@vendor = 'ID_3']/ancestor::qandadiv)"
              xmlns:xi="http://www.w3.org/2001/XInclude"&gt;
    &lt;xi:fallback&gt;
      &lt;para&gt;No questions found in catalog with id="ID_1/ID_2/ID_3"&lt;/para&gt;
    &lt;/xi:fallback&gt;
  &lt;/xi:include&gt;</command>
&lt;/qandaset&gt;</programlisting>

        <para>
          The resulting <command moreinfo="none">qandaset</command> element contains only
          those questions that match the three given identifiers. With this
          technique, a possible usage scenario would be to keep all questions
          for a course, or set of courses, all encoded in a single file and
          then preparing an exam would be simply to label the questions with
          the proper identifiers and them pull all of them in the source
          document with the <command moreinfo="none">xinclude</command> construction as shown
          above.
        </para>
      </answer>
    </qandaentry>

    <qandaentry id="exam_keep_stats" xreflabel="How to keep statistics about questions">
      <question>
        <para>
          Is it possible to store and maintain statistics about questions in
          the same Docbook document?
        </para>

        <para>
          Collecting quiz questions is nice. With enough time and patiente you
          may end up with a large pool from which to design high quality
          exams. But, wouldn't it be nice to know how a question performed in
          a test? Is there a way to keep this information organized and then
          visualize it?
        </para>
      </question>
      <answer>
        <para>
          ADA offers some support to implement this scenario. It assumes that
          the information attached to a question after it has been used in a
          test (generically referred as <quote>stats</quote>) is also stored
          in the Docbook source structure.
        </para>

        <para>
          The idea is to extend the mechanism of question group identifier
          (see <xref linkend="exam_handling_question_catalogs"/>) and include
          certain typical measurements. The proposed structure is shown in the
          following listing:
        </para>

        <programlisting format="linespecific">&lt;qandaentry&gt;
  &lt;blockinfo&gt;
    &lt;printhistory&gt;
      &lt;para arch="ID_1" revision="ID_2" vendor="ID_3"&gt;
        &lt;phrase condition="correct"&gt;20&lt;/phrase&gt;
        &lt;phrase condition="incorrect"&gt;0&lt;/phrase&gt;
        &lt;phrase condition="blank"&gt;2&lt;/phrase&gt;
        &lt;phrase condition="total"&gt;22&lt;/phrase&gt;
        &lt;phrase condition="remarks" /&gt;
      &lt;/para&gt;
    &lt;/printhistory&gt;
  &lt;/blockinfo&gt;
  &lt;question&gt;
    &lt;para&gt;Question text&lt;/para&gt;
  &lt;/question&gt;
  &lt;answer condition="False" /&gt;
&lt;/qandaentry&gt;</programlisting>

        <para>
          Each <command moreinfo="none">qandaentry</command> element may include a
          <command moreinfo="none">blockinfo</command> with several
          <command moreinfo="none">printhistory</command> blocks. Each of them contains a
          paragraph with a group identifier made of the same three attributes
          as described in <xref linkend="exam_handling_question_catalogs"/>
          and five <command moreinfo="none">phrase</command> elements with the numbers derived
          from the use of the question in that set. In the example the
          question was answered by 22 perons, 20 of them answered correctly,
          nobody answered incorrectly and only two persons left it blank.
        </para>

        <para>
          ADA does not provide any support on how to collect and insert that
          information within each question. Since the files have a XML
          structure, it would be feasible to design some application that
          given a set of question identifiers and the proper data, it inserts
          them with the proper markup, but at this time, ADA does not offer
          such functionality.
        </para>

        <para>
          However, the rules to produce test exams (see <xref linkend="typeset_tf_questions"/> and <xref linkend="typeset_mc_questions"/>) produce an additional files with
          extension <filename moreinfo="none">_stats</filename> in which all the data include
          for the questions are shown in tables. The following figure shows
          the table resulting from processing the data in the previous example:
        </para>
      </answer>
    </qandaentry>












  </qandaset>
</section>








  <appendix id="gfdl">
  <title>GNU Free Documentation License</title>
  <para>Version 1.3, 3 November 2008</para>
  <para>
    Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation,
    <abbrev>Inc.</abbrev> <ulink url="http://fsf.org/">http://fsf.org/</ulink>
  </para>
  <para>
    Everyone is permitted to copy and distribute verbatim copies of
    this license document, but changing it is not allowed.
  </para>
  <bridgehead id="Preamble" renderas="sect1">
    0. PREAMBLE
  </bridgehead>
  <para>
    The purpose of this License is to make a manual, textbook, or other
    functional and useful document "free" in the sense of freedom: to assure
    everyone the effective freedom to copy and redistribute it, with or
    without modifying it, either commercially or noncommercially.
    Secondarily, this License preserves for the author and publisher a way to
    get credit for their work, while not being considered responsible for
    modifications made by others.
  </para>
  <para>
    This License is a kind of "copyleft", which means that derivative works of
    the document must themselves be free in the same sense.  It complements
    the GNU General Public License, which is a copyleft license designed for
    free software.
  </para>
  <para>
    We have designed this License in order to use it for manuals for free
    software, because free software needs free documentation: a free program
    should come with manuals providing the same freedoms that the software
    does.  But this License is not limited to software manuals; it can be used
    for any textual work, regardless of subject matter or whether it is
    published as a printed book.  We recommend this License principally for
    works whose purpose is instruction or reference.</para>
  <bridgehead id="Definitions" renderas="sect1">
    1. APPLICABILITY AND DEFINITIONS
  </bridgehead>
  <para>
    This License applies to any manual or other work, in any medium, that
    contains a notice placed by the copyright holder saying it can be
    distributed under the terms of this License.  Such a notice grants a
    world-wide, royalty-free license, unlimited in duration, to use that work
    under the conditions stated herein.  The "Document", below, refers to any
    such manual or work.  Any member of the public is a licensee, and is
    addressed as "you".  You accept the license if you copy, modify or
    distribute the work in a way requiring permission under copyright
    law.
  </para>
  <para>
    A "Modified Version" of the Document means any work containing the
    Document or a portion of it, either copied verbatim, or with modifications
    and/or translated into another language.
  </para>
  <para>
    A "Secondary Section" is a named appendix or a front-matter section of the
    Document that deals exclusively with the relationship of the publishers or
    authors of the Document to the Document's overall subject (or to related
    matters) and contains nothing that could fall directly within that overall
    subject.  (Thus, if the Document is in part a textbook of mathematics, a
    Secondary Section may not explain any mathematics.)  The relationship
    could be a matter of historical connection with the subject or with
    related matters, or of legal, commercial, philosophical, ethical or
    political position regarding them.
  </para>
  <para>
    The "Invariant Sections" are certain Secondary Sections whose titles are
    designated, as being those of Invariant Sections, in the notice that says
    that the Document is released under this License.  If a section does not
    fit the above definition of Secondary then it is not allowed to be
    designated as Invariant.  The Document may contain zero Invariant
    Sections.  If the Document does not identify any Invariant Sections then
    there are none.
  </para>
  <para>
    The "Cover Texts" are certain short passages of text that are listed, as
    Front-Cover Texts or Back-Cover Texts, in the notice that says that the
    Document is released under this License.  A Front-Cover Text may be at
    most 5 words, and a Back-Cover Text may be at most 25 words.
  </para>
  <para>
    A "Transparent" copy of the Document means a machine-readable copy,
    represented in a format whose specification is available to the general
    public, that is suitable for revising the document straightforwardly with
    generic text editors or (for images composed of pixels) generic paint
    programs or (for drawings) some widely available drawing editor, and that
    is suitable for input to text formatters or for automatic translation to a
    variety of formats suitable for input to text formatters.  A copy made in
    an otherwise Transparent file format whose markup, or absence of markup,
    has been arranged to thwart or discourage subsequent modification by
    readers is not Transparent.  An image format is not Transparent if used
    for any substantial amount of text.  A copy that is not "Transparent" is
    called "Opaque".
  </para>
  <para>
    Examples of suitable formats for Transparent copies include plain ASCII
    without markup, Texinfo input format, LaTeX input format, SGML or XML
    using a publicly available DTD, and standard-conforming simple HTML,
    PostScript or PDF designed for human modification.  Examples of
    transparent image formats include PNG, XCF and JPG.  Opaque formats
    include proprietary formats that can be read and edited only by
    proprietary word processors, SGML or XML for which the DTD and/or
    processing tools are not generally available, and the machine-generated
    HTML, PostScript or PDF produced by some word processors for output
    purposes only.
  </para>
  <para>
    The "Title Page" means, for a printed book, the title page itself, plus
    such following pages as are needed to hold, legibly, the material this
    License requires to appear in the title page.  For works in formats which
    do not have any title page as such, "Title Page" means the text near the
    most prominent appearance of the work's title, preceding the beginning of
    the body of the text.
  </para>
  <para>
    The "publisher" means any person or entity that distributes copies
    of the Document to the public.
  </para>
  <para>
    A section "Entitled XYZ" means a named subunit of the Document whose title
    either is precisely XYZ or contains XYZ in parentheses following text that
    translates XYZ in another language.  (Here XYZ stands for a specific
    section name mentioned below, such as "Acknowledgements", "Dedications",
    "Endorsements", or "History".)  To "Preserve the Title" of such a section
    when you modify the Document means that it remains a section "Entitled
    XYZ" according to this definition.
  </para>
  <para>
    The Document may include Warranty Disclaimers next to the notice which
    states that this License applies to the Document.  These Warranty
    Disclaimers are considered to be included by reference in this License,
    but only as regards disclaiming warranties: any other implication that
    these Warranty Disclaimers may have is void and has no effect on the
    meaning of this License.
  </para>
  <bridgehead id="VerbatimCopying" renderas="sect1">
    2. VERBATIM COPYING
  </bridgehead>
  <para>
    You may copy and distribute the Document in any medium, either
    commercially or noncommercially, provided that this License, the copyright
    notices, and the license notice saying this License applies to the
    Document are reproduced in all copies, and that you add no other
    conditions whatsoever to those of this License.  You may not use technical
    measures to obstruct or control the reading or further copying of the
    copies you make or distribute.  However, you may accept compensation in
    exchange for copies.  If you distribute a large enough number of copies
    you must also follow the conditions in section 3.
  </para>
  <para>
    You may also lend copies, under the same conditions stated above, and you
    may publicly display copies.
  </para>
  <bridgehead id="QuantityCopying" renderas="sect1">
    3. COPYING IN QUANTITY
  </bridgehead>
  <para>
    If you publish printed copies (or copies in media that commonly have
    printed covers) of the Document, numbering more than 100, and the
    Document's license notice requires Cover Texts, you must enclose the
    copies in covers that carry, clearly and legibly, all these Cover Texts:
    Front-Cover Texts on the front cover, and Back-Cover Texts on the back
    cover.  Both covers must also clearly and legibly identify you as the
    publisher of these copies.  The front cover must present the full title
    with all words of the title equally prominent and visible.  You may add
    other material on the covers in addition.  Copying with changes limited to
    the covers, as long as they preserve the title of the Document and satisfy
    these conditions, can be treated as verbatim copying in other
    respects.
  </para>
  <para>
    If the required texts for either cover are too voluminous to fit legibly,
    you should put the first ones listed (as many as fit reasonably) on the
    actual cover, and continue the rest onto adjacent pages.
  </para>
  <para>
    If you publish or distribute Opaque copies of the Document numbering more
    than 100, you must either include a machine-readable Transparent copy
    along with each Opaque copy, or state in or with each Opaque copy a
    computer-network location from which the general network-using public has
    access to download using public-standard network protocols a complete
    Transparent copy of the Document, free of added material.  If you use the
    latter option, you must take reasonably prudent steps, when you begin
    distribution of Opaque copies in quantity, to ensure that this Transparent
    copy will remain thus accessible at the stated location until at least one
    year after the last time you distribute an Opaque copy (directly or
    through your agents or retailers) of that edition to the public.
  </para>
  <para>
    It is requested, but not required, that you contact the authors of the
    Document well before redistributing any large number of copies, to give
    them a chance to provide you with an updated version of the
    Document.
  </para>
  <bridgehead id="Modifications" renderas="sect1">
    4. MODIFICATIONS
  </bridgehead>
  <para>
    You may copy and distribute a Modified Version of the Document under the
    conditions of sections 2 and 3 above, provided that you release the
    Modified Version under precisely this License, with the Modified Version
    filling the role of the Document, thus licensing distribution and
    modification of the Modified Version to whoever possesses a copy of it.
    In addition, you must do these things in the Modified Version:
  </para>
  <orderedlist numeration="upperalpha">
    <listitem>
      <simpara>
        Use in the Title Page (and on the covers, if any) a title distinct
        from that of the Document, and from those of previous versions (which
        should, if there were any, be listed in the History section of the
        Document).  You may use the same title as a previous version if the
        original publisher of that version gives permission.
        </simpara>
    </listitem>
    <listitem>
      <simpara>
        List on the Title Page, as authors, one or more persons or entities
        responsible for authorship of the modifications in the Modified
        Version, together with at least five of the principal authors of the
        Document (all of its principal authors, if it has fewer than five),
        unless they release you from this requirement.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        State on the Title page the name of the publisher of the Modified
        Version, as the publisher.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Preserve all the copyright notices of the Document.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Add an appropriate copyright notice for your modifications adjacent to
        the other copyright notices.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Include, immediately after the copyright notices, a license notice
        giving the public permission to use the Modified Version under the
        terms of this License, in the form shown in the Addendum below.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Preserve in that license notice the full lists of Invariant Sections
        and required Cover Texts given in the Document's license notice.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Include an unaltered copy of this License.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Preserve the section Entitled "History", Preserve its Title, and add
        to it an item stating at least the title, year, new authors, and
        publisher of the Modified Version as given on the Title Page.  If
        there is no section Entitled "History" in the Document, create one
        stating the title, year, authors, and publisher of the Document as
        given on its Title Page, then add an item describing the Modified
        Version as stated in the previous sentence.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Preserve the network location, if any, given in the Document for
        public access to a Transparent copy of the Document, and likewise the
        network locations given in the Document for previous versions it was
        based on.  These may be placed in the "History" section.  You may omit
        a network location for a work that was published at least four years
        before the Document itself, or if the original publisher of the
        version it refers to gives permission.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        For any section Entitled "Acknowledgements" or "Dedications", Preserve
        the Title of the section, and preserve in the section all the
        substance and tone of each of the contributor acknowledgements and/or
        dedications given therein.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Preserve all the Invariant Sections of the Document, unaltered in
        their text and in their titles.  Section numbers or the equivalent are
        not considered part of the section titles.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Delete any section Entitled "Endorsements".  Such a section may not be
        included in the Modified Version.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Do not retitle any existing section to be Entitled "Endorsements" or
        to conflict in title with any Invariant Section.
      </simpara>
    </listitem>
    <listitem>
      <simpara>
        Preserve any Warranty Disclaimers.
      </simpara>
    </listitem>
  </orderedlist>
  <para>
    If the Modified Version includes new front-matter sections or appendices
    that qualify as Secondary Sections and contain no material copied from the
    Document, you may at your option designate some or all of these sections
    as invariant.  To do this, add their titles to the list of Invariant
    Sections in the Modified Version's license notice.  These titles must be
    distinct from any other section titles.
  </para>
  <para>
    You may add a section Entitled "Endorsements", provided it contains
    nothing but endorsements of your Modified Version by various parties--for
    example, statements of peer review or that the text has been approved by
    an organization as the authoritative definition of a standard.
  </para>
  <para>
    You may add a passage of up to five words as a Front-Cover Text, and a
    passage of up to 25 words as a Back-Cover Text, to the end of the list of
    Cover Texts in the Modified Version.  Only one passage of Front-Cover Text
    and one of Back-Cover Text may be added by (or through arrangements made
    by) any one entity.  If the Document already includes a cover text for the
    same cover, previously added by you or by arrangement made by the same
    entity you are acting on behalf of, you may not add another; but you may
    replace the old one, on explicit permission from the previous publisher
    that added the old one.
  </para>
  <para>
    The author(s) and publisher(s) of the Document do not by this License give
    permission to use their names for publicity for or to assert or imply
    endorsement of any Modified Version.
  </para>
  <bridgehead id="Combining" renderas="sect1">
    5. COMBINING DOCUMENTS
  </bridgehead>
  <para>
    You may combine the Document with other documents released under this
    License, under the terms defined in section 4 above for modified versions,
    provided that you include in the combination all of the Invariant Sections
    of all of the original documents, unmodified, and list them all as
    Invariant Sections of your combined work in its license notice, and that
    you preserve all their Warranty Disclaimers.
  </para>
  <para>
    The combined work need only contain one copy of this License, and multiple
    identical Invariant Sections may be replaced with a single copy.  If there
    are multiple Invariant Sections with the same name but different contents,
    make the title of each such section unique by adding at the end of it, in
    parentheses, the name of the original author or publisher of that section
    if known, or else a unique number.  Make the same adjustment to the
    section titles in the list of Invariant Sections in the license notice of
    the combined work.
  </para>
  <para>
    In the combination, you must combine any sections Entitled "History" in
    the various original documents, forming one section Entitled "History";
    likewise combine any sections Entitled "Acknowledgements", and any
    sections Entitled "Dedications".  You must delete all sections Entitled
    "Endorsements".
  </para>
  <bridgehead id="Collections" renderas="sect1">
    6. COLLECTIONS OF DOCUMENTS
  </bridgehead>
  <para>
    You may make a collection consisting of the Document and other documents
    released under this License, and replace the individual copies of this
    License in the various documents with a single copy that is included in
    the collection, provided that you follow the rules of this License for
    verbatim copying of each of the documents in all other respects.
  </para>
  <para>
    You may extract a single document from such a collection, and distribute
    it individually under this License, provided you insert a copy of this
    License into the extracted document, and follow this License in all other
    respects regarding verbatim copying of that document.
  </para>
  <bridgehead id="Aggregation" renderas="sect1">
    7. AGGREGATION WITH INDEPENDENT WORKS
  </bridgehead>
  <para>
    A compilation of the Document or its derivatives with other separate and
    independent documents or works, in or on a volume of a storage or
    distribution medium, is called an "aggregate" if the copyright resulting
    from the compilation is not used to limit the legal rights of the
    compilation's users beyond what the individual works permit.  When the
    Document is included in an aggregate, this License does not apply to the
    other works in the aggregate which are not themselves derivative works of
    the Document.
  </para>
  <para>
    If the Cover Text requirement of section 3 is applicable to these copies
    of the Document, then if the Document is less than one half of the entire
    aggregate, the Document's Cover Texts may be placed on covers that bracket
    the Document within the aggregate, or the electronic equivalent of covers
    if the Document is in electronic form.  Otherwise they must appear on
    printed covers that bracket the whole aggregate.
  </para>
  <bridgehead id="Translation" renderas="sect1">
    8. TRANSLATION
  </bridgehead>
  <para>
    Translation is considered a kind of modification, so you may distribute
    translations of the Document under the terms of section 4.  Replacing
    Invariant Sections with translations requires special permission from
    their copyright holders, but you may include translations of some or all
    Invariant Sections in addition to the original versions of these Invariant
    Sections.  You may include a translation of this License, and all the
    license notices in the Document, and any Warranty Disclaimers, provided
    that you also include the original English version of this License and the
    original versions of those notices and disclaimers.  In case of a
    disagreement between the translation and the original version of this
    License or a notice or disclaimer, the original version will prevail.
  </para>
  <para>
    If a section in the Document is Entitled "Acknowledgements",
    "Dedications", or "History", the requirement (section 4) to Preserve its
    Title (section 1) will typically require changing the actual title.
  </para>
  <bridgehead id="Termination" renderas="sect1">
    9. TERMINATION
  </bridgehead>
  <para>
    You may not copy, modify, sublicense, or distribute the Document
    except as expressly provided under this License.  Any attempt
    otherwise to copy, modify, sublicense, or distribute it is void,
    and will automatically terminate your rights under this License.
  </para>
  <para>
    However, if you cease all violation of this License, then your
    license from a particular copyright holder is reinstated (a)
    provisionally, unless and until the copyright holder explicitly
    and finally terminates your license, and (b) permanently, if the
    copyright holder fails to notify you of the violation by some
    reasonable means prior to 60 days after the cessation.
  </para>
  <para>
    Moreover, your license from a particular copyright holder is
    reinstated permanently if the copyright holder notifies you of the
    violation by some reasonable means, this is the first time you
    have received notice of violation of this License (for any work)
    from that copyright holder, and you cure the violation prior to 30
    days after your receipt of the notice.
  </para>
  <para>
    Termination of your rights under this section does not terminate
    the licenses of parties who have received copies or rights from
    you under this License.  If your rights have been terminated and
    not permanently reinstated, receipt of a copy of some or all of
    the same material does not give you any rights to use it.
  </para>
  <bridgehead id="FutureRevisions" renderas="sect1">
    10. FUTURE REVISIONS OF THIS LICENSE
  </bridgehead>
  <para>
    The Free Software Foundation may publish new, revised versions of the GNU
    Free Documentation License from time to time.  Such new versions will be
    similar in spirit to the present version, but may differ in detail to
    address new problems or concerns.  See <ulink url="http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</ulink>.
  </para>
  <para>
    Each version of the License is given a distinguishing version
    number.  If the Document specifies that a particular numbered
    version of this License "or any later version" applies to it, you
    have the option of following the terms and conditions either of
    that specified version or of any later version that has been
    published (not as a draft) by the Free Software Foundation.  If
    the Document does not specify a version number of this License,
    you may choose any version ever published (not as a draft) by the
    Free Software Foundation.  If the Document specifies that a proxy
    can decide which future versions of this License can be used, that
    proxy's public statement of acceptance of a version permanently
    authorizes you to choose that version for the Document.
  </para>
  <bridgehead id="Relicensing" renderas="sect1">
    11. RELICENSING
  </bridgehead>
  <para>
    "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
    World Wide Web server that publishes copyrightable works and also
    provides prominent facilities for anybody to edit those works.  A
    public wiki that anybody can edit is an example of such a server.
    A "Massive Multiauthor Collaboration" (or "MMC") contained in the
    site means any set of copyrightable works thus published on the
    MMC site.
  </para>
  <para>
    "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
    license published by Creative Commons Corporation, a
    not-for-profit corporation with a principal place of business in
    San Francisco, California, as well as future copyleft versions of
    that license published by that same organization.
  </para>
  <para>
    "Incorporate" means to publish or republish a Document, in whole
    or in part, as part of another Document.
  </para>
  <para>
    An MMC is "eligible for relicensing" if it is licensed under this
    License, and if all works that were first published under this
    License somewhere other than this MMC, and subsequently
    incorporated in whole or in part into the MMC, (1) had no cover
    texts or invariant sections, and (2) were thus incorporated prior
    to November 1, 2008.
  </para>
  <para>
    The operator of an MMC Site may republish an MMC contained in the
    site under CC-BY-SA on the same site at any time before August 1,
    2009, provided the MMC is eligible for relicensing.
  </para>
  <bridgehead id="HowToUse" renderas="sect1">
    ADDENDUM: How to use this License for your documents
  </bridgehead>
  <para>
    To use this License in a document you have written, include a copy of the
    License in the document and put the following copyright and license
    notices just after the title page:
  </para>
  <blockquote>
    <para>
      Copyright (C) YEAR YOUR NAME.
    </para>
    <para>
      Permission is granted to copy, distribute and/or modify this document
      under the terms of the GNU Free Documentation License, Version 1.3 or
      any later version published by the Free Software Foundation; with no
      Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.  A
      copy of the license is included in the section entitled "GNU Free
      Documentation License".
    </para>
  </blockquote>
  <para>
    If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
    replace the "with...Texts." line with this:
  </para>
  <blockquote>
    <para>
      with the Invariant Sections being LIST THEIR TITLES, with the
      Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.
    </para>
  </blockquote>
  <para>
    If you have Invariant Sections without Cover Texts, or some other
    combination of the three, merge those two alternatives to suit the
    situation.
  </para>
  <para>
    If your document contains nontrivial examples of program code, we
    recommend releasing these examples in parallel under your choice of free
    software license, such as the GNU General Public License, to permit their
    use in free software.
  </para>
</appendix>


</article>
