#
# ADA Properties file
#
# This is a sample of a Properties.txt file
#
# The file is divided into sections. The beginning of a section is marked by a
# line starting by [name] or [name.subname] and finishes when a new section or
# the end of file is found.
#
# All sections except [ada] can be "named" or "unmamed". A named section is a
# section that contains a .<name> suffix. For example [xslt.first] is a section
# of type xslt with name "first". This allows multiple sections of the same type
# to be included in the file.
#
# A section contains a set of definitions of the form name = value. If only the
# name is included, the value True is assumed. Any string may contain a
# substring of the form ${name} which will be replaced by the value of the
# variable name previously defined.
#
# If a named section is included after its corresponding unnamed section, the
# variables in the unamed section are all visible from the named section. For
# example:
#
# [xslt] # Unnamed xslt section
#         exec = xsltproc # Definition of the exec
#
# [xslt.first] # Named xslt section uses the exec value defined in the unnamed
#
# If a section is included several times, the union of the definitions included
# up to that point is considered. If a variable is defined in several lines,
# only the last value considered.
#
# The following symbols are always defined by default:
#
#  - ada.basedir: The value of the current directory
#  - ada.home: Directory where ADA is installed
#  - ada.file_separator: The string used by the system to concatenate paths
#
#
# It follows a sample of a Properties.txt with all possible options. Those
# commented out are undefined by default
#
#
# ADA General section. Typically written at the top of the file
#
[ada]
        debug_level = info # Possible values are debug, info, warning, error,
                           # critical
        minimum_version = 2.1.10 # Minimum version required
        maximum_version = 3.1.10 # Maximum version allowed
        exact_version = 2.2.1 # Exact version required
        current_datetime = YYYY/MM/DD HH:MM:SS
        profile_revision = rev1 # String to be passed to all xslt processing

[xslt]
        exec = xsltproc # Executable to use for processing
        debug_level = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ada.basedir} # Directory to produce files
        style_file = ${ada.home}/ADA_Styles/DocbookProfile.xsl # Style to apply
        output_format = html # Extension of the result file

        extra_arguments = --stringparam somename somevalue # To be passed to exec
        files = file1 file2 # Space separated list of source files
        merge_styles = file1 file2 file3 # Styles to combine with style_file
        profile_lang = en # Language to pass to exec
        multilingual = False # True/False denoting if doc is
                               # multilingual. Incompatible with profile_lang.

[xfig]
        exec = fig2dev # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ada.basedir} # Directory to produce files
        output_format = png # Output extension

        border = 2 # Border to surround the figure when exporting
        smooth = 4 # Some strange option that improves image quality
        extra_args = option option # Anything here is passed to exec
        files = file1 file2 # Space separated list of source files

[inkscape]
        exec = inkscape # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ada.basedir} # Directory to produce files
        output_format = png  # Extension of the output file produced

        files = file1 file2 # Space separated list of source files

[convert]
        exec = convert # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${convert.src_dir} # Directory to produce files
        format = png # File estension to use

        geometry = 100x120 # Geometry to use when converting
        suffix = ${convert.geometry} # Suffix to use when converting
        crop = 10x20+0+0 # Geometry to crop
        files = file1 file2 # Space separated list of source files

[gimp]
        exec = gimp # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        script_file = ${ada.home}${ada.file_separator}AntImports${ada.file_separator}xcftopng.scm

        files = file1 file2 # Space separated list of source files

[pdfnup]
        exec = pdfnup # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${pdfnup.src_dir} # Directory to produce files
        nup_option = 1x2 # Option to print n up
        files = file1 file2 # Space separated list of source files

[ps2pdf]
        exec = ps2pdf # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ps2pdf.src_dir} # Directory to produce files
        files = file1 file2 # Space separated list of source files

[msf2pdf]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        files = file1 file2 # Space separated list of source files

[export]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ada.basedir} # Directory to produce files
        files = file1 file2 # Space separated list of source files
        files_always = file3 file4 # Files that are always exported

[exportcontrol]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        date_format = yyyy/MM/dd HH:mm:ss
        profile_revision = ${ada.profile_revision}
        begin = yyy/MM/dd HH:mm:ss # Start of enabled window
        end = yyy/MM/dd HH:mm:ss # End of enabled window
        now = ${ada.current_datetime} # Current value for the time
        open = True # It is considered for export (general enable)
        profile_revision_value = r1:r2 # Revisions to consider

[subrecursive]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        dst_dir = ${ada.basedir} # Directory to produce files

        dirs = d1 d2 # Space separated lists of directories to recur
                       # overwriting the export.dst_dir variable

        dirs_nodst = d1 d2 # Space separated list of directories to recur
        target = t1 t2 # List of rules to execute in the remote dir

[copy]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ada.basedir} # Directory to produce files

        files = file1 file2 # Space separated list of source files

[exercisesubmit]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ada.basedir} # Directory to produce files
        style_file = ${ada.home}/ADA_Styles/ExerciseSubmit.xsl
        submit_style_file = ${ada.home}/ADA_Styles/AsapSubmit.xsl
        output_format = html
        extra_args = arg1 arg2 # Args passed directly to xslt
        files = file1 file2 # Space separated list of source files
        multilingual_files = file1 # Space separated lists of multilingual files
        master_style = style.xls # Space separated list of styles to merge

[pdflatex]
        exec = pdflatex # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${pdflatex.src_dir} # Directory to produce files
        files = file1 file2 # Space separated list of source files
        extra_args = opt1 opt2 # To be passed directly to the executable

[latex]
        exec = latex # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${latex.src_dir} # Directory to produce files
        files = file1 file2 # Space separated list of source files
        extra_args = opt1 opt2 # To be passed directly to the executable

[dvips]
        exec = dvips # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ada.basedir} # Directory to produce files
        files = file1 file2 # Space separated list of source files

[dblatex]
        exec = dblatex # Executable to use
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${ada.basedir} # Directory to produce files

        files = file1 file2 # Space separated list of source files
        multilingual_files = f1 f2 # Space separated list of source files
        extra_args = org1 org2 # Options passed directly to the exec
        extra_xsltproc_args = arg1 arg2 # Options passed directly to xsltproc
        profile_lang = en # Profile lang to pass to xsltproc
        compliant_mode = ???

[exam]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${exam.src_dir} # Directory to produce files
        equation_dir = equations # Directory to leave the equation files
        output_format = html # Extension for the result file
        style_file = ${ada.home}/ADA_Styles/Exam.xsl # Style to use

        extra_args = opt1 opt2 # Options to pass to xsltproc
        file = file1 # Exam file
        multilingual_file = file1 # Multilingual file

[testexam]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${testexam.src_dir} # Directory to produce files
        equation_dir = equations # Directory to leave the equations
        output_format = html # Extension of the result file
        style_file = ${ada.home}/ADA_Styles/Exam.xsl # Style to use

        extra_args = opt1 opt2 # Options to pass to xsltproc
        file = file1 # Exam file
        multilingual_file = file1 # Multilingual file

[rss]
        debug = ${ada.debug_level} # Debug level inherited from ada section
        src_dir = ${ada.basedir} # Directory containing source files
        dst_dir = ${rss.src_dir} # Directory to produce files
        output_format = _rss.xml
        style_file = ${ada.home}/ADA_Styles/Rss.xsl
        style_file_tohtml = ${ada.home}/ADA_Styles/RssToHtml.xsl

        extra_args = opt1 opt2 # Arguments to pass to xsltproc
        files = file1 file2 # Space separated list of source files
        multilingual_files = file1 file2 # Space separated list of
                                           # multilingual files

[clean]
        debug = ${ada.debug_level} # Debug level inherited from ada section

        files = file1 file2 # Space separated list of files to clean

# ##############################################################################
#
# Ohter ideas for sections in the Properties.txt file
#
#
[group]
        targets = t1 t2 t4 # Group of targets

[group.name]
        targets = t1 t2 t4 # Named Group of targets


# This one I don't have it clear in my mind yet...
[include]
        file = f1 # file to include
