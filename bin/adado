#!/bin/bash
#
# Script to set the proper variables for ADA to be available for execution
#

# Function use to make sure ADA_HOME is set, if not, suggest the steps to do
# so. VERY important the message including the $ADA_REAL_USER_HOME variable. For
# ant this variable points to C:\Documents and Settings\username, whereas for
# cygwin $HOME points to some location within its internal tree (/home/...)
function ada_check_home() {
    if [ "$ADA_HOME" = "" ]; then
	echo "ERROR: Unable to set variable ADA_HOME"
	echo "Edit the file .ant.properties in $ADA_REAL_USER_HOME and"
        echo "add a line such as:"
	if [ "$cygwin" = "true" ]; then
	    echo "ada.home="`cygpath --windows /`"\[path to your ADA installation]\ADA"
	else
	    echo "ada.home=[path to your ADA dir]"
	fi
	exit
    fi
}

cygwin=false;
case "`uname`" in
    CYGWIN*) cygwin=true ;;
esac

# Get basic variables
basedir=$PWD

# If within cygwin, pahts need to be manipulated for a correct ant invocation
if [ $cygwin = "true" ]; then
    
    ADA_HOME=`dirname $0`/..

    # If ADA_HOME is empty, bomb out with msg
    ada_check_home

    ADA_HOME=`cygpath --windows $ADA_HOME`
    ADA_HOME=${ADA_HOME//\\/\\\\}
    
    # Set path to Alltargets also in windows syntax with double fwdslash
    AllTargets=`cygpath --windows $ADA_HOME/AntImports/AllTargets.xml`
    AllTargets=${AllTargets//\\/\\\\}
    
    # Set basedir also in windows syntax with double fwdslash
    basedir=`cygpath --windows $basedir`
    basedir=${basedir//\\/\\\\}
else
    # Not in cygwin, directly fetch ADA_HOME from the path used to invoke the script
    ADA_HOME=`dirname $0`/..

    AllTargets="$ADA_HOME/AntImports/AllTargets.xml"
fi

# If ADA_HOME is empty, bomb out with msg
ada_check_home

# Invoke ant
rm -f adado.log
ant -q -Dada.home="$ADA_HOME" \
    -Dbasedir="$basedir" \
    -f "$AllTargets" $* 2>> adado.log

# Check for status: 0 = OK, 1 = Something went wrong!
adaAntStatus="$?"
if [ $adaAntStatus -ne 0 ]; then
    # In adado.log there is a ADA_BEGIN_EXE and ADA_END_EXE when ADA
    # entries/leaves a directory. Process those messages to find out in which
    # directory the error has occurred.
    context=()
    while read line; do
        case $line in
	    # Push begin line to the array
            ADA_BEGIN_EXE*)
                context[${#context[@]}]="$line"
                ;;
	    # Pop end line off the array
            ADA_END_EXE*)
                previous=`expr ${#context[@]} - 1`
                unset context[$previous]
                ;;
        esac
    done < adado.log

    # Dump the path to the proper file to check
    errorFile="build.out"
    if [ ${#context[@]} -eq 1 ]; then
	errorDir="."
    else
	# The error occurred in the dir contained in the last array value
        previous=`expr ${#context[@]} - 1`
	errorDir=`expr match "${context[$previous]}" "ADA_BEGIN_EXE \(.*\)"`

    fi

    # It might be the case such that build.out does not exist. This means an ANT
    # error. Redirect
    if [ ! -f $errorDir/$errorFile ]; then
	errorDir="."
	errorFile="adado.log"
    fi
    echo
    echo "---------------------------------- ADA ERROR ----------------------------------"
    echo
    echo "-- Full error information in file:"
    echo "   $errorDir/$errorFile"
    echo 
    echo "                            ==== Error excerpt ===="
    tail $errorDir/$errorFile 2>/dev/null
    echo "                            ======================="
    echo
    echo "-------------------------------------------------------------------------------"
    echo
fi

exit

