#
# ADA Properties file
#
# This is a sample of a Properties.ddo file
#
# The file is divided into rules. The beginning of a rule is marked by a line
# starting by [name] or [name.subname] and finishes when a new rule or the end
# of file is found. A rule is simply a set of assignments of the form "name =
# value". Values may span over several lines as long as the lines start with a
# space.
#
# All rules except [ada] can be "named" or "unmamed". A named rule is a rule
# that contains a .<name> suffix. For example [xslt.first] is a rule of type
# xslt with name "first". This allows multiple rules of the same type to be
# included in the file.
#
# A rule contains a set of definitions of the form name = value. Any string may
# contain a substring of the form %(name)s which will be replaced by the value
# of the variable name previously defined.
#
# If a named rule is included after its corresponding unnamed rule, the
# variables in the unamed rule are all visible from the named rule. For example:
#
#  # Unnamed xslt rule
#  [xslt] 
#  # Definition of the languages to use
#  languages = en es 
#
#
#  # Named xslt rule uses the languages value defined in the
#  # unnamed rule
#  [xslt.first] 
#         style = MyStyle
#
# The command "adado" executes all the rules in the rule file in the order
# they appear ignoring "clean", "local", "dump", "help", "helpdump" or
# "dumphelp".
#
# For every rule, the command "adado rule.help" explains how the rule works, 
# and "adado rule.dump" shows the value of all the relevant variables.
#
# The following variables are always defined by default:
#
#  - alias:              Space separated list of aliases for a target
#  - basedir:            The value of the current directory
#  - current_datetime:   Time of execution of script
#  - debug_level:        Integer controlling messages shown
#  - dst_dir:            The value of the current directory
#  - enable_begin:       Date/time from which a rule is enable (if not empty)
#  - enable_date_format: Format for date/time specification
#  - enable_end:         Date/time after which a rule is disable (if not empty)
#  - enable_open:        If '1' the rule is allowed to execute
#  - enable_profile:     Value passed to xslt processing as profile.revision
#  - encoding:           The default encoding for XML files
#  - file_separator:     Taken from the platform
#  - files:              Files to be processed
#  - help:               Text explaining how the rule works
#  - home:               Directory where ADA is installed
#  - languages:          The locale taken from execution environment
#  - project_file:       File name marking the root of a project 'Ada.project'
#  - project_home:       Directory where Ada.project has been located
#  - property_file:      File to read in each dir (Properties.ddo)
#  - src_dir:            Source directory to consider for source files (current)
#  - version:            Current ADA version
#
# It follows a sample of a Properties.ddo with all possible unnamed rules and 
# their available options with their default values.
# -----------------------------------------------------------------------------
#
# It follows a set of customization to view these files with colors in several
# editors:
#
# Emacs:
# (setq auto-mode-alist (append (list '("\\.ddo" . conf-mode)) auto-mode-alist))
# 
# VIM (in ~/.vim/ftdetect/ddo.vim)
# au BufRead,BufNewFile *.ddo     set syntax=dosini
# 
# -----------------------------------------------------------------------------
#
# ADA global options. Typically written at the top of the file
#
[DEFAULT]
# Values that are visible for all rules. Default values in parenthesis
alias			= ()
basedir			= (current directory)
current_datetime	= (current time)
debug_level		= (0)
dst_dir			= (current directory)
encoding		= (system encoding)
enable_begin		= ()
enable_date_format	= ('yyyy/MM/dd HH:mm:ss')
enable_end		= ()
enable_open		= (1)
enable_profile		= ()
file_separator		= (system file separator)
files			=
help			= (brief description of the target)
home			= (ada installation directory)
locale			= (system locale)
partial			= (0)
project_file		= (Ada.project)
project_home		= (current directory)
property_file		= (Properties.ddo)
src_dir			= (current directory)
version			= (current ada version)
#
# Rules with their specific variables (the defaults are available in all
#
[ada]
# Minimum version required to execute ADA
minimum_version		=
# Maximum version allowed to exsecute ADA
maximum_version		=
# Exact version required to execute ADA
exact_version		=
# Profiles that enable rules
enabled_profiles	=

[xslt]
# Styles to apply (they are concatenated into a single style file
styles			= %(home)s/ADA_Styles/DocbookProfile.xsl
# Extension for the result file (no dot)
output_format		= html
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_arguments		=
# Languages to consider for the translation
languages		=

[inkscape]
# Executable to invoke
exec			= inkscape
# Output format to obtain
output_format		= png
# Extra arguments passed to the program
extra_arguments		=

[gotodir]
files			= d1 d2   # Space separated lists of dirs to process recursively
targets			= t1 t2 # List of rules to execute in the remote dir

[gimp]
# Executable to invoke
exec			= gimp
# Script to execute to translate all files to png
script			= %(home)s%(file_separator)sbin%(file_separator)s/xcftopng.scm
# Extra arguments passed to the program
extra_arguments		=

[convert]
# Executable to invoke
exec			= convert
# Geometry to use when converting
geometry		=
# Option to crop images
crop_option		=
# Extra arguments passed to the program
extra_arguments		=

[copy]
# Works with "files", "src_dir" and "dst_dir" already defined.

[export]
# Destination of the export
dst_dir			=

[latex]
# Executable to invoke
exec			= latex
# Output format to obtain
output_format		= pdf
# Extra arguments passed to the dblatex
extra_arguments		=

[dvips]
# Executable to invoke
exec			= dvips
# Extra arguments passed to the dblatex
extra_arguments		=

[dblatex]
# Executable to invoke
exec			= dblatex
# Output format to obtain
output_format		= pdf
# Extra arguments passed to the dblatex
extra_arguments		=
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_xslt_arguments	=
# Add some ADA specific modifications Yes = 1, No = 0
compliant_mode		= 0

[exercise]
# Space separated list of Stylesheets to pass to xsltproc 
styles			= %(home)s/ADA_Styles/ExerciseSubmit.xsl
# Space separated list of Stylesheets to pass to xsltproc to generate the submit
# version
submit_styles		= %(home)s/ADA_Styles/AsapSubmit.xsl
# Extension of the output files
output_format		= html
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_arguments		=
# Versionts to be produced by the rule: regular, pguide, solution, submit
produce			=
# Space separated list of languages to process
languages		= (default locale)

[exam]
# Space separated list of Stylesheets to pass to xsltproc 
styles			= %(home)s%(file_separator)sADA_Styles%(file_separator)sExam.xsl
# Extension of the output files
output_format		= html
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_arguments		=
# Versionts to be produced by the rule: regular, pguide, solution
produce			=
# Space separated list of languages to process
languages		= (default locale)

[testexam]
# Space separated list of Stylesheets to pass to xsltproc 
styles			= %(home)s%(file_separator)sADA_Styles%(file_separator)sExam.xsl
# Extension of the output files
output_format		= html
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_arguments		=
# Versionts to be produced by the rule: regular, pguide, solution
produce			=
# Space separated list of languages to process
languages		= (default locale)

[office2pdf]
# Executable to invoke
exec			= soffice
# Extra arguments passed to the program
extra_arguments		=

# [template]
# Space separated list of templates to include at this point in the file
# files			=
                              
[pdfnup]
# Executable to invoke
exec			= pdfnup
# Option to print n up
nup       		= 2x1
# Extra arguments passed to the program
extra_arguments		=

[rsync]
# Executable to invoke
exec			= rsync
# Source directory to synchronize
src_dir			=
# Destination directory to synchronize
dst_dir			=
# Extra arguments passed to the program
extra_arguments		=

[script]
# Name of the script function to invoke when executing all targets
build_function		= main  
# Name of the script function to invoke when executing the clean target
clean_function		= clean
# File to use as script input
stdin			=
# File to write the script output
stdout			=
# File to write the script error
stderr			=
# Arguments given to the script in sys.args
arguments		=

# ------------------------------------------------------------------------------
#
# NOT IMPLEMENTED YET! (and some of them won't be)
#
# ------------------------------------------------------------------------------

# [ps2pdf]
#         exec = ps2pdf # Executable to use
#         extra_args = option option # Anything here is passed to exec


# [pdflatex]
#         exec = pdflatex # Executable to use
#         extra_args = opt1 opt2 # To be passed directly to the executable

# ##############################################################################
#
# Ohter ideas for sections in the Properties.ddo file (brainstorming)
#
# ##############################################################################
#
# [group]
#         targets = t1 t2 t4 # Group of targets

# [group.name]
#         targets = t1 t2 t4 # Named Group of targets

