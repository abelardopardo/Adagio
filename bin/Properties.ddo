#
# ADA Properties file
#
# This is a sample of a Properties.txt file
#
# The file is divided into sections. The beginning of a section is marked by a
# line starting by [name] or [name.subname] and finishes when a new section or
# the end of file is found.
#
# All sections except [ada] can be "named" or "unmamed". A named section is a
# section that contains a .<name> suffix. For example [xslt.first] is a section
# of type xslt with name "first". This allows multiple sections of the same type
# to be included in the file.
#
# A section contains a set of definitions of the form name = value. Any string
# may contain a substring of the form %(name)s which will be replaced by the
# value of the variable name previously defined.
#
# If a named section is included after its corresponding unnamed section, the
# variables in the unamed section are all visible from the named section. For
# example:
#
#  # Unnamed xslt section
#  [xslt] 
#  # Definition of the languages to use
#  languages = en es 
#
#
#  # Named xslt section uses the languages value defined in the
#  # unnamed section
#  [xslt.first] 
#         style = MyStyle
#
# The command "adado" executes all the rules in the rule file in the order
# they appear ignoring "clean", "local", "dump", "help", "helpdump" or
# "dumphelp".
#
# For every rule, the command "adado rule.help" explains how the rule works, 
# and "adado rule.dump" shows the value of all the relevant variables.
#
# The following variables are always defined by default:
#
#  - basedir:          The value of the current directory
#  - current_datetime: Time of execution of script
#  - debug_level:      Integer controlling messages shown
#  - dst_dir:          The value of the current directory
#  - encoding:         The default encoding for XML files
#  - file_separator:   Taken from the platform
#  - files:            Files to be processed
#  - home:             Directory where ADA is installed
#  - locale:           Taken from execution environment
#  - profile_revision: Value passed to xslt processing as profile.revision
#  - project_file:     File name marking the root of a project 'Ada.project'
#  - project_home:     Directory where Ada.project has been located
#  - property_file:    File to read in each dir (Properties.txt)
#  - src_dir:          Source directory to consider for source files (current)
#  - version:          Current ADA version
#
# It follows a sample of a Properties.txt with all possible unnamed rules and 
# their available options with their default values.
#
# -----------------------------------------------------------------------------
#
# ADA General section. Typically written at the top of the file
#
[DEFAULT]
# Values that are visible for all rules. Default values in parenthesis
basedir			= (current directory)
current_datetime	= (current time)
debug_level		= (0)
dst_dir			= (current directory)
encoding		= (system encoding)
file_separator		= (system file separator)
files			=
help			= (brief description of the target)
home			= (ada installation directory)
locale			= (system locale)
profile_revision	=
project_file		= (Ada.project)
project_home		= (current directory)
property_file		= (Properties.ini)
src_dir			= (current directory)
version			= (current ada version)

#
# Rules with their specific variables (the defaults are available in all
#
[ada]
# Minimum version required to execute ADA
minimum_version		=
# Maximum version allowed to exsecute ADA
maximum_version		=
# Exact version required to execute ADA
exact_version		=

[xslt]
# Styles to apply (they are concatenated into a single style file
styles			= %(home)s/ADA_Styles/DocbookProfile.xsl
# Extension for the result file (no dot)
output_format		= html
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_arguments		=
# Languages to consider for the translation
languages		=

[inkscape]
# Executable to invoke
exec			= inkscape
# Output format to obtain
output_format		= png
# Extra arguments passed to the program
extra_arguments		=

[gotodir]
files			= d1 d2   # Space separated lists of dirs to process recursively
targets			= t1 t2 # List of rules to execute in the remote dir

[gimp]
# Executable to invoke
exec			= gimp
# Script to execute to translate all files to png
script_file		= %(home)s%(ada.file_separator)sAntImports%(ada.file_separator)sxcftopng.scm
# Extra arguments passed to the program
extra_arguments		=

[convert]
# Executable to invoke
exec			= convert
# Output format to obtain
output_format		= png
# Geometry to use when converting
geometry		=
# Option to crop images
crop_option		=
# Extra arguments passed to the program
extra_arguments		=

[copy]
# Works with "files", "src_dir" and "dst_dir" already defined.

[export]
# Destination of the export
dst_dir			=
# Date format to consider (def: yyyy/MM/dd HH:mm:ss)
date_format		= yyy/MM/dd HH:mm:ss
# Date from which export is allowed (in date_format)
begin			=
# Date after which export is not allowed (in date_format)
end			=
# Export enable. If false, target is not executed
open			= True
# Set of revisions to compare with global profile_revision to allow export
profile_revision	=

[dblatex]
# Executable to invoke
exec			= dblatex
# Output format to obtain
output_format		= pdf
# Extra arguments passed to the dblatex
extra_argumentss	=
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_xsltproc_arguments =
# Add some ADA specific modifications Yes = 1, No = 0
compliant_mode		= 0

[exercise]
# Space separated list of Stylesheets to pass to xsltproc 
styles			= %(home)s/ADA_Styles/ExerciseSubmit.xsl
# Space separated list of Stylesheets to pass to xsltproc to generate the submit
# version
submit_styles		= %(home)s/ADA_Styles/AsapSubmit.xsl
# Extension of the output files
output_format		= html
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_args		=
# Versionts to be produced by the rule: regular, pguide, solution, submit
produce			=
# Space separated list of languages to process
languages		= (default locale)

[exam]
# Space separated list of Stylesheets to pass to xsltproc 
styles			= %(home)s%(file_separator)sADA_Styles%(file_separator)sExam.xsl
# Extension of the output files
output_format		= html
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_arguments		=
# Versionts to be produced by the rule: regular, pguide, solution
produce			=
# Space separated list of languages to process
languages		= (default locale)

[testexam]
# Space separated list of Stylesheets to pass to xsltproc 
styles			= %(home)s%(file_separator)sADA_Styles%(file_separator)sExam.xsl
# Extension of the output files
output_format		= html
# Parameters passed to xsltproc. Format: 'name': 'value', 'name': 'value'. They
# are equivalent to <xsl:param name="name" value="value"/>
extra_arguments		=
# Versionts to be produced by the rule: regular, pguide, solution
produce			=
# Space separated list of languages to process
languages		= (default locale)

[office2pdf]
# Executable to invoke
exec			= soffice
# Extra arguments passed to the program
extra_arguments		=

[template]
# Space separated list of templates to include at this point in the file
files			=
                              
[rsync]
# Executable to invoke
exec			= rsync
# Source directory to synchronize
src_dir			=
# Destination directory to synchronize
dst_dir			=
# Extra arguments passed to the program
extra_arguments		=

[script]
# Name of the script function to invoke when executing all targets
build_function		= main  
# Name of the script function to invoke when executing the clean target
clean_function		= clean
# File to use as script input
stdin			=
# File to write the script output
stdout			=
# File to write the script error
stderr			=
# Arguments given to the script in sys.args
arguments		=

# ------------------------------------------------------------------------------
#
# NOT IMPLEMENTED YET! (and some of them won't be)
#
# ------------------------------------------------------------------------------
# [pdfnup]
#         exec = pdfnup # Executable to use
#         nup_option = 1x2 # Option to print n up

# [ps2pdf]
#         exec = ps2pdf # Executable to use
#         extra_args = option option # Anything here is passed to exec


# [pdflatex]
#         exec = pdflatex # Executable to use
#         extra_args = opt1 opt2 # To be passed directly to the executable

# [latex]
#         exec = latex # Executable to use
#         extra_args = opt1 opt2 # To be passed directly to the executable

# [dvips]
#         exec = dvips # Executable to use

# [rss]
#         debug = %(ada.debug_level)s # Debug level inherited from ada section
#         output_format = _rss.xml
#         styles = %(home)s/ADA_Styles/Rss.xsl
#         styles_tohtml = %(home)s/ADA_Styles/RssToHtml.xsl

#         extra_args = opt1 opt2 # Arguments to pass to xsltproc
#         multilingual_files = file1 file2 # Space separated list of
#                                            # multilingual files

# ##############################################################################
#
# Ohter ideas for sections in the Properties.txt file (brainstorming)
#
# ##############################################################################
#
# [group]
#         targets = t1 t2 t4 # Group of targets

# [group.name]
#         targets = t1 t2 t4 # Named Group of targets

