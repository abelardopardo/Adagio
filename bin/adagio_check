#!/usr/bin/python
# -*- coding: UTF-8 -*-#
#
# Copyright (C) 2010 Carlos III University of Madrid
# This file is part of the Adagio: Agile Distributed Authoring Toolkit

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor
# Boston, MA  02110-1301, USA.
#
# Author: Abelardo Pardo (abelardo.pardo@uc3m.es)
#

import sys, locale, re, os

# Get locale info and infer language from it
locale = locale.getdefaultlocale()[0]
m = re.match('^([^_]+)_.+$', locale)
if m != None:
    localePrefix = m.group(1)
else:
    localePrefix = 'en'
    
dictionary_en = {
    'checking_configuration': 'Checking Adagio configuration',
    'lxml_not_installed': 
    'Python library lxml is not installed. Check configuration.',
    'docbook_not_installed':
        'Package docbook-xml is not installed. Check configuration.',
    'docbookxsl_not_installed':
        'Package docbook-xsl is not installed. Check configuration.',
    'adagio_not_installed':
        'Unable to load adagio package. Check configuration.',
    'active_rules':
        'Rules that can be executed:',
    'disabled': '-- Disabled -- Install program {0}.',
    'installed': 'Installed'
    }

dictionary_es = {
    'checking_configuration': 'Comprobando la configuración de Adagio',
    'lxml_not_installed': 
    'La biblioteca python-lxml no está instalada. Comprueba la configuración.',
    'docbook_not_installed':
        'El paquete docbook-xml no está instalado. Comprueba la configuración.',
    'docbookxsl_not_installed':
        'El paquete docbook-xsl no está instalado. Comprueba la configuración.',
    'adagio_not_installed':
        'El paquete adagio no puede cargarse. Comprueba la configuración.',
    'active_rules':
        'Reglas que puedes ejecutar:',
    'disabled': 'Inhabilitado. Instala el programa {0}.',
    'installed': 'Instalado'
}

all_dicts = { 'en': dictionary_en,
	      'es': dictionary_es
            }

# Set the global dicionary
dictionary = all_dicts.get(localePrefix)
if dictionary == None:
    dictionary = dictionary_en

print
print dictionary.get('checking_configuration')
print

#
# Check adagio home directory
#
print ' - Adagio directory: ',
adagioDir = os.path.dirname(__file__)
adagioDir = os.path.abspath(os.path.join(adagioDir, '..'))
print adagioDir

#
# Verify that the lxml library is installed
#
print ' - python-lxml: ',
try:
    from lxml import etree as etree
except ImportError:
    print
    print '***', dictionary.get('lxml_not_installed')
    sys.exit(1)
print dictionary.get('installed')

#
# Check if docbook and the XSLT sheets are properly installed. This is
# tricky. If the packages are not properly installed, the XSLT processing still
# works by fetching all the styles and DTDs from the network, which is terribly
# slow. We run the risk of a user not installing these packages and seeing that
# the tool has a terrible performance.
#
print ' - Docbook XML: ',
parser = etree.XMLParser(dtd_validation = True, 
                         load_dtd = True, no_network = True)
fileToParse = os.path.join(adagioDir, 'doc', 'About_Adagio.xml')
try:
    dataTree = etree.parse(fileToParse, parser)
except etree.XMLSyntaxError, e:
    print
    print '***', dictionary.get('docbook_not_installed')
    sys.exit(1)
print dictionary.get('installed')

print ' - Docbook XSL: ',
styleParser = etree.XMLParser(load_dtd = True, no_network = True)
fileToParse = os.path.join(adagioDir, 'Adagio_Styles', 'DocbookProfile.xsl')
accessControl = etree.XSLTAccessControl(read_network = False)
try:
    transform = etree.parse(fileToParse, styleParser)
    transform = etree.XSLT(transform, access_control = accessControl)
    transform(dataTree)
except (etree.XMLSyntaxError, etree.XSLTApplyError), e:
    print
    print '***', dictionary.get('docbookxsl_not_installed')
    sys.exit(1)
print dictionary.get('installed')

print ' - Adagio package: ',
# Try to import the adagio package
_dirName = os.path.dirname(__file__)
_dirName = os.path.abspath(os.path.join(_dirName, '..'))
sys.path.insert(0, _dirName)
sys.path.insert(0, os.path.join(_dirName, 'adagio'))
try:
    import adagio
except ImportError:
    print
    print '***', dictionary.get('adagio_not_installed')
    sys.exit(1)
print dictionary.get('installed')

# Traverse all the modules and for those that need an executale installed, check
# if it is present. If not installed, suggest the name of the executable to
# install. For the rest (those with no executable required), say simply that it
# is OK.
print
print dictionary.get('active_rules')
print
for moduleName in sorted(adagio.modules):
    print ' -', moduleName, ':',
    try:
        executable = eval('adagio.' + moduleName + '.has_executable')
    except AttributeError, e:
        print 'OK'
        continue
    
    if executable != None:
        print 'OK'
    else:
        options = eval('adagio.' + moduleName + '.options')
        program = next(b for (a, b, c) in options if a == 'exec')
        print dictionary.get('disabled').format(program)

sys.exit(0)
