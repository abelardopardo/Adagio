#!/usr/bin/env python
# -*- coding: UTF-8 -*-#
#
# Copyright (C) 2010 Carlos III University of Madrid
# This file is part of Adagio: Agile Distributed Authoring Integrated Toolkit

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor
# Boston, MA  02110-1301, USA.
#
# Author: Abelardo Pardo (abelardo.pardo@uc3m.es)
#

import sys, locale, re, os, platform

# Get locale info and infer language from it
locale = locale.getdefaultlocale()[0]
m = re.match('^([^_]+)_.+$', locale)
if m != None:
    localePrefix = m.group(1)
else:
    localePrefix = 'en'
    
dictionary_en = {
'checking_configuration': 'Checking Adagio configuration',

'lxml_not_installed': 
'Python library lxml is not installed. Check configuration.',

'docbook_dir_not_created':
"""Docbook-xml incorrectly installed. It should be inside an Adagio folder. 
Check configuration.""",

'docbook_not_installed':
'Package docbook-xml is not installed. Check configuration.',

'docbookxsl_dir_not_created':
"""Docbook-xsl incorrectly installed. It should be inside an Adagio folder. 
 Check configuration.""",

'docbookxsl_not_installed':
'Package docbook-xsl is not installed. Check configuration.',

'adagio_not_installed':
'Unable to load adagio package. Check configuration.',

'active_rules':
'Rules that can be executed:',

'disabled': '-- Disabled -- Install program {0}.',

'installed': 'Installed',

'missing_application':
"""If an application is ruled as "disabled" it may be because several reasons:

  - If the application is not installed, go ahead and install it.

  - If your application is installed, check if the name of the executable that
    Adagio mentions is the same as the one offered by the application. If not,
    open the text file .adagiorc in your user home directory and insert a rule
    with the name of the application and assign to variable "exec" the right
    name for the executable. For example:

    [gimp]
    exec = gimp-2.6

    This example changes the executable that Adagio must use from the default
    (gimp) to gimp-2.6

  - If the application is installed in your machine and the name of the
    executable is correct, then make sure the path to that executable is in the
    environment variable PATH. Check the Adagio FAQ on how to change the
    environment variables."""
}

dictionary_es = {
'checking_configuration': 
'Comprobando la configuración de Adagio',

'lxml_not_installed': 
'La biblioteca python-lxml no está instalada. Comprueba la configuración.',

'docbook_dir_not_created':
"""Docbook-xml mal instalado. Debe estar en una carpeta dentro de Adagio.
Comprueba la configuración.""",

'docbook_not_installed':
'El paquete docbook-xml no está instalado. Comprueba la configuración.',

'docbookxsl_dir_not_created':
"""Docbook-xsl mal instalado. Debe estar en una carpeta dentro de Adagio. 
Comprueba la configuración.""",

'docbookxsl_not_installed':
'El paquete docbook-xsl no está instalado. Comprueba la configuración.',

'adagio_not_installed':
'El paquete adagio no puede cargarse. Comprueba la configuración.',

'active_rules':
'Reglas que puedes ejecutar:',

'disabled': 
'Inhabilitado. Instala el programa {0}.',

'installed': 
'Instalado',

'missing_application':
"""Si un programa Adagio lo marca como "Inhabilitado" puede ser debido a varias
razones:

  - Si la aplicación no está instalada, instálala y vuelve a ejecutar el script.

  - Si la aplicación está instalada, comprueba que el nombre del ejecutable que
    menciona Adagio en su mensaje es idéntico al que ofrece la aplicación. Si no
    es así, abre el fichero de texto .adagiorc en la carpeta raíz del usuario,
    inserta una regla con el nombre de la aplicación y asigna a la variable
    "exec" el nombre correcto de ese ejecutable. Por ejemplo:

    [gimp]
    exec = gimp-2.6

    Este ejemplo cambia el ejecutable de la regla gimp que tiene en cuenta
    Adagio de su valor por defecto (gimp) a gimp-2.6.

  - Si la aplicación está instalada en el ordenador y el nombre del ejecutable
    es correcto, asegúrate de que la ruta a ese ejecutable está en la variable
    de entorno PATH. Consulta el FAQ de Adagio para ver cómo se cambian los
    valores de las variables de entorno."""

}

all_dicts = { 'en': dictionary_en,
	      'es': dictionary_es
            }

# Set the global dicionary
dictionary = all_dicts.get(localePrefix)
if dictionary == None:
    dictionary = dictionary_en

print
print dictionary.get('checking_configuration')
print

#
# Check platform
#
currentSystem = platform.system()
print ' - Machine: ', platform.machine()
print ' - System: ', platform.system()
print ' - System Version: ', platform.version()
print ' - Python version: ', platform.python_version()

#
# Check adagio home directory
#
print ' - Adagio directory: ',
adagioDir = os.path.dirname(__file__)
adagioDir = os.path.abspath(os.path.join(adagioDir, '..'))
print adagioDir

#
# Verify that the lxml library is installed
#
print ' - python-lxml: ',
try:
    from lxml import etree as etree
except ImportError:
    print
    print '***', dictionary.get('lxml_not_installed')
    sys.exit(1)
print dictionary.get('installed')

#
# Check if docbook and the XSLT sheets are properly installed. This is
# tricky. If the packages are not properly installed, the XSLT processing still
# works by fetching all the styles and DTDs from the network, which is terribly
# slow. We run the risk of a user not installing these packages and seeing that
# the tool has a terrible performance.
#
os.environ["XML_CATALOG_FILES"] = os.path.join(adagioDir, 'DTDs', 'catalog')
print ' - Docbook XML: ',
if currentSystem == 'Windows':
    if not os.path.exists(os.path.join(adagioDir, 'docbook-xml',
                                       'catalog.xml')):
        print
        print '***', dictionary.get('docbook_dir_not_created')
        sys.exit(1)

parser = etree.XMLParser(dtd_validation = True, 
                         load_dtd = True, no_network = True)
fileToParse = os.path.join(adagioDir, 'doc', 'About_Adagio.xml')
try:
    dataTree = etree.parse(fileToParse, parser)
except etree.XMLSyntaxError, e:
    print
    print '***', dictionary.get('docbook_not_installed')
    sys.exit(1)
print dictionary.get('installed')

print ' - Docbook XSL: ',
if currentSystem == 'Windows':
    if not os.path.exists(os.path.join(adagioDir, 'docbook-xsl',
                                       'catalog.xml')):
        print
        print '***', dictionary.get('docbookxsl_dir_not_created')
        sys.exit(1)

styleParser = etree.XMLParser(load_dtd = True, no_network = True)
fileToParse = os.path.join(adagioDir, 'Adagio_Styles', 'DocbookProfile.xsl')
accessControl = etree.XSLTAccessControl(read_network = False)
try:
    transform = etree.parse(fileToParse, styleParser)
    transform = etree.XSLT(transform, access_control = accessControl)
    transform(dataTree)
except (etree.XMLSyntaxError, etree.XSLTApplyError), e:
    print
    print '***', dictionary.get('docbookxsl_not_installed')
    sys.exit(1)
print dictionary.get('installed')

print ' - Adagio python package: ',
# Try to import the adagio package
_dirName = os.path.dirname(__file__)
_dirName = os.path.abspath(os.path.join(_dirName, '..'))
sys.path.insert(0, _dirName)
sys.path.insert(0, os.path.join(_dirName, 'adagio'))
try:
    import adagio
except ImportError:
    print
    print '***', dictionary.get('adagio_not_installed')
    sys.exit(1)
print dictionary.get('installed')

# Load some other packages
import properties

# Run the regular initialization
adagio.initialize()

# Create a directory object with the current directory (parses config files)
print
dirObject = adagio.directory.getDirectoryObject(os.getcwd(), [])

# Traverse all the modules and for those that need an executale installed, check
# if it is present. If not installed, suggest the name of the executable to
# install. For the rest (those with no executable required), say simply that it
# is OK.
print
print dictionary.get('active_rules')
print
allInstalled = True
for moduleName in sorted(adagio.modules):
    print ' -', moduleName, ':',

    if not dirObject.options.has_option(moduleName, 'exec'):
        print 'OK'
        continue

    executable = adagio.findExecutable(moduleName, dirObject)
    if executable != None:
        print 'OK'
    else:
        # One application is missing, get the executable name
        allInstalled = False
        executable = properties.getProperty(dirObject.options, moduleName, 
                                            'exec')
        print dictionary.get('disabled').format(executable)

# If something is missing, explain a bit more what to do
print
if not allInstalled:
    print dictionary.get('missing_application')

sys.exit(0)
