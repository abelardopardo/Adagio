<?xml version="1.0" encoding="UTF-8"?>

<project name="Exam processing rules" default="exam">

  <!--
      Given the following properties:

      exam.src.dir: directory from where to take the source files
      exam.dst.dir: directory where the produced files are stored
      exam.file: file to process (insert exam heading)
      exam.bilingual.file: file to process (insert exam heading)
      exam.output.format: Extension of the output file
      exam.extra.args: Extra arguments to invoke xsltproc

      Given one single file either in exam.file or exam.bilingual.file, process
      it to obtain the HTML rendering of the file.

  -->

  <!-- Checks for availability of different binaries -->
  <import file="Latex.xml"/>
  <import file="Dvi2bitmap.xml"/>
  <import file="BilingualDB.xml"/>

  <!-- Public Property definition -->
  <property name="exam.src.dir"        value="${basedir}"/>
  <property name="exam.dst.dir"        value="${exam.src.dir}"/>
  <property name="exam.equation.dir"   value="equations"/>
  <property name="exam.output.format"  value=".html"/>
  <property name="exam.extra.args"     value="--stringparam
					      passivetex.extensions 1
					      --stringparam 
					      tex.math.in.alt latex"/>
  <property name="exam.file"           value=""/>
  <property name="exam.bilingual.file" value=""/>
  <property name="exam.style.file"     value="${ada.home}/XslStyles/Exam.xsl"/>

  <!-- Private properties -->
  <property name="exam.debug.level"    value="${ada.debug.level}"/>

  <!-- Define two properties containing the absolute src and dst paths -->
  <pathconvert property="exam.abssrc.dir" pathsep=" ">
    <path location="${exam.src.dir}"/>
  </pathconvert>
  <pathconvert property="exam.absdst.dir" pathsep=" ">
    <path  location="${exam.dst.dir}"/>
  </pathconvert>

  <!-- Source file to be processed by exam -->
  <filelist id="exam.filelist" dir="${exam.abssrc.dir}"
	   files="${exam.file}"/>

  <!-- Bilingual source file to be processed by exam -->
  <filelist id="exam.bilingual.filelist" dir="${exam.abssrc.dir}"
	   files="${exam.bilingual.file}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="exam.check.values" depends="initial.check, exam.dump.properties">

    <!-- Obtain the filelist with the source file to see if it is empty -->
    <pathconvert property="exam.source.filelist.property" pathsep=" ">
      <filelist refid="exam.filelist"/>
      <filelist refid="exam.bilingual.filelist"/>
    </pathconvert>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="exam.check">
      <and>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${exam.abssrc.dir}" arg2="" trim="true"/></not>
	<!-- There must be some file defined -->
        <not>
	  <equals arg1="${exam.source.filelist.property}" arg2="" trim="true"/>
	</not>
	<!-- At least one of the variable must be empty -->
	<or>
	  <equals arg1="${exam.file}" arg2="" trim="true"/>
	  <equals arg1="${exam.bilingual.file}" arg2="" trim="true"/>
	</or>
	<!-- Require a non-empty dst.dir as well -->
        <not><equals arg1="${exam.absdst.dir}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${exam.debug.level}">  exam.check              = "${exam.check}"</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="exam.processing.NOT" unless="exam.check">
    <echo level="${exam.debug.level}">exam.processing                ---</echo>
    <echo level="${exam.debug.level}">${basedir}</echo>
  </target>

  <!-- Process the file through the four steps until the exam is produced -->
  <target name="exam.processing" depends="exam.check.values, exam.processing.NOT"
	  if="exam.check" description="Process the exam file">

    <echo>exam.processing (Step 1a/5)  CALL(xsltproc.processing)</echo>

    <!-- Call bilingualdb -->
    <antcall target="bilingualdb.processing" inheritAll="false">
      <param name="bilingualdb.src.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.dst.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="bilingualdb.files"         value="${exam.bilingual.file}"/>
      <param name="bilingualdb.extra.args"    value="${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(bilingualdb.processing ES)</echo>

    <echo>exam.processing (Step 1b/5) CALL(bilingualdb.processing)</echo>

    <!-- Call bilingualdb -->
    <antcall target="bilingualdb.processing" inheritAll="false">
      <param name="bilingualdb.src.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.dst.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="bilingualdb.files"         value="${exam.bilingual.file}"/>
      <param name="bilingualdb.output.format" value="_solution.html"/>
      <param name="bilingualdb.extra.args"    
	     value="--stringparam ada.testquestions.include.solutions yes 
		    ${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(bilingualdb.processing ES)</echo>

    <echo>exam.processing (Step 1c/5) CALL(bilingualdb.processing)</echo>

    <!-- Call bilingualdb -->
    <antcall target="bilingualdb.processing" inheritAll="false">
      <param name="bilingualdb.src.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.dst.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="bilingualdb.files"         value="${exam.bilingual.file}"/>
      <param name="bilingualdb.output.format" value="_pguide.html"/>
      <param name="bilingualdb.extra.args"    
	     value="--stringparam ada.testquestions.include.solutions yes 
		    --stringparam ada.testquestions.include.history yes 
		    --stringparam ada.testquestions.include.id yes 
		    --stringparam professorguide.include.guide yes
		    ${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(bilingualdb.processing ES)</echo>

    <echo>exam.processing (Step 1d/5) CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="xsltproc.files"         value="${exam.file}"/>
      <param name="xsltproc.extra.args"    value="${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(xsltproc.processing ES)</echo>

    <echo>exam.processing (Step 3f/5) CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="xsltproc.files"         value="${exam.file}"/>
      <param name="xsltproc.output.format" value="_solution.html"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.testquestions.include.solutions yes 
		    ${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(xsltproc.processing ES)</echo>

    <echo>exam.processing (Step 1f/5) CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="xsltproc.files"         value="${exam.file}"/>
      <param name="xsltproc.output.format" value="_pguide.html"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.testquestions.include.solutions yes 
		    --stringparam ada.testquestions.include.history yes 
		    --stringparam ada.testquestions.include.id yes 
		    --stringparam professorguide.include.guide yes
		    ${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(xsltproc.processing ES)</echo>

    <echo>exam.processing (Step 4/5)  CALL(latex.processing)</echo>

    <!-- Call latex -->
    <antcall target="latex.processing" inheritAll="false">
      <param name="latex.src.dir"       value="${exam.dst.dir}"/>
      <param name="latex.dst.dir"       value="${exam.dst.dir}"/>
      <param name="latex.files"         value="tex-math-equations.tex"/>
      <param name="latex.extra.args"    value="-interaction=nonstopmode"/>
    </antcall>

    <echo>exam.processing             END(latex.processing ES)</echo>

    <echo>exam.processing (Step 5/5)  CALL(dvi2bitmap.processing)</echo>

    <mkdir dir="${exam.absdst.dir}${file.separator}${exam.equation.dir}"/>

    <!-- Call dvi2bitmap -->
    <antcall target="dvi2bitmap.processing" inheritAll="false">
      <param name="dvi2bitmap.src.dir"       value="${exam.dst.dir}"/>
      <param name="dvi2bitmap.dst.dir"       value="${exam.dst.dir}"/>
      <param name="dvi2bitmap.files"         value="tex-math-equations.dvi"/>
    </antcall>

    <echo>exam.processing             END(dvi2bitmap.processing ES)</echo>

  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="exam.clean.NOT" unless="exam.check">
    <echo level="${exam.debug.level}">exam.clean                  ---</echo>
    <echo level="${exam.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean files produced by exam -->
  <target name="exam.clean" 
	  depends="exam.check.values, exam.clean.NOT"
	  if="exam.check" 
	  description="Remove files produced by exam">

    <echo>exam.clean                  CALL(xsltproc.clean ES)</echo>

    <!-- Call dvi2bitmap -->
    <antcall target="dvi2bitmap.clean" inheritAll="false">
      <param name="dvi2bitmap.src.dir"       value="${exam.dst.dir}"/>
      <param name="dvi2bitmap.dst.dir"       value="${exam.dst.dir}"/>
      <param name="dvi2bitmap.files"         value="tex-math-equations.dvi"/>
    </antcall>

    <delete failonerror="false">
      <fileset dir="${exam.equation.dir}" includes="*"/>
    </delete>

    <delete dir="${exam.equation.dir}" failonerror="false"/>

    <delete failonerror="false" file="missfont.log"/>

    <!-- Call latex -->
    <antcall target="latex.clean" inheritAll="false">
      <param name="latex.src.dir"       value="${exam.dst.dir}"/>
      <param name="latex.dst.dir"       value="${exam.dst.dir}"/>
      <param name="latex.files"         value="tex-math-equations.tex"/>
      <param name="latex.extra.args"    value="-interaction=nonstopmode"/>
    </antcall>

    <delete failonerror="false" file="tex-math-equations.tex"/>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="xsltproc.files"         value="${exam.file}"/>
      <param name="xsltproc.extra.args"    value="${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing (Step 3f/5) CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="xsltproc.files"         value="${exam.file}"/>
      <param name="xsltproc.output.format" value="_pguide.html"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.testquestions.include.solutions yes 
		    --stringparam ada.testquestions.include.history yes 
		    --stringparam ada.testquestions.include.id yes 
		    --stringparam professorguide.include.guide yes
		    ${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(xsltproc.processing ES)</echo>

    <echo>exam.processing (Step 3e/5) CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="xsltproc.files"         value="${exam.file}"/>
      <param name="xsltproc.output.format" value="_solution.html"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.testquestions.include.solutions yes 
		    ${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(xsltproc.processing ES)</echo>

    <echo>exam.processing (Step 3d/5) CALL(xsltproc.processing)</echo>

    <echo>exam.processing (Step 3c/5) CALL(bilingualdb.processing)</echo>

    <!-- Call bilingualdb -->
    <antcall target="bilingualdb.clean" inheritAll="false">
      <param name="bilingualdb.src.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.dst.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="bilingualdb.files"         value="${exam.bilingual.file}"/>
      <param name="bilingualdb.output.format" value="_pguide.html"/>
      <param name="bilingualdb.extra.args"    
	     value="--stringparam ada.testquestions.include.solutions yes 
		    --stringparam ada.testquestions.include.history yes 
		    --stringparam ada.testquestions.include.id yes 
		    --stringparam professorguide.include.guide yes
		    ${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(bilingualdb.processing ES)</echo>

    <echo>exam.processing (Step 3b/5) CALL(bilingualdb.processing)</echo>

    <!-- Call bilingualdb -->
    <antcall target="bilingualdb.clean" inheritAll="false">
      <param name="bilingualdb.src.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.dst.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="bilingualdb.files"         value="${exam.bilingual.file}"/>
      <param name="bilingualdb.output.format" value="_solution.html"/>
      <param name="bilingualdb.extra.args"    
	     value="--stringparam ada.testquestions.include.solutions yes 
		    ${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(bilingualdb.processing ES)</echo>

    <echo>exam.processing (Step 3a/5) CALL(bilingualdb.processing)</echo>

    <!-- Call bilingualdb -->
    <antcall target="bilingualdb.clean" inheritAll="false">
      <param name="bilingualdb.src.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.dst.dir"       value="${exam.dst.dir}"/>
      <param name="bilingualdb.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="bilingualdb.files"         value="${exam.bilingual.file}"/>
      <param name="bilingualdb.extra.args"    value="${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(bilingualdb.processing ES)</echo>

    <delete dir="${exam.absdst.dir}" 
	    includes="__bogus__file__name 
                      ${exam.raw.version1.filelist.property} 
		      ${exam.raw.version2.filelist.property}"/>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean"       inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Dump.xsl"/>
      <param name="xsltproc.output.format" value="_raw.xml"/>
      <param name="xsltproc.files"         value="${exam.file}
						  ${exam.bilingual.file}"/>
      <param name="xsltproc.extra.args"    value="${exam.extra.args}"/>
    </antcall>

  </target>

  <!-- Dump the properties defined in this script -->
  <target name="exam.dump.properties" depends="initial.check">
    <echo level="${exam.debug.level}"> ------ exam properties ----
    exam.abssrc.dir     ="${exam.abssrc.dir}"
    exam.absdst.dir     ="${exam.absdst.dir}"
    exam.file           ="${exam.file}"
    exam.bilingual.file ="${exam.bilingual.file}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="exam" depends="initial.delete.build.out, exam.processing"/>

</project>
