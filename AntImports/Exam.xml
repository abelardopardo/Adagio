<?xml version="1.0" encoding="UTF-8"?>

<project name="Exam processing rules" default="exam">

  <!--
      Given the following properties:

      exam.src.dir: directory from where to take the source files
      exam.dst.dir: directory where the produced files are stored
      exam.file: file to process
      exam.output.format: Extension of the output file
      exam.extra.args: Extra arguments to invoke xsltproc
      exam.bilingual.file: file to process

      Given one single file either in exam.file or exam.bilingual.file, process
      it to obtain two versions with the shuffled questions.

  -->

  <!-- Checks for availability of different binaries -->
  <import file="Xsltproc.xml"/>

  <!-- Public Property definition -->
  <property name="exam.src.dir"        value="${basedir}"/>
  <property name="exam.dst.dir"        value="${exam.src.dir}"/>
  <property name="exam.output.format"  value=".html"/>
  <property name="exam.extra.args"     value=""/>
  <property name="exam.file"           value=""/>
  <property name="exam.bilingual.file" value=""/>
  <property name="exam.style.file"     value="${ada.home}/XslStyles/Exam.xsl"/>

  <!-- Private properties -->
  <property name="exam.debug.level"    value="${ada.debug.level}"/>

  <!-- Define two properties containing the absolute src and dst paths -->
  <pathconvert property="exam.abssrc.dir" pathsep=" ">
    <path location="${exam.src.dir}"/>
  </pathconvert>
  <pathconvert property="exam.absdst.dir" pathsep=" ">
    <path  location="${exam.dst.dir}"/>
  </pathconvert>

  <!-- Source file to be processed by exam -->
  <filelist id="exam.filelist" dir="${exam.abssrc.dir}"
	   files="${exam.file}"/>

  <!-- Bilingual source file to be processed by exam -->
  <filelist id="exam.bilingual.filelist" dir="${exam.abssrc.dir}"
	   files="${exam.bilingual.file}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="exam.check.values" 
	  depends="initial.check, exam.dump.properties">

    <!-- Obtain the filelist with the source file to see if it is empty -->
    <pathconvert property="exam.source.filelist.property" pathsep=" ">
      <filelist refid="exam.filelist"/>
      <filelist refid="exam.bilingual.filelist"/>
    </pathconvert>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="exam.check">
      <and>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${exam.abssrc.dir}" arg2=""/></not>
	<!-- There must be some file defined -->
        <not><equals arg1="${exam.source.filelist.property}" arg2=""/></not>
	<!-- At least one of the variable must be empty -->
	<or>
	  <equals arg1="${exam.file}" arg2=""/>
	  <equals arg1="${exam.bilingual.file}" arg2=""/>
	</or>
	<!-- Require a non-empty dst.dir as well -->
        <not><equals arg1="${exam.absdst.dir}" arg2=""/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${exam.debug.level}">  exam.check              = "${exam.check}"</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="exam.processing.NOT" unless="exam.check">
    <echo level="${exam.debug.level}">exam.processing                ---</echo>
    <echo level="${exam.debug.level}">${basedir}</echo>
  </target>

  <!-- Process the file through the four steps until the exam is produced -->
  <target name="exam.processing" 
	  depends="exam.check.values, exam.processing.NOT"
	  if="exam.check"
	  description="Process the exam file">

    <echo>exam.processing (Step 1/4)  CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Dump.xsl"/>
      <param name="xsltproc.output.format" value="_raw.xml"/>
      <param name="xsltproc.files"         value="${exam.file}"/>
      <param name="xsltproc.extra.args"    value="${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(xsltproc.processing ES)</echo>

    <!-- Obtain the filelist with the source file to see if it is empty -->
    <pathconvert property="exam.source.raw.filelist.property" pathsep=" ">
      <filelist refid="exam.filelist"/>
      <filelist refid="exam.bilingual.filelist"/>
      <mapper type="glob" from="*.xml" to="*_raw.xml"/>
    </pathconvert>

    <echo>exam.processing (Step 2/4)  RUN(Shuffling)</echo>

    <!-- Generating the shuffled versions -->
    <java classname="Shuffle" jvm="/usr/bin/java" output="build.out"
	  append="yes">
      <classpath>
	<pathelement 
	  location="${ada.home}/lib/TestShuffle/gol.jar"/>
	<pathelement 
	  location="${ada.home}/lib/TestShuffle/xercesImpl.jar"/>
	<pathelement 
	  location="${ada.home}/lib/TestShuffle/jdom.jar"/>
	<pathelement 
	  location="${ada.home}/lib/TestShuffle"/>
      </classpath>
      <arg value="${exam.source.raw.filelist.property}"/>
    </java>

    <!-- Obtain the filelist with the source file to see if it is empty -->
    <pathconvert property="exam.source.raw.filelist.property" pathsep=" ">
      <filelist refid="exam.filelist"/>
      <filelist refid="exam.bilingual.filelist"/>
      <mapper type="glob" from="*.xml" to="*_raw.xml"/>
    </pathconvert>

    <!-- Remove _raw from version 1 file name -->
    <move todir="${exam.absdst.dir}" includeemptydirs="false">
      <fileset dir="${exam.absdst.dir}">
	<include name="*_raw_1.xml"/>
      </fileset>
      <mapper type="glob" from="*_raw_1.xml" to="*_1.xml"/>
    </move>
    
    <!-- Remove _raw from version 2 file name -->
    <move todir="${exam.absdst.dir}" includeemptydirs="false">
      <fileset dir="${exam.absdst.dir}">
	<include name="*_raw_2.xml"/>
      </fileset>
      <mapper type="glob" from="*_raw_2.xml" to="*_2.xml"/>
    </move>
    
    <!-- Obtain a filelist with the newly produced files -->
    <pathconvert property="exam.raw.version1.filelist.property" pathsep=" ">
      <filelist refid="exam.filelist"/>
      <filelist refid="exam.bilingual.filelist"/>
      <mapper type="glob" from="${exam.absdst.dir}/*.xml" to="*_1.xml"/>
    </pathconvert>
    <pathconvert property="exam.raw.version2.filelist.property" pathsep=" ">
      <filelist refid="exam.filelist"/>
      <filelist refid="exam.bilingual.filelist"/>
      <mapper type="glob" from="${exam.absdst.dir}/*.xml" to="*_2.xml"/>
    </pathconvert>
    <filelist id="exam.raw.filelist"
	      files="${exam.raw.version1.filelist.property} 
		     ${exam.raw.version2.filelist.property}"/>

    <echo>exam.processing (Step 3/4)  CALL(xsltproc.processing)</echo>
    <echo>AAA ${exam.raw.version1.filelist.property} 
BBB ${exam.raw.version2.filelist.property}</echo>
    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Exam.xsl"/>
      <param name="xsltproc.files"         
	     value="${exam.raw.version1.filelist.property} 
		    ${exam.raw.version2.filelist.property}"/>
      <param name="xsltproc.extra.args"    value="${exam.extra.args}"/>
    </antcall>

    <echo>exam.processing             END(xsltproc.processing ES)</echo>

  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="exam.clean.NOT" unless="exam.check">
    <echo level="${exam.debug.level}">exam.clean                  ---</echo>
    <echo level="${exam.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean files produced by exam -->
  <target name="exam.clean" 
	  depends="exam.check.values, exam.clean.NOT"
	  if="exam.check" 
	  description="Remove files produced by exam">

    <echo>exam.clean                  CALL(xsltproc.clean ES)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean"       inheritAll="false">
      <param name="xsltproc.src.dir"       value="${exam.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${exam.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${ada.home}/XslStyles/Dump.xsl"/>
      <param name="xsltproc.output.format" value="_raw${exam.output.format}"/>
      <param name="xsltproc.files"         value="${exam.file}"/>
      <param name="xsltproc.extra.args"    value="${exam.extra.args}"/>
    </antcall>

  </target>

  <!-- Dump the properties defined in this script -->
  <target name="exam.dump.properties" depends="initial.check">
    <echo level="${exam.debug.level}"> ------ exam properties ----
    exam.exec           ="${exam.exec}"
    exam.abssrc.dir     ="${exam.abssrc.dir}"
    exam.absdst.dir     ="${exam.absdst.dir}"
    exam.file           ="${exam.file}"
    exam.bilingual.file ="${exam.bilingual.file}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="exam" depends="initial.delete.build.out, exam.processing"/>

</project>
