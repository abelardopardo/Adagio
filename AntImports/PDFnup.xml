<?xml version="1.0" encoding="UTF-8"?>

<project name="PDFnup file processing" default="pdfnup.processing">

  <!--
      Given the following properties:

      pdfnup.src.dir: directory from where to take the source files
      pdfnup.dst.dir: directory where the translated files are stored
      pdfnup.nup.option: value to pass to the tool for nup option
      pdfnup.files: comma/space separated list of files to process

      Producd 2up PDF files
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>

  <!-- Property definition -->
  <property name="pdfnup.exec"       value="pdfnup"/>
  <property name="pdfnup.src.dir"    value="${basedir}"/>
  <property name="pdfnup.dst.dir"    value="${pdfnup.src.dir}"/>
  <property name="pdfnup.nup.option" value="1x2"/>
  <property name="pdfnup.files"      value=""/>
  <!-- Source files to be processed by pdfnup -->
  <fileset id="pdfnup.fileset" dir="${pdfnup.src.dir}"
	   includes="${pdfnup.files}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="pdfnup.check.values" 
	  depends="initial.check, pdfnup.dump.properties">

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="pdfnup.check">
      <and>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${pdfnup.src.dir}" arg2=""/></not>
	<!-- There must be some files defined -->
        <not><equals arg1="${pdfnup.files}" arg2=""/></not>
	<!-- Require a non-empty dst.dir as well -->
        <not><equals arg1="${pdfnup.dst.dir}" arg2=""/></not>
      </and>
    </condition>

    <!-- The required binaries need to be available. -->
    <available property="pdfnup.execution.possible"
	       file="${pdfnup.exec}${executable.file.extension}"
	       filepath="${env.PATH}"/>

    <condition property="pdfnup.failure">
      <and>
	<isset property="pdfnup.check"/>
	<not><isset property="pdfnup.execution.possible"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="info">    pdfnup.check          = "${pdfnup.check}"
  pdfnup.execution.possible = ${pdfnup.execution.possible}
  pdfnup.failure            = ${pdfnup.failure}</echo>
  </target>

  <target name="pdfnup.bomb.out" if="pdfnup.failure">
    <fail message="Ups! You requested the execution of pdfnup but the executable ${pdfnup.exec} was not found installed in your system"/>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="pdfnup.processing.NOT" depends="pdfnup.bomb.out"
	  unless="pdfnup.check">
    <echo>pdfnup.processing           ---</echo>
    <echo>${basedir}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true, and it has
  as dependency the NOT target. That way, if the property is not set, this
  target is not executed and instead, the one notifying the user of such event
  is executed. -->
  <target name="pdfnup.processing" 
	  depends="pdfnup.check.values, pdfnup.processing.NOT"
	  if="pdfnup.check"
	  description="Creates landscape 2 up latex files">

    <echo>pdfnup.processing           RUN</echo>
    <echo>${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${pdfnup.dst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${pdfnup.dst.dir}" 
	   append="yes" failonerror="true" executable="${pdfnup.exec}"
	   output="build.out">
      <arg value="--nup"/>
      <arg value="${pdfnup.nup.option}"/>
      <arg value="--outfile"/>
      <targetfile/>
      <srcfile/>
      <fileset refid="pdfnup.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.pdf" to="*-${pdfnup.nup.option}.pdf"/>
    </apply>    
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="pdfnup.clean.NOT" unless="pdfnup.check">
    <echo>pdfnup.clean                ---</echo>
    <echo>${basedir}</echo>
  </target>

  <!-- Clean files produced by pdfnup -->
  <target name="pdfnup.clean" depends="pdfnup.check.values, pdfnup.clean.NOT"
	  if="pdfnup.check" description="Remove files produced by pdfnup">

    <echo>pdfnup.clean                RUN</echo>
    <echo>${basedir}</echo>

    <!-- Obtain the fileset containing the produced files. This is done to be
    able to display the deleted files (debugging) -->
    <pathconvert property="pdfnup.target.fileset.property" pathsep=" ">
      <fileset refid="pdfnup.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="*.pdf" to="*-${pdfnup.nup.option}.pdf"/>
	<mapper type="flatten"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${pdfnup.target.fileset.property}</echo>

    <!-- Perform the delete operation. The failonerror attributge is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false">
      <fileset dir="${pdfnup.dst.dir}"
	       includes="${pdfnup.target.fileset.property}">
	<include name="__bogus__file__to__avoid__empty__fileset"/>
      </fileset>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="pdfnup.dump.properties" depends="initial.check">
    <echo level="info"> ------ Pdfnup properties ----
    pdfnup.exec       ="${pdfnup.exec}"
    pdfnup.src.dir    ="${pdfnup.src.dir}"
    pdfnup.dst.dir    ="${pdfnup.dst.dir}"
    pdfnup.nup.option ="${pdfnup.nup.option}"
    pdfnup.files      ="${pdfnup.files}" </echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="pdfnup" depends="initial.delete.build.out, pdfnup.processing"/>
</project>
