<?xml version="1.0" encoding="UTF-8"?>

<project name="PDFnup file processing" default="pdfnup">

  <!--
      Given the following properties:

      pdfnup.src.dir: directory from where to take the source files
      pdfnup.dst.dir: directory where the translated files are stored
      pdfnup.nup.option: value to pass to the tool for nup option
      pdfnup.files: comma/space separated list of files to process

      Producd 2up PDF files
  -->

  <import file="InitialCheck.xml"/>

  <property name="pdfnup.exec"           value="pdfnup"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${pdfnup.exec}"/>
  
  <!-- Private properties -->
  <property name="pdfnup.debug.level"    value="${ada.debug.level}"/>
    
  <target name="pdfnup.init" depends="ada.init" if="pdfnup.execution.possible">
    <!-- Public Property definition -->
    <property name="pdfnup.src.dir"        value="${basedir}"/>
    <property name="pdfnup.dst.dir"        value="${pdfnup.src.dir}"/>
    <property name="pdfnup.nup.option"     value="1x2"/>
    <property name="pdfnup.files"          value=""/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="pdfnup" ADA.SRC.DIR="${pdfnup.src.dir}"
      ADA.DST.DIR="${pdfnup.dst.dir}" ADA.FILES="${pdfnup.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="pdfnup.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${pdfnup.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${pdfnup.debug.level}">    pdfnup.check          = "${pdfnup.check}"
  pdfnup.execution.possible = ${pdfnup.execution.possible}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="pdfnup.processing" depends="pdfnup.init"
	  if="pdfnup.check" description="Creates landscape 2 up latex files">

    <echo>pdfnup.processing           RUN</echo>
    <echo level="${pdfnup.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${pdfnup.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${pdfnup.absdst.dir}" 
	   append="yes" failonerror="true" executable="${pdfnup.exec}" 
	   output="build.out">
      <arg value="--nup"/>
      <arg value="${pdfnup.nup.option}"/>
      <arg value="--outfile"/>
      <targetfile/>
      <srcfile/>
      <fileset refid="pdfnup.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.pdf" to="*-${pdfnup.nup.option}.pdf"/>
    </apply>    
  </target>

  <!-- Clean files produced by pdfnup -->
  <target name="pdfnup.clean" depends="pdfnup.init"
	  if="pdfnup.check" description="Remove files produced by pdfnup">

    <echo>pdfnup.clean                RUN</echo>
    <echo level="${pdfnup.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="pdfnup.target.filelist.property" pathsep=" ">
      <fileset refid="pdfnup.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${pdfnup.abssrc.dir}/*" 
		to="${pdfnup.absdst.dir}/*"/>
	<mapper type="glob" from="*.pdf" to="*-${pdfnup.nup.option}.pdf"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${pdfnup.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${pdfnup.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="pdfnup.dump.properties" depends="pdfnup.init">
    <echo level="${pdfnup.debug.level}"> ------ pdfnup properties ----
    pdfnup.exec       ="${pdfnup.exec}"
    pdfnup.abssrc.dir ="${pdfnup.abssrc.dir}"
    pdfnup.absdst.dir ="${pdfnup.absdst.dir}"
    pdfnup.nup.option ="${pdfnup.nup.option}"
    pdfnup.files      ="${pdfnup.files}" </echo>
  </target>

  <target name="pdfnup.report.YES" depends="pdfnup.init"
	  if="pdfnup.execution.possible">
    <echo>Pdfnup             |     *     |</echo>
  </target>

  <target name="pdfnup.report.NO" depends="pdfnup.init"
	  unless="pdfnup.execution.possible">
    <echo>Pdfnup             |           |     * (install pdfjam)</echo>
  </target>

  <target name="pdfnup.report" depends="pdfnup.report.YES,
				      pdfnup.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="pdfnup" depends="pdfnup.init, initial.delete.build.out, pdfnup.processing"/>
</project>
