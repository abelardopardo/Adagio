<?xml version="1.0" encoding="UTF-8"?>

<project name="Synchronize two locations with rsync" default="rsync">

  <!--
      Given the following properties:

      rsync.source: location from where to take the source files
      rsync.destination: location where to copy these files
      rsync.basic.args: Some basic options for rsync
      rsync.extra.args: Specific options for rsync
      rsync.remote.shell.option: Type of shell to use

      Execute rsync to synchronize the content in source with the content in
      destination. The script is supposed to work TOTALLY in batch mode, that is
      without any password exchange. Make sure you have the public/private keys
      properly installed to bypass this step.
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>

  <property name="rsync.exec"                value="rsync"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${rsync.exec}"/>
  
  <!-- Private properties -->
  <property name="rsync.debug.level"    value="${ada.debug.level}"/>

  <target name="rsync.init" depends="ada.init" if="rsync.execution.possible">
    <!-- Property definition -->
    <property name="rsync.source"              value="${basedir}"/>
    <property name="rsync.destination"         value="${rsync.source}"/>
    <property name="rsync.basic.args"          value="-avz"/>
    <property name="rsync.extra.args"          value=""/>
    <property name="rsync.remote.shell.option" value="-e ssh"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="rsync.check">
      <and>
	<!-- The source needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${rsync.source}" arg2="" trim="true"/></not>
	<!-- There must be some files defined -->
        <not><equals arg1="${rsync.destination}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${rsync.debug.level}">  rsync.check              = "${rsync.check}"</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="rsync.processing" depends="rsync.init"
	  if="rsync.check" description="Invoke rsync to perform the synchronization">

    <echo>rsync.processing           RUN</echo>
    <echo level="${rsync.debug.level}">${basedir}</echo>

    <!-- Execute the command. Watch out for source and destination -->
    <exec executable="${rsync.exec}" failonerror="true">
      <arg value="${rsync.remote.shell.option}"/>
      <arg line="${rsync.basic.args}"/>
      <arg line="${rsync.extra.args}"/>
      <arg value="${rsync.source}"/>
      <arg value="${rsync.destination}"/>
    </exec>
  </target>

  <!-- Clean files produced by rsync -->
  <target name="rsync.clean" depends="rsync.init"
	  if="rsync.check" description="Remove files produced by rsync">

    <!-- No action here because is a too high level procedure. Removing the
    destination dir is probably not that frequent, and therefore can be done
    manually -->
    <echo>rsync.clean           NOT RUN!</echo>
    <echo level="${rsync.debug.level}">${basedir}</echo>
    
  </target>
  
  <!-- Dump the properties defined in this script -->
  <target name="rsync.dump.properties" depends="rsync.init">
    <echo level="${rsync.debug.level}">------ rsync properties ----
 rsync.exec                =${rsync.exec}
 rsync.source              =${rsync.source}
 rsync.destination         =${rsync.destination}
 rsync.extra.args          =${rsync.extra.args}
 rsync.basic.args          =${rsync.basic.args}
 rsync.remote.shell.option =${rsync.remote.shell.option}</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="rsync" depends="rsync.init, initial.delete.build.out, rsync.processing"/>
</project>
