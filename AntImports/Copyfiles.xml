<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Copy files from SRC to DST" default="copyfiles">
  <description>
    Copy copyfiles.files in copyfiles.src.dir to copyfiles.dst.dir. The copy is
    performed only if the two dirs are non empty.
  </description>

  <import file="InitialCheck.xml"/>

  <!-- Private properties -->
  <property name="copyfiles.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>
  
  <target name="copyfiles.init" depends="ada.init">
    <!-- Public Property definition -->
    <property name="copyfiles.src.dir"      value="${basedir}" 
	      description="Directory where the sources are taken"/>
    <property name="copyfiles.dst.dir"      value="${basedir}" 
	      description="Directory where the produced files are created"/>
    <property name="copyfiles.files"        value=""
	      description="Source file names (no path, it is copyfiles.src.dir)"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="copyfiles" ADA.SRC.DIR="${copyfiles.src.dir}"
      ADA.DST.DIR="${copyfiles.dst.dir}" ADA.FILES="${copyfiles.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="copyfiles.check">
      <and>
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
	<not>
	  <equals arg1="${copyfiles.source.filelist.property}" arg2="" trim="true"/>
	</not>
	<!-- SRC and DST directories must be different -->
	<not>
	  <equals arg1="${copyfiles.absdst.dir}" arg2="${copyfiles.abssrc.dir}" trim="true"/>
	</not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${copyfiles.debug.level}">  copyfiles.check          = "${copyfiles.check}"</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="copyfiles.processing" depends="copyfiles.init" if="copyfiles.check" description="Actually perform the copy">

    <echo>copyfiles.processing        RUN</echo>
    <echo level="${copyfiles.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${copyfiles.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <copy todir="${copyfiles.absdst.dir}">
      <fileset refid="copyfiles.fileset"/>
    </copy>
  </target>

  <!-- Clean the copied files -->
  <target name="copyfiles.clean" depends="copyfiles.init"
    if="copyfiles.check" description="Delete files copied to dst">

    <echo>copyfiles.clean             RUN</echo>
    <echo level="${copyfiles.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="copyfiles.target.filelist.property" pathsep=" ">
      <fileset refid="copyfiles.fileset"/>
      <mapper type="glob" from="${copyfiles.abssrc.dir}/*" 
	      to="${copyfiles.absdst.dir}/*"/>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${copyfiles.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${copyfiles.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="copyfiles.dump.properties" depends="copyfiles.init">
    <echo level="${copyfiles.debug.level}"> ------ Copyfiles properties ----
    copyfiles.abssrc.dir ="${copyfiles.abssrc.dir}"
    copyfiles.absdst.dir ="${copyfiles.absdst.dir}"
    copyfiles.files      ="${copyfiles.files}" </echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="copyfiles" depends="copyfiles.init, initial.delete.build.out, copyfiles.processing"/>
</project>
