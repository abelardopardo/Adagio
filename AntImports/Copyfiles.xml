<?xml version="1.0" encoding="UTF-8"?>

<project name="Copy files from SRC to DST" default="copyfiles">

  <!--
      Given the following properties:

      copyfiles.src.dir: source directory to obtain the files
      copyfiles.dst.dir: directory where the files are to be copied
      copyfiles.files:   List of files to copy from src to dst

      copies copyfiles.files in copy.src.dir to copyfiles.dst.dir. The copy is
      performed only if the two dirs are non empty.
  -->

  <import file="InitialCheck.xml"/>

  <!-- Private properties -->
  <property name="copyfiles.debug.level"    value="${ada.debug.level}"/>
  
  <target name="copyfiles.init" depends="ada.init">
    <!-- Public Property definition -->
    <property name="copyfiles.src.dir"      value="${basedir}" />
    <property name="copyfiles.dst.dir"      value="${basedir}" />
    <property name="copyfiles.files"        value=""/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="copyfiles" ADA.SRC.DIR="${copyfiles.src.dir}"
      ADA.DST.DIR="${copyfiles.dst.dir}" ADA.FILES="${copyfiles.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="copyfiles.check">
      <and>
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
	<not>
	  <equals arg1="${copyfiles.source.filelist.property}" arg2="" trim="true"/>
	</not>
	<!-- SRC and DST directories must be different -->
	<not>
	  <equals arg1="${copyfiles.absdst.dir}" arg2="${copyfiles.abssrc.dir}" trim="true"/>
	</not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${copyfiles.debug.level}">copyfiles.check          = "${copyfiles.check}"
copyfiles.execution.possible = ${copyfiles.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="copyfiles.processing" depends="copyfiles.init" if="copyfiles.check" description="Actually perform the copy">

    <echo>copyfiles.processing        RUN</echo>
    <echo level="${copyfiles.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${copyfiles.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <copy todir="${copyfiles.absdst.dir}">
      <fileset refid="copyfiles.fileset"/>
    </copy>
  </target>

  <!-- Clean the copied files -->
  <target name="copyfiles.clean" depends="copyfiles.init"
    if="copyfiles.check" description="Delete files copied to dst">

    <echo>copyfiles.clean             RUN</echo>
    <echo level="${copyfiles.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="copyfiles.target.filelist.property" pathsep=" ">
      <fileset refid="copyfiles.fileset"/>
      <mapper type="glob" from="${copyfiles.abssrc.dir}/*" 
	      to="${copyfiles.absdst.dir}/*"/>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${copyfiles.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${copyfiles.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="copyfiles.dump.properties" depends="copyfiles.init">
    <echo level="${copyfiles.debug.level}"> ------ Copyfiles properties ----
    copyfiles.abssrc.dir ="${copyfiles.abssrc.dir}"
    copyfiles.absdst.dir ="${copyfiles.absdst.dir}"
    copyfiles.files      ="${copyfiles.files}" </echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="copyfiles" depends="copyfiles.init, initial.delete.build.out, copyfiles.processing"/>
</project>
