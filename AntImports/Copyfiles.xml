<?xml version="1.0" encoding="UTF-8"?>

<project name="Copy files from SRC to DST" default="copyfiles">

  <!--
      Given the following properties:

      copyfiles.files:   List of files to copy from src to dst
      copyfiles.src.dir: source directory to obtain the files
      copyfiles.dst.dir: directory where the files are to be copied

      copies copyfiles.files in copy.src.dir to copyfiles.dst.dir. The copy is
      performed only if the two dirs are non empty.
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>

  <!-- Property definition -->
  <property name="copyfiles.src.dir"      value="${basedir}" />
  <property name="copyfiles.dst.dir"      value="${basedir}" />
  <property name="copyfiles.files"        value=""/>

  <!-- Private properties -->
  <property name="copyfiles.debug.level"    value="${ada.debug.level}"/>

  <!-- Define two properties containing the absolute src and dst paths -->
  <pathconvert property="copyfiles.abssrc.dir" pathsep=" ">
    <path location="${copyfiles.src.dir}"/>
  </pathconvert>
  <pathconvert property="copyfiles.absdst.dir" pathsep=" ">
    <path  location="${copyfiles.dst.dir}"/>
  </pathconvert>

  <!-- Source files to be copied (fileset to allow wildcards) -->
  <fileset id="copyfiles.fileset" dir="${copyfiles.abssrc.dir}"
	   includes="${copyfiles.files}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="copyfiles.check.values" 
	  depends="initial.check, copyfiles.dump.properties">

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="copyfiles.check">
      <and>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	     empty definition of this variable. At least a . needs to be present -->
	<not><equals arg1="${copyfiles.abssrc.dir}" arg2=""/></not>
	<!-- There must be some files defined -->
	<not><equals arg1="${copyfiles.files}" arg2=""/></not>
	<!-- Require a non-empty dst.dir as well -->
	<not><equals arg1="${copyfiles.absdst.dir}" arg2=""/></not>
	<!-- SRC and DST directories must be different -->
	<not>
	  <equals arg1="${copyfiles.absdst.dir}" arg2="${copyfiles.abssrc.dir}"/>
	</not>
      </and>
    </condition>

    <!-- The required condition not to bomb out -->
    <condition property="copyfiles.execution.possible">
      <and>
	<available file="${copyfiles.abssrc.dir}"/> 
      </and>
    </condition>

    <condition property="copyfiles.failure">
      <and>
	<isset property="copyfiles.check"/>
	<not><isset property="copyfiles.execution.possible"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${copyfiles.debug.level}">copyfiles.check          = "${copyfiles.check}"
  copyfiles.execution.possible = ${copyfiles.execution.possible}
  copyfiles.failure            = ${copyfiles.failure}</echo>
  </target>

  <target name="copyfiles.bomb.out" if="copyfiles.failure">
    <fail message="Copyfiles rule cannot be executed. Review the value of
		   variable copyfiles.src.dir"/>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="copyfiles.processing.NOT" depends="copyfiles.bomb.out" 
	  unless="copyfiles.check">
    <echo>copyfiles.processing        ---</echo>
    <echo level="${copyfiles.debug.level}">${basedir}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true, and it has
  as dependency the NOT target. That way, if the property is not set, this
  target is not executed and instead, the one notifying the user of such event
  is executed. -->
  <target name="copyfiles.processing" 
	  depends="copyfiles.check.values, copyfiles.processing.NOT"
	  if="copyfiles.check" description="Actually perform the copy">

    <echo>copyfiles.processing        RUN</echo>
    <echo level="${copyfiles.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${copyfiles.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <copy todir="${copyfiles.absdst.dir}">
      <fileset refid="copyfiles.fileset"/>
    </copy>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="copyfiles.clean.NOT" unless="copyfiles.check">
    <echo>copyfiles.clean             ---</echo>
    <echo level="${copyfiles.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean the produced files -->
  <target name="copyfiles.clean" depends="copyfiles.check.values,
					  copyfiles.clean.NOT" 
    if="copyfiles.check" description="Delete files copied to dst">

    <echo>copyfiles.clean             RUN</echo>
    <echo level="${copyfiles.debug.level}">${basedir}</echo>

    <!-- Obtain the filelist with the produced files. -->
    <pathconvert property="copyfiles.target.filelist.property" pathsep=" ">
      <fileset refid="copyfiles.fileset"/>
      <mapper type="glob" from="${copyfiles.abssrc.dir}/*" 
	      to="${copyfiles.absdst.dir}/*"/>
    </pathconvert>
    <filelist id="copyfiles.target.filelist"
	      files="${copyfiles.target.filelist.property}"/>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${copyfiles.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attributge is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <filelist refid="copyfiles.target.filelist"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="copyfiles.dump.properties" depends="initial.check">
    <echo level="${copyfiles.debug.level}"> ------ Copyfiles properties ----
    copyfiles.abssrc.dir ="${copyfiles.abssrc.dir}"
    copyfiles.absdst.dir ="${copyfiles.absdst.dir}"
    copyfiles.files      ="${copyfiles.files}" </echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="copyfiles" depends="initial.delete.build.out, copyfiles.processing"/>
</project>
