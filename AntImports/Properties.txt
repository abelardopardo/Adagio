#
# Properties to fire the different processing steps
#
#
# The order is:
#
#        copyfiles definitions
#        xfig definitions
#        inkscape definitions
#        gimp definitions
#        convert definitions
#        xsltproc definitions
#        docbook definitions
#        dblatex definitions
#        pdflatex definitions
#        pdfnup definitions
# 	 export definitions
#
# The values that appear next to the equal sign in the definition are the
# default values. You only need to include a new definition if different from
# the default value.
#
# Whenever a list of files is required, unless otherswise noted, it is a comma
# or space separated of filenames (no paths).

#
# Global variables affecting the entire rule system. Probably should not
# re-define them
#
# ada.debug.level=info                   # Level of messages shown

#
# Set of directories to process before processing the local rules
#
# subrecursive.dst.dir=current dir
# subrecursive.dirs=                     # List of directories
# subrecursive.target=                   # Target to execute in remote dir

#
# Copy files from one location to another
#
# copyfiles.src.dir=current dir	         # Dir from where to take the files
# copyfiles.dst.dir=${copyfiles.src.dir} # Destination
# copyfiles.files=  			 # List of files to copy

#
# Translate XFIG to a given format
#
# xfig.exec=fig2dev            # Name (no path) of the executable
# xfig.src.dir=current dir     # Source dir where fig files are
# xfig.dst.dir=${xfig.src.dir} # Dest dir where translated figures are created
# xfig.output.format=.png      # Format to translate to from xfig
# xfig.border=2                # Border to apply to the translation (for png)          
# xfig.smooth=4                # Smooth factor for png (see man xfig)
# xfig.extra.args=             # Addtnl. options to fig2dev
# xfig.files=                  # List of *.fig files to process

#
# Translate from  Inkscape SVG to PNG/PS/PDF/EPS
#
# inkscape.exec=inkscape               # Name (no path) of the executable
# inkscape.src.dir=current dir         # Source dir where SVG files are
# inkscape.dst.dir=${inkscape.src.dir} # Dest dir where figures are created
# inkscape.output.format=png	       # Format to export pnt, pdf, eps or ps
# inkscape.files=		       # List of *.svg files to process

#
# Translate from Gimp XCF format to PNG
#
# gimp.exec=gimp			# Name (no path) of the executable
# gimp.src.dir=current dir 		# Source dir where the XCF files are
# gimp.script.file=${ada.home}${file.separator}AntImports${file.separator}xcftopng.scm
# gimp.files=				# List of *.xcf files to process

#
# Convert figures with the convert tool (modify geometry and/or crop)
#
# convert.exec=convert			# Name (no path) of the executable
# convert.src.dir=current dir 		# Dir from where to take the figures
# convert.dst.dir=${convert.src.dir} 	# Dir where to produce the figures
# convert.geometry= 			# New geometry to scale the files
# convert.crop= 			# Crop option for convert -crop geometry
# convert.format=png 			# Output format
# convert.files=                        # List of files to be processed

#
# Generic Xsltproc processing
#
# xsltproc.exec=xsltproc		# Name (no path) of the executable
# xsltproc.src.dir=current dir 		# Dir from where xml files are taken
# xsltproc.dst.dir=${xsltproc.src.dir}	# Dir where result is produced
# xsltproc.style.file=			# Style to apply to all the files
# xsltproc.output.format=.html		# Output format (WITH DOT!)
# xsltproc.extra.args=			# Addtnl. args to pass to xsltproc
# xsltproc.files=			# List of *.xml files to process

#
# Stylesheet file to merge with another stylesheet
#
# mergestyles.exec=xsltproc		# Tool to use. Normally xsltproc
# mergestyles.src.dir=current dir	# Dir from where to take the stylesheet
# mergestyles.master.style=   		# Sheet to use as base
# mergestyles.dst.dir=${mergestyles.dst.dir} # Destination dir.
# mergestyles.file.to.import=		# Sheet to add at the end of master
# mergestyles.style.file=${ada.home}/XslStyles/Mergesheets.xsl # To combine them     

#
# Docbook processing
#
# docbook.src.dir=current dir		# Dir where the source files are
# docbook.dst.dir=${docbook.src.dir}	# Dir to create the result
# docbook.output.format=.html		# Output format (WITH DOT!)
# docbook.style.file=${ada.home}/XslStyles/DocbookProfile.xsl # Default style to use
# docbook.files=			# List of *.xml files to process

#
# Bilingual Docbook processing
#
# bilingualdb.src.dir=current dir	# Source directory
# bilingualdb.dst.dir=${bilingualdb.src.dir} # Destination dir.
# bilingualdb.output.format=.html	# Output format (WITH DOT!)
# bilingualdb.style.file=${ada.home}/XslStyles/DocbookProfile.xsl # Default style
# bilingualdb.files=			# List of *.xml files to process

#
# Properties to generate files as if to support a lab submission
#
# laboratory.src.dir= current dir	# Source directory
# laboratory.dst.dir=${laboratory.src.dir} # Destination dir
# laboratory.style.file=${ada.home}/XslStyles/Laboratory.xsl 
					# Default style sheet
# laboratory.submit.style.file=${ada.home}/XslStyles/Submit.xsl 
					# Style for the submission
# laboratory.output.format=.html	# Output format (WITH DOT!)
# laboratory.files=			# List of docbook file sto process
# laboratory.bilingual.files=		# List of docbook to process bilingually

#
# Generation of an RSS channel
#
# rss.src.dir=current dir		# Directory with source file
# rss.dst.dir=${rss.src.dir}		# Destination dir
# rss.output.format=_rss.xml		# Suffix to add to source file name
# rss.extra.args=			# Args passed to xsltproc
# rss.files=				# List of files to process
# rss.style.file=${ada.home}/XslStyles/Rss.xsl
					# Style to create the RSS file
# rss.style.file.tohtml=${ada.home}/XslStyles/RssToHtml.xsl
					# Style to create an HTML help file

#
# Latex processing
#
# latex.exec=latex			# Name of the program
# latex.src.dir=current dir		# Source dir
# latex.dst.dir=${latex.src.dir}	# Destination dir
# latex.files=				# List of files to process

#
# Processing dvi files to produce postscript
#
# dvips.exec=dvips			# Name of the program
# dvips.src.dir=current dir		# Source directory
# dvips.dst.dir=${dvips.src.dir}	# Destination directory
# dvips.files=				# List of files to process

#
# Translate PS files to PDF
#
# ps2pdf.exec=ps2pdf			# Name of the program
# ps2pdf.src.dir=current dir		# Source directory
# ps2pdf.dst.dir=${ps2pdf.src.dir}	# Destination directory
# ps2pdf.files=				# List of files to process

#
# pdflatex processing. Directly from *.tex to *.pdf (Does not work in windows)
#
# pdflatex.exec=pdflatex		# Name of the program
# pdflatex.src.dir=current.dir		# Dir where to obtain the source files
# pdflatex.dst.dir=${pdflatex.src.dir}  # Destination dir
# pdflatex.files=			# List of files to process

#
# Generic dblatex processing
#
# dblatex.exec=dblatex			# Name (no path) of the executable
# dblatex.src.dir=current.dir		# Dir from where xml files are taken
# dblatex.dst.dir=${dblatex.src.dir}	# Dir where result is produced
# dblatex.files=			# List of *.xml files to process
# dblatex.extra.args=			# Addtnl. args to pass to dblatex

#
# For PDFnup processing (process PDF files and create n-up PDF files)
#
# pdfnup.exec=pdfnup			# Name (no path) of the executable
# pdfnup.src.dir=current dir		# Dir from where PDF files are taken
# pdfnup.dst.dir=${pdfnup.src.dir}	# Dest dir where files are created
# pdfnup.nup.option=1x2			# Output Format to produce
# pdfnup.files=				# List of *.pdf files to process

#
# For Export. Copy files outside of the resource
#
# export.src.dir=current dir		# Dir from where to take the files
# export.dst.dir=${export.src.dir}	# Dir to export to
# export.files=				# List of files to export

#
# List of files to clean
#
# clean.src.dir=current dir		# Source dir
# clean.files=				# List of files to delete

#
# Time window during which the directory is really built. This functionality
# offers the possibility of having a set of directories the content of which is
# only taken into account during certain period of time. The variable
# timewindow.open if different from "true" the timewindow is considered closed.
# 
# timewindow.format=yyyy-MM-dd'T'HH:mm:ss # Date/time format
# timewindow.start=			# Date/time validity starts
# timewindow.end=			# Date/time validity ends
# timewindow.open=true			# General gate permission
# timewindow.now=current time		# Date/time NOW
