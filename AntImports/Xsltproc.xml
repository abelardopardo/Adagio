<?xml version="1.0" encoding="UTF-8"?>

<project name="Apply xsltproc and a style to a given file list"
	 default="xsltproc">

  <!--
      Given the following properties:

      xsltproc.src.dir: directory from where to take the source files
      xsltproc.dst.dir: directory where the produced files are stored
      xsltproc.files: List of files to process
      xsltproc.style.file: Style file to be used
      xsltproc.output.format: Extension of the output file
      xsltproc.extra.args: Extra arguments to invoke xsltproc
      xsltproc.files: Comma separate list of files to process

      Produce the aplication of a stylefile to the files in xsltproc.fileset
  -->

  <import file="InitialCheck.xml"/>

  <property name="xsltproc.exec"           value="xsltproc"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${xsltproc.exec}"/>
  
  <!-- Private properties -->
  <property name="xsltproc.debug.level"    value="${ada.debug.level}"/>

  <target name="xsltproc.init" depends="ada.init" if="xsltproc.execution.possible">

    <!-- Public Property definition -->
    <property name="xsltproc.src.dir"        value="${basedir}"/>
    <property name="xsltproc.dst.dir"        value="${xsltproc.src.dir}"/>
    <property name="xsltproc.style.file"     value=""/>
    <property name="xsltproc.output.format"  value=".html"/>
    <property name="xsltproc.extra.args"     value=""/>
    <property name="xsltproc.files"          value=""/>
    <property name="xsltproc.mergestyles.style.file"     
	      value="${ada.home}/XslStyles/Mergesheets.xsl"/>
    <property name="mergestyles.master.style"   value=""/>

    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="xsltproc" ADA.SRC.DIR="${xsltproc.src.dir}"
      ADA.DST.DIR="${xsltproc.dst.dir}" ADA.FILES="${xsltproc.files}"/>

    <!-- Obtain the filelist with the produced files. -->
    <pathconvert property="xsltproc.target.filelist.property" pathsep=" ">
      <fileset refid="xsltproc.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${xsltproc.abssrc.dir}/*" 
		to="${xsltproc.absdst.dir}/*"/>
	<mapper type="glob" from="*.xml" to="*${xsltproc.output.format}"/>
      </chainedmapper>
    </pathconvert>
    <filelist id="xsltproc.target.filelist"
	      files="${xsltproc.target.filelist.property}"/>
    
    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="xsltproc.check">
      <and>
	<!-- 
	     There must be some files in the fileset (after regexp expansion) 
	-->
	<not>
	  <equals arg1="${xsltproc.source.filelist.property}" arg2="" trim="true"/>
	</not>
	<!-- Require a non-empty style file -->
        <not><equals arg1="${xsltproc.style.file}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <macrodef name="xsltproc.execute">
      <attribute name="DIR"/>
      <attribute name="XSLTPROC.ABSDST.DIR"/>
      <attribute name="XSLTPROC.EXTRA.ARGS"/>
      <attribute name="XSLTPROC.STYLE.FILE"/>
      <element name="fileset.and.mapper" implicit="yes"/>
      <sequential>
	<!-- Execute the command. Watch out for src.dir and dst.dir -->
	<apply dir="@{DIR}" parallel="false" dest="@{XSLTPROC.ABSDST.DIR}" 
	       append="yes" failonerror="true" executable="${xsltproc.exec}" 
	       output="build.out">
	  <arg value="--xinclude"/>
	  <arg value="--stringparam"/>
	  <arg value="ada.home"/>
	  <arg value="${ada.home}"/>
	  <arg value="--stringparam"/>
	  <arg value="basedir"/>
	  <arg value="${basedir}"/>
	  <arg value="--stringparam"/>
	  <arg value="ada.course.home"/>
	  <arg value="${ada.course.home}"/>
	  <arg value="--stringparam"/>
	  <arg value="ada.current.datetime"/>
	  <arg value="${ada.current.datetime}"/>
	  <arg value="--stringparam"/>
	  <arg value="profile.revision"/>
	  <arg value="${ada.profile.revision}"/>
	  <arg line="@{XSLTPROC.EXTRA.ARGS}"/>
	  <arg value="-o"/>
	  <targetfile/>
	  <arg value="@{XSLTPROC.STYLE.FILE}"/>
	  <fileset.and.mapper />
	</apply>
      </sequential>
    </macrodef>

    <macrodef name="mergestyles">
      <attribute name="MERGESTYLES.DST.DIR" default="${xsltproc.dst.dir}"/>
      <attribute name="MERGESTYLES.FILE.TO.IMPORT"/>
      <sequential>

	<!-- Style to merge -->
	<fileset id="mergestyles.master.fileset" file="${mergestyles.master.style}"/>

	<pathconvert property="mergestyles.output.prefix">
	  <fileset refid="mergestyles.master.fileset"/>
	  <chainedmapper>
	    <mapper type="glob" from="*.xml" to="*"/>
	    <mapper type="flatten"/>
	  </chainedmapper>
	</pathconvert>
	<pathconvert property="mergestyles.output.suffix">
	  <filelist id="mergestyles.import.filelist" 
		    files="@{MERGESTYLES.FILE.TO.IMPORT}"/>
	  <mapper type="flatten"/>
	</pathconvert>

	<!-- Create the dst directory -->
	<mkdir dir="@{MERGESTYLES.DST.DIR}" />
	
	<!-- Force the dependency checking on changes on the style sheet -->
	<dependset>
	  <srcfilelist files="${xsltproc.mergestyles.style.file}" />
	  <srcfilelist files="@{MERGESTYLES.FILE.TO.IMPORT}" />
	  <srcfileset dir="${ada.home}/XslStyles">
	    <include name="*.xsl" />
	  </srcfileset>
	  <targetfilelist 
	    dir="@{MERGESTYLES.DST.DIR}"
	    files="${mergestyles.output.prefix}_${mergestyles.output.suffix}"/>
	</dependset>
	
	<!-- Execute the command. Watch out for src.dir and dst.dir -->
	<apply dir="${basedir}" parallel="false"
	       dest="@{MERGESTYLES.DST.DIR}" append="yes" failonerror="true"
	       executable="${xsltproc.exec}"  output="build.out">
	  <arg value="--xinclude"/>
	  <arg value="--stringparam"/>
	  <arg value="mergesheets.file.to.fold"/>
	  <arg value="@{MERGESTYLES.FILE.TO.IMPORT}"/>
	  <arg value="-o"/>
	  <targetfile/>
	  <arg value="${xsltproc.mergestyles.style.file}"/>
	  <fileset refid="mergestyles.master.fileset"/>
	  <!-- Mapper from source files to produced files -->
	  <mapper type="glob" from="*.xml" to="*_${mergestyles.output.suffix}"/>
	</apply>
      </sequential>
    </macrodef>

    <macrodef name="mergestyles.clean">
      <attribute name="MERGESTYLES.DST.DIR" default="${xsltproc.dst.dir}"/>
      <attribute name="MERGESTYLES.FILE.TO.IMPORT"/>
      <sequential>
	<!-- Style to merge -->
	<fileset id="mergestyles.master.fileset" file="${mergestyles.master.style}"/>

	<pathconvert property="mergestyles.output.prefix">
	  <fileset refid="mergestyles.master.fileset"/>
	  <chainedmapper>
	    <mapper type="glob" from="*.xml" to="*"/>
	    <mapper type="flatten"/>
	  </chainedmapper>
	</pathconvert>
	<pathconvert property="mergestyles.output.suffix">
	  <filelist id="mergestyles.import.filelist" 
		    files="@{MERGESTYLES.FILE.TO.IMPORT}"/>
	  <mapper type="flatten"/>
	</pathconvert>

	<!-- Dump explicitly the files to be deleted -->
	<echo> deleted = ${mergestyles.output.prefix}_${mergestyles.output.suffix}</echo>

	<delete
	  file="@{MERGESTYLES.DST.DIR}/${mergestyles.output.prefix}_${mergestyles.output.suffix}"/>
      </sequential>
    </macrodef>

    <!-- Condition to detect if the stylefile needs to be pre-processed with
	 Mergestyles -->
    <condition property="xsltproc.mergestyles">
      <and>
	<istrue value="${xsltproc.check}"/>
	<not><equals arg1="${mergestyles.master.style}" arg2="" trim="true"/></not>
	<available file="${mergestyles.master.style}"/>
      </and>
    </condition>
    
    <!-- Condition to detect if the stylefile needs to only processed normally
	 Mergestyles -->
    <condition property="xsltproc.nomergestyles">
      <and>
	<istrue value="${xsltproc.check}"/>
	<equals arg1="${mergestyles.master.style}" arg2="" trim="true"/>
      </and>
    </condition>
    
    <!-- Dump the value of the properties just computed. -->
    <echo level="${xsltproc.debug.level}">    xsltproc.check          = "${xsltproc.check}"
  xsltproc.execution.possible = ${xsltproc.execution.possible}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="xsltproc.processing" 
	  depends="xsltproc.init, xsltproc.prepare.processing,
		   xsltproc.execute.nopreprocessing.step,
		   xsltproc.execute.preprocessing.step"
	  description="Apply a style to an XML file"/>

  <target name="xsltproc.prepare.processing" if="xsltproc.check">
    <!-- Create the dst directory -->
    <mkdir dir="${xsltproc.dst.dir}" />
  </target>

  <target name="xsltproc.execute.nopreprocessing.step"
	  if="xsltproc.nomergestyles"
	  description="Apply a style to an XML file WITH NO pre-processing">
    <echo>xsltproc.processing.nopre   RUN</echo>
    <echo level="${xsltproc.debug.level}">${basedir}</echo>

    <pathconvert property="xsltproc.source.dependency.property" pathsep=" ">
      <fileset refid="xsltproc.fileset"/>
    </pathconvert>

    <exec executable="bash"
	  dir="${basedir}"
	  outputproperty="xsltproc.dependency.files">
      <arg value="${ada.home}${file.separator}bin${file.separator}getdependencies.sh"/>
      <arg value="${xsltproc.source.dependency.property}"/>
    </exec>

    <echo
      level="${xsltproc.debug.level}">xsltproc.dependency.files=${xsltproc.dependency.files}
xsltproc.source.dependency.property=${xsltproc.source.dependency.property}</echo>

    <!-- Force the dependency checking on changes on the style sheet -->
    <dependset>
      <srcfileset file="${xsltproc.style.file}" />
      <srcfileset dir="${ada.home}/XslStyles">
	<include name="*.xsl" />
      </srcfileset>
      <srcfileset dir="${ada.course.home}">
	<include name="AdaCourseParams.xml" />
	<include name="Ada.properties" />
      </srcfileset>
      <srcfilelist files="${xsltproc.dependency.files}"/>
      <targetfilelist refid="xsltproc.target.filelist" />
    </dependset>

    <!-- Execute the command. Watch out for abssrc.dir and absdst.dir -->
    <xsltproc.execute DIR="${basedir}"
		  XSLTPROC.ABSDST.DIR="${xsltproc.absdst.dir}"
		  XSLTPROC.EXTRA.ARGS="${xsltproc.extra.args}"
		  XSLTPROC.STYLE.FILE="${xsltproc.style.file}">
      <fileset refid="xsltproc.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.xml" to="*${xsltproc.output.format}"/>
    </xsltproc.execute>
			 
  </target>

  <target name="xsltproc.execute.preprocessing.step"
	  if="xsltproc.mergestyles"
	  description="Apply a style to an XML file WITH pre-processing">
    <echo>xsltproc.processing.prepr   RUN</echo>
    <echo level="${xsltproc.debug.level}">${basedir}</echo>

    <!-- Merge stylesheets -->
    <mergestyles MERGESTYLES.FILE.TO.IMPORT="${xsltproc.style.file}"/>

    <!-- Flatten the import fileset to get the suffix for the new style -->
    <fileset id="xsltproc.import.fileset" file="${xsltproc.style.file}"/>
    <pathconvert property="xsltproc.output.suffix">
      <fileset refid="xsltproc.import.fileset"/>
      <mapper type="flatten"/>
    </pathconvert>

    <echo level="${xsltproc.debug.level}">xsltproc processed stylefile: ${xsltproc.absdst.dir}/${mergestyles.output.prefix}_${xsltproc.output.suffix}</echo>

    <echo level="${xsltproc.debug.level}">Srcfileset: ${xsltproc.absdst.dir}/${mergestyles.output.prefix}_${xsltproc.output.suffix}</echo>

    <pathconvert property="xsltproc.source.dependency.property" pathsep=" ">
      <fileset refid="xsltproc.fileset"/>
    </pathconvert>

    <exec executable="bash"
	  dir="${basedir}"
	  outputproperty="xsltproc.dependency.files">
      <arg value="${ada.home}${file.separator}bin${file.separator}getdependencies.sh"/>
      <arg value="${xsltproc.source.dependency.property}"/>
    </exec>

    <echo
      level="${xsltproc.debug.level}">xsltproc.dependency.files=${xsltproc.dependency.files}
xsltproc.source.dependency.property=${xsltproc.source.dependency.property}</echo>

    <!-- Force the dependency checking on changes on the style sheet -->
    <dependset>
      <srcfileset file="${xsltproc.absdst.dir}/${mergestyles.output.prefix}_${xsltproc.output.suffix}"/>
      <srcfileset dir="${ada.home}/XslStyles">
	<include name="*.xsl" />
      </srcfileset>
      <srcfileset dir="${ada.course.home}">
	<include name="AdaCourseParams.xml" />
	<include name="Ada.properties" />
      </srcfileset>
      <srcfilelist files="${xsltproc.dependency.files}"/>
      <targetfilelist refid="xsltproc.target.filelist" />
    </dependset>

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <xsltproc.execute DIR="${basedir}"
		  XSLTPROC.ABSDST.DIR="${xsltproc.absdst.dir}"
		  XSLTPROC.EXTRA.ARGS="${xsltproc.extra.args}"
		  XSLTPROC.STYLE.FILE="${xsltproc.absdst.dir}/${mergestyles.output.prefix}_${xsltproc.output.suffix}">
      <fileset refid="xsltproc.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.xml" to="*${xsltproc.output.format}"/>
    </xsltproc.execute>

  </target>

  <!-- Clean files produced by xsltproc -->
  <target name="xsltproc.clean" depends="xsltproc.init"
	  if="xsltproc.check" description="Remove files produced by xsltproc">

    <echo>xsltproc.clean              RUN</echo>
    <echo level="${xsltproc.debug.level}">${basedir}</echo>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${xsltproc.target.filelist.property}</echo>

    <!-- This call has no effect if no mergestyles.master.style is given -->
    <mergestyles.clean MERGESTYLES.FILE.TO.IMPORT="${xsltproc.style.file}"/>
    <!--
    <antcall target="mergestyles.clean" inheritAll="false">
      <param name="mergestyles.dst.dir" value="${xsltproc.dst.dir}"/>
      <param name="mergestyles.file.to.import" value="${xsltproc.style.file}"/>
    </antcall>
    -->

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${xsltproc.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="xsltproc.dump.properties" depends="xsltproc.init">
    <echo level="${xsltproc.debug.level}"> ------ xsltproc properties ----
    xsltproc.exec            ="${xsltproc.exec}"
    xsltproc.abssrc.dir ="${xsltproc.abssrc.dir}"
    xsltproc.absdst.dir ="${xsltproc.absdst.dir}"
    xsltproc.style.file      ="${xsltproc.style.file}"
    xsltproc.output.format   ="${xsltproc.output.format}"
    xsltproc.extra.args      ="${xsltproc.extra.args}"
    xsltproc.files           ="${xsltproc.files}"
    xsltproc.target.filelist ="${xsltproc.target.filelist.property}"
    xsltproc.mergestyles     ="${xsltproc.mergestyles}"</echo>
  </target>

  <target name="xsltproc.report.YES" depends="xsltproc.init"
	  if="xsltproc.execution.possible">
    <echo>Xsltproc           |     *     |</echo>
  </target>

  <target name="xsltproc.report.NO" depends="xsltproc.init"
	  unless="xsltproc.execution.possible">
    <echo>Xsltproc           |           |     * (install ${xsltproc.exec})</echo>
  </target>

  <target name="xsltproc.report" depends="xsltproc.report.YES,
				      xsltproc.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="xsltproc" depends="xsltproc.init, initial.delete.build.out, xsltproc.processing"/>
</project>
