<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Transltate MSF to PDF with OpenOffice" default="msf2pdf">

  <description>
    Translate MSF files to PDF (Experimental!)
  </description>
  <!--
      Given the following properties:

      msf2pdf.src.dir: directory from where to take the source files
      msf2pdf.dst.dir: directory where the produced files are stored
      msf2pdf.files: comma/space separated list of files to process

      Produce ??
  -->

  <import file="InitialCheck.xml"/>

  <property name="msf2pdf.basic.exec" value="soffice"/>
  <property name="msf2pdf.exec" value="ada_msf_to_pdf"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${msf2pdf.basic.exec}"
			      ADA.PREFIX="msf2pdf" />
  
  <!-- Private properties -->
  <property name="msf2pdf.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>

  <target name="msf2pdf.init" depends="ada.init" if="msf2pdf.execution.possible">
    <!-- Public Property definition -->
    <property name="msf2pdf.src.dir"        value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="msf2pdf.files"          value=""
	      description="Source file names (no path, it is msf2pdf.src.dir)"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <pathconvert property="msf2pdf.abssrc.dir" pathsep=" ">
      <path location="${msf2pdf.src.dir}"/>
    </pathconvert>
    <!-- Source files to be processed by msf2pdf (fileset to allow wildcards) -->
    <fileset id="msf2pdf.fileset" dir="${msf2pdf.abssrc.dir}"
	     includes="__bogus__file__name ${msf2pdf.files}"/>

    <!-- Obtain the filelist with the source files to see if it is empty -->
    <pathconvert property="msf2pdf.source.filelist.property" pathsep=" ">
      <fileset refid="msf2pdf.fileset"/>
    </pathconvert>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="msf2pdf.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${msf2pdf.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${msf2pdf.debug.level}">  msf2pdf.check              = "${msf2pdf.check}"
  msf2pdf.execution.possible = ${msf2pdf.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="msf2pdf.processing" depends="msf2pdf.init"
	  if="msf2pdf.check" description="Translate the msf files to pdf using openoffice">

    <echo>msf2pdf.processing          RUN</echo>
    <echo level="${msf2pdf.debug.level}">${basedir}</echo>

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${msf2pdf.abssrc.dir}" 
	   append="yes" failonerror="true" executable="${msf2pdf.exec}" 
	   output="build.out">
      <fileset refid="msf2pdf.fileset"/>
      <!-- Mapper from source files to produced files -->
      <compositemapper>
	<mapper type="glob" from="*.ppt" to="*.pdf"/>
	<mapper type="glob" from="*.doc" to="*.pdf"/>
      </compositemapper>
    </apply>    
  </target>

  <!-- Clean files produced by msf2pdf -->
  <target name="msf2pdf.clean" depends="msf2pdf.init"
	  if="msf2pdf.check" description="Remove files produced by msf2pdf">

    <echo>msf2pdf.clean               RUN</echo>
    <echo level="${msf2pdf.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="msf2pdf.target.filelist.property" pathsep=" ">
      <fileset refid="msf2pdf.fileset"/>
      <compositemapper>
	<mapper type="glob" from="*.ppt" to="*.pdf"/>
	<mapper type="glob" from="*.doc" to="*.pdf"/>
      </compositemapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${msf2pdf.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${msf2pdf.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="msf2pdf.dump.properties" depends="msf2pdf.init">
    <echo level="${msf2pdf.debug.level}"> ------ msf2pdf properties ----
    msf2pdf.exec       ="${msf2pdf.exec}"
    msf2pdf.abssrc.dir ="${msf2pdf.abssrc.dir}"
    msf2pdf.files      ="${msf2pdf.files}"</echo>
  </target>

  <target name="msf2pdf.report.YES" depends="msf2pdf.init"
	  if="msf2pdf.execution.possible">
    <echo>                   | * Only If |</echo>
    <echo>msf2pdf            |OpenOffice |</echo>
    <echo>                   |2.4 or latr|</echo>
  </target>

  <target name="msf2pdf.report.NO" depends="msf2pdf.init"
	  unless="msf2pdf.execution.possible">
    <echo>msf2pdf            |           |     * (OpenOffice 2.4 or later)</echo>
  </target>

  <target name="msf2pdf.report" depends="msf2pdf.report.YES,
				      msf2pdf.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="msf2pdf" depends="msf2pdf.init, initial.delete.build.out, msf2pdf.processing"/>
</project>
