<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Execute Dvips" default="dvips">
  <description>
    Execute the dvips over a set of given DVI files
  </description>

  <import file="InitialCheck.xml"/>

  <property name="dvips.exec"           value="dvips"
	    description="Name of the dvips executable"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${dvips.exec}"/>
  
  <!-- Private properties -->
  <property name="dvips.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>

  <target name="dvips.init" depends="ada.init" if="dvips.execution.possible">
    <!-- Public Property definition -->
    <property name="dvips.src.dir"        value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="dvips.dst.dir"        value="${basedir}"
	      description="Directory where the produced files are created"/>
    <property name="dvips.files"          value=""
	      description="Source file names (no path, it is dvips.src.dir)"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="dvips" ADA.SRC.DIR="${dvips.src.dir}"
      ADA.DST.DIR="${dvips.dst.dir}" ADA.FILES="${dvips.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="dvips.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${dvips.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${dvips.debug.level}">dvips.check              = "${dvips.check}"
dvips.execution.possible = ${dvips.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="dvips.processing" depends="dvips.init"
	  if="dvips.check" description="Execute dvips">

    <echo>dvips.processing            RUN</echo>
    <echo level="${dvips.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${dvips.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${dvips.absdst.dir}" 
	   append="yes" failonerror="true" executable="${dvips.exec}" 
	   output="build.out">
      <srcfile/>
      <arg value="-o"/>
      <targetfile/>
      <fileset refid="dvips.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.dvi" to="*.ps"/>
    </apply>    
  </target>

  <!-- Clean files produced by dvips -->
  <target name="dvips.clean" depends="dvips.init"
	  if="dvips.check" description="Remove files produced by dvips">

    <echo>dvips.clean                 RUN</echo>
    <echo level="${dvips.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="dvips.target.filelist.property" pathsep=" ">
      <fileset refid="dvips.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${dvips.abssrc.dir}/*" 
		to="${dvips.absdst.dir}/*"/>
	<mapper type="glob" from="*.dvi" to="*.ps"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${dvips.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${dvips.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="dvips.dump.properties" depends="dvips.init">
    <echo level="${dvips.debug.level}"> ------ dvips properties ----
    dvips.exec       ="${dvips.exec}"
    dvips.abssrc.dir ="${dvips.abssrc.dir}"
    dvips.absdst.dir ="${dvips.absdst.dir}"
    dvips.files      ="${dvips.files}"</echo>
  </target>

  <target name="dvips.report.YES" depends="dvips.init"
	  if="dvips.execution.possible">
    <echo>Dvips              |     *     |</echo>
  </target>

  <target name="dvips.report.NO" depends="dvips.init"
	  unless="dvips.execution.possible">
    <echo>Dvips              |           |     * (install ${dvips.exec})</echo>
  </target>

  <target name="dvips.report" depends="dvips.report.YES,
				      dvips.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="dvips" depends="dvips.init, initial.delete.build.out, dvips.processing"/>
</project>
