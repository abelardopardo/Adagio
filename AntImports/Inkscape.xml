<?xml version="1.0" encoding="UTF-8"?>

<project name="Figure Processing with inkscape" default="inkscape">

  <!--
      Given the following properties:

      inkscape.src.dir: directory from where to take the source files
      inkscape.dst.dir: directory where the translated files are stored
      inkscape.files: comma/space separated list of files to process

      Process files in fileset. They are processed by inkscape and translated
      to PNG, PDF, EPS or PS format.
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>

  <!-- Property definition -->
  <property name="inkscape.exec"          value="inkscape"/>
  <property name="inkscape.src.dir"       value="${basedir}"/>
  <property name="inkscape.dst.dir"       value="${inkscape.src.dir}"/>
  <property name="inkscape.output.format" value="png"/>
  <property name="inkscape.files"         value=""/>

  <!-- Private properties -->
  <property name="inkscape.debug.level"    value="${ada.debug.level}"/>

  <!-- Property to store the option for inkscape to export in a given format -->
  <property name="inkscape.export.option" value=""/>

  <!-- Define two properties containing the absolute src and dst paths -->
  <pathconvert property="inkscape.abssrc.dir" pathsep=" ">
    <path location="${inkscape.src.dir}"/>
  </pathconvert>
  <pathconvert property="inkscape.absdst.dir" pathsep=" ">
    <path  location="${inkscape.dst.dir}"/>
  </pathconvert>

  <!-- Source files to be processed by inkscape (fileset to allow wildcards) -->
  <fileset id="inkscape.fileset" dir="${inkscape.abssrc.dir}"
	   includes="___bogus___file__name ${inkscape.files}"/>


  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="inkscape.check.values" 
	  depends="initial.check, inkscape.dump.properties">

    <!-- Obtain the filelist with the source files to see if it is empty -->
    <pathconvert property="inkscape.source.filelist.property" pathsep=" ">
      <fileset refid="inkscape.fileset"/>
    </pathconvert>
    
    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="inkscape.check">
      <and>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${inkscape.abssrc.dir}" arg2="" trim="true"/></not>
	<!-- There must be some files defined -->
        <not><equals arg1="${inkscape.source.filelist.property}" arg2="" trim="true"/></not>
        <not><equals arg1="${inkscape.files}" arg2="" trim="true"/></not>
	<!-- Require a non-empty dst.dir as well -->
	<not><equals arg1="${inkscape.absdst.dir}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <!-- The required condition not to bomb out -->
    <condition property="inkscape.execution.possible">
      <and>
	<available file="${inkscape.exec}${executable.file.extension}"
		   filepath="${env.PATH}"/>
	<available file="${inkscape.abssrc.dir}"/> 
      </and>
    </condition>

    <condition property="inkscape.failure">
      <and>
	<isset property="inkscape.check"/>
	<not><isset property="inkscape.execution.possible"/></not>
      </and>
    </condition>
    
    <condition property="inkscape.export.format.png">
      <equals arg1="${inkscape.output.format}" arg2="png"/>
    </condition>

    <condition property="inkscape.export.format.eps">
      <equals arg1="${inkscape.output.format}" arg2="eps"/>
    </condition>

    <condition property="inkscape.export.format.ps">
      <equals arg1="${inkscape.output.format}" arg2="ps"/>
    </condition>

    <condition property="inkscape.export.format.pdf">
      <equals arg1="${inkscape.output.format}" arg2="pdf"/>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${inkscape.debug.level}">  inkscape.check          = "${inkscape.check}"
  inkscape.execution.possible = ${inkscape.execution.possible}
  inkscape.failure            = ${inkscape.failure}</echo>
  </target>

  <target name="inkscape.bomb.out" if="inkscape.failure">
    <fail message="inkscape rule cannot be executed. Review the value of
		   variables inkscape.src.dir and inkscape.exec"/>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="inkscape.processing.NOT" depends="inkscape.bomb.out" 
	  unless="inkscape.check">
    <echo level="${inkscape.debug.level}">inkscape.processing         ---</echo>
    <echo level="${inkscape.debug.level}">${basedir}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true, and it has
  as dependency the NOT target. That way, if the property is not set, this
  target is not executed and instead, the one notifying the user of such event
  is executed. -->
  <target name="inkscape.processing" 
	  depends="inkscape.check.values, inkscape.processing.NOT"
	  if="inkscape.check"
	  description="Creates the files from the SVG files">

    <echo>inkscape.processing         RUN</echo>
    <echo level="${inkscape.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${inkscape.dst.dir}"/>

    <antcall target="inkscape.execute.export.command.png"/>
    <antcall target="inkscape.execute.export.command.eps"/>
    <antcall target="inkscape.execute.export.command.ps"/>
    <antcall target="inkscape.execute.export.command.pdf"/>
  </target>

  <target name="inkscape.execute.export.command.png"
	  if="inkscape.export.format.png">
    <antcall target="inkscape.execute.export.command">
      <param name="inkscape.export.option" value="--export-png"/>
    </antcall>
  </target>
    
  <target name="inkscape.execute.export.command.pdf"
	  if="inkscape.export.format.pdf">
    <antcall target="inkscape.execute.export.command">
      <param name="inkscape.export.option" value="--export-pdf"/>
    </antcall>
  </target>
    
  <target name="inkscape.execute.export.command.eps"
	  if="inkscape.export.format.eps">
    <antcall target="inkscape.execute.export.command">
      <param name="inkscape.export.option" value="--export-eps"/>
    </antcall>
  </target>
    
  <target name="inkscape.execute.export.command.ps"
	  if="inkscape.export.format.ps">
    <antcall target="inkscape.execute.export.command">
      <param name="inkscape.export.option" value="--export-ps"/>
    </antcall>
  </target>

  <target name="inkscape.execute.export.command">
    
    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${inkscape.dst.dir}"
	   append="yes" failonerror="true" executable="${inkscape.exec}" 
	   output="build.out">
      <arg line="${inkscape.export.option}"/>
      <targetfile/>
      <srcfile/>
      <fileset refid="inkscape.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.svg" to="*.${inkscape.output.format}"/>
    </apply>    

  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="inkscape.clean.NOT" unless="inkscape.check">
    <echo level="${inkscape.debug.level}">inkscape.clean              ---</echo>
    <echo level="${inkscape.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean files produced by inkscape -->
  <target name="inkscape.clean" 
	  depends="inkscape.check.values, inkscape.clean.NOT"
	  if="inkscape.check" description="Remove files produced by inkscape">
    
    <echo>inkscape.clean              RUN</echo>
    <echo level="${inkscape.debug.level}">${basedir}</echo>

    <!-- Obtain the filelist with the produced files. -->
    <pathconvert property="inkscape.target.filelist.property" pathsep=" ">
      <fileset refid="inkscape.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${inkscape.abssrc.dir}/*" 
		to="${inkscape.absdst.dir}/*"/>
	<mapper type="glob" from="*.svg" to="*.${inkscape.output.format}"/>
      </chainedmapper>
    </pathconvert>
    <filelist id="inkscape.target.filelist"
	      files="${inkscape.target.filelist.property}"/>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${inkscape.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attributge is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <filelist refid="inkscape.target.filelist"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="inkscape.dump.properties" depends="initial.check">
    <echo level="${inkscape.debug.level}"> ------ Inkscape properties ----
    inkscape.exec    ="${inkscape.exec}"
    inkscape.abssrc.dir ="${inkscape.abssrc.dir}"
    inkscape.absdst.dir ="${inkscape.absdst.dir}"
    inkscape.files   ="${inkscape.files}" </echo>
  </target>

  <target name="inkscape.report.YES" depends="inkscape.check.values"
	  if="inkscape.execution.possible">
    <echo>Inkscape           |     *     |</echo>
  </target>

  <target name="inkscape.report.NO" depends="inkscape.check.values"
	  unless="inkscape.execution.possible">
    <echo>Inkscape           |           |     * (install ${inkscape.exec})</echo>
  </target>

  <target name="inkscape.report" depends="inkscape.report.YES,
				      inkscape.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="inkscape" depends="initial.delete.build.out, inkscape.processing"/>
</project>
