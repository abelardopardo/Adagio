<?xml version="1.0" encoding="UTF-8"?>

<project name="Figure Processing with inkscape" default="inkscape">

  <!--
      Given the following properties:

      inkscape.src.dir: directory from where to take the source files
      inkscape.dst.dir: directory where the translated files are stored
      inkscape.files: comma/space separated list of files to process

      Process files in fileset. They are processed by inkscape and translated
      ALWAYS to PNG format (there is an script involved and it and has hardwired
      the PNG format FIX)
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>

  <!-- Property definition -->
  <property name="inkscape.exec"    value="inkscape"/>
  <property name="inkscape.src.dir" value="${basedir}"/>
  <property name="inkscape.dst.dir" value="${inkscape.src.dir}"/>
  <property name="inkscape.files"   value=""/>
  <!-- Source files to be processed by inkscape. -->
  <fileset id="inkscape.fileset" dir="${inkscape.src.dir}"
	   includes="${inkscape.files}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="inkscape.check.values" 
	  depends="initial.check, inkscape.dump.properties">

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="inkscape.check">
      <and>
	<!-- The required binaries need to be available. -->
	<available file="${inkscape.exec}${executable.file.extension}"
		   filepath="${env.PATH}"/>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${inkscape.src.dir}" arg2=""/></not>
	<!-- There must be some files defined -->
        <not><equals arg1="${inkscape.files}" arg2=""/></not>
	<!-- Require a non-empty dst.dir as well -->
	<not><equals arg1="${inkscape.dst.dir}" arg2=""/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="info">inkscape.check          = "${inkscape.check}"</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="inkscape.processing.NOT" unless="inkscape.check">
    <echo>inkscape.processing         ---</echo>
    <echo>${basedir}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true, and it has
  as dependency the NOT target. That way, if the property is not set, this
  target is not executed and instead, the one notifying the user of such event
  is executed. -->
  <target name="inkscape.processing" 
	  depends="inkscape.check.values, inkscape.processing.NOT"
	  if="inkscape.check"
	  description="Creates the files from the SVG files">

    <echo>inkscape.processing         RUN</echo>
    <echo>${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${inkscape.dst.dir}"/>

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${inkscape.dst.dir}"
	   append="yes" failonerror="true" executable="${inkscape.exec}" 
	   output="build.out">
      <arg value="-e"/>
      <targetfile/>
      <srcfile/>
      <fileset refid="inkscape.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.svg" to="*.png"/>
    </apply>    
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="inkscape.clean.NOT" unless="inkscape.check">
    <echo>inkscape.clean              ---</echo>
    <echo>${basedir}</echo>
  </target>

  <!-- Clean files produced by inkscape -->
  <target name="inkscape.clean" 
	  depends="inkscape.check.values, inkscape.clean.NOT"
	  if="inkscape.check" description="Remove files produced by inkscape">
    
    <echo>inkscape.clean              RUN</echo>
    <echo>${basedir}</echo>

    <!-- Obtain the fileset containing the produced files. This is done to be
    able to display the deleted files (debugging) -->
    <pathconvert property="inkscape.target.fileset.property" pathsep=" ">
      <fileset refid="inkscape.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="*.svg" to="*.png"/>
	<mapper type="flatten"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${inkscape.target.fileset.property}</echo>

    <!-- Perform the delete operation. The failonerror attributge is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false">
      <fileset dir="${inkscape.dst.dir}"
	       includes="${inkscape.target.fileset.property}">
	<include name="__bogus__file__to__avoid__empty__fileset"/>
      </fileset>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="inkscape.dump.properties" depends="initial.check">
    <echo level="info"> ------ Inkscape properties ----
    inkscape.exec    ="${inkscape.exec}"
    inkscape.src.dir ="${inkscape.src.dir}"
    inkscape.dst.dir ="${inkscape.dst.dir}"
    inkscape.files   ="${inkscape.files}" </echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="xfig" depends="initial.delete.build.out, xfig.processing"/>
</project>
