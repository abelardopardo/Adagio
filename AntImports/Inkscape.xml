<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Figure Processing with inkscape" default="inkscape">
  <description>
    Translate Inkscape files to PNG, EPS, etc.
  </description>

  <!--
      Given the following properties:

      inkscape.src.dir: directory from where to take the source files
      inkscape.dst.dir: directory where the translated files are stored
      inkscape.files: comma/space separated list of files to process
      inkscape.output.format: comma separated list of formats to produce
                              (e.g.: png,eps,ps,pdf). No whitespaces should
                              appear in the middle.

      Process files in fileset. They are processed by inkscape and translated
      to PNG, PDF, EPS or PS format.
  -->

  <import file="InitialCheck.xml" />

  <property name="inkscape.exec" value="inkscape"
	    description="Name of the inkscape executable"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${inkscape.exec}"/>

  <!-- Private properties -->
  <property name="inkscape.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>
    
  <target name="inkscape.init" depends="ada.init" if="inkscape.execution.possible">
    <!-- Public Property definition -->
    <property name="inkscape.src.dir"       value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="inkscape.dst.dir"       value="${basedir}"
	      description="Directory where the produced files are created"/>
    <property name="inkscape.output.format" value="png"
	      description="Comma separated list of formats to produce (e.g.: png,eps,ps,pdf).&#10;# No whitespaces should appear in the middle."/>
    <property name="inkscape.files"         value=""
	      description="Source file names (no path, it is inkscape.src.dir)"/>

    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="inkscape" ADA.SRC.DIR="${inkscape.src.dir}"
      ADA.DST.DIR="${inkscape.dst.dir}" ADA.FILES="${inkscape.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="inkscape.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion)
      -->
      <not>
	<equals arg1="${inkscape.source.filelist.property}" arg2=""
		trim="true"/>
      </not>
    </condition>
    
    <!-- Dump the value of the properties just computed. -->
    <echo level="${inkscape.debug.level}">  inkscape.check          = "${inkscape.check}"
  inkscape.execution.possible = ${inkscape.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="inkscape.processing" 
	  depends="inkscape.init, inkscape.preprocessing,
		   inkscape.export.png, inkscape.export.eps,
		   inkscape.export.ps, inkscape.export.pdf"
	  description="Creates images from the SVG files"/>
  
  <target name="inkscape.preprocessing" if="inkscape.check"
          depends="inkscape.formats.detect">
    <echo>inkscape.processing         RUN</echo>
    <echo level="${inkscape.debug.level}">${basedir}</echo>

    <macrodef name="inkscape.execute">
      <attribute name="INKSCAPE.EXPORT.OPTION" />
      <attribute name="INKSCAPE.EXPORT.EXTENSION" default=""/>
      <sequential>
	<!-- Execute the command. Watch out for src.dir and dst.dir -->
	<apply dir="${basedir}" parallel="false" dest="${inkscape.dst.dir}"
	       append="yes" failonerror="true" executable="${inkscape.exec}" 
	       output="build.out">
	  <arg line="@{INKSCAPE.EXPORT.OPTION}"/>
	  <targetfile/>
	  <srcfile/>
	  <fileset refid="inkscape.fileset"/>
	  <!-- Mapper from source files to produced files -->
	  <mapper type="glob" from="*.svg" to="*.@{INKSCAPE.EXPORT.EXTENSION}"/>
	</apply>    
      </sequential>
    </macrodef>

    <!-- Create the dst directory -->
    <mkdir dir="${inkscape.dst.dir}"/>
  </target>

  <target name="inkscape.export.png"
	  if="inkscape.export.format.png">
    <inkscape.execute INKSCAPE.EXPORT.OPTION="--export-png"
                      INKSCAPE.EXPORT.EXTENSION="png" />
  </target>

  <target name="inkscape.export.pdf"
	  if="inkscape.export.format.pdf">
    <inkscape.execute INKSCAPE.EXPORT.OPTION="--export-pdf"
                      INKSCAPE.EXPORT.EXTENSION="pdf" />
  </target>

  <target name="inkscape.export.eps"
	  if="inkscape.export.format.eps">
    <inkscape.execute INKSCAPE.EXPORT.OPTION="--export-eps"
                      INKSCAPE.EXPORT.EXTENSION="eps" />
  </target>

  <target name="inkscape.export.ps"
	  if="inkscape.export.format.ps">
    <inkscape.execute INKSCAPE.EXPORT.OPTION="--export-ps"
                      INKSCAPE.EXPORT.EXTENSION="ps" />
  </target>

  <target name="inkscape.clean.preprocessing" if="inkscape.check"
          depends="inkscape.formats.detect">
    <echo>inkscape.clean.preproc.     RUN</echo>
    <echo level="${inkscape.debug.level}">${basedir}</echo>

    <macrodef name="inkscape.clean.macro">
      <attribute name="INKSCAPE.CLEAN.FILES" default=""/>
      <sequential>
	<!-- Dump explicitly the files to be deleted -->
	<echo> deleted = @{INKSCAPE.CLEAN.FILES}</echo>

	<!-- Perform the delete operation. The failonerror attribute is needed
	     and must be set fo false because the dst directory might have been
             removed  -->
	<delete failonerror="false" includeemptydirs="true">
	  <files includes="@{INKSCAPE.CLEAN.FILES}"/>
	</delete>
      </sequential>
    </macrodef>
  </target>

  <target name="inkscape.formats.detect" if="inkscape.check">
    <echo>inkscape.formats.detect     RUN</echo>
    <echo level="${inkscape.debug.level}">${basedir}</echo>

    <condition property="inkscape.export.format.png">
      <and>
	<istrue value="${inkscape.check}"/>
	<matches pattern="(^png$)|(^png,)|(,png,)|(,png$)"
                   string="${inkscape.output.format}"/>
      </and>
    </condition>

    <condition property="inkscape.export.format.eps">
      <and>
	<istrue value="${inkscape.check}"/>
	<matches pattern="(^eps$)|(^eps,)|(,eps,)|(,eps$)"
                   string="${inkscape.output.format}"/>
      </and>
    </condition>

    <condition property="inkscape.export.format.ps">
      <and>
	<istrue value="${inkscape.check}"/>
	<matches pattern="(^ps$)|(^ps,)|(,ps,)|(,ps$)"
                   string="${inkscape.output.format}"/>
      </and>
    </condition>

    <condition property="inkscape.export.format.pdf">
	<matches pattern="(^pdf$)|(^pdf,)|(,pdf,)|(,pdf$)"
                   string="${inkscape.output.format}"/>
    </condition>
  </target>

  <target name="inkscape.clean.png"
	  if="inkscape.export.format.png">
    <pathconvert property="inkscape.target.filelist.png" pathsep=" ">
      <fileset refid="inkscape.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${inkscape.abssrc.dir}/*"
	  to="${inkscape.absdst.dir}/*"/>
	<mapper type="glob" from="*.svg" to="*.png"/>
      </chainedmapper>
    </pathconvert>
    <inkscape.clean.macro INKSCAPE.CLEAN.FILES="${inkscape.target.filelist.png}" /> 
  </target>

  <target name="inkscape.clean.pdf"
	  if="inkscape.export.format.pdf">
    <pathconvert property="inkscape.target.filelist.pdf" pathsep=" ">
      <fileset refid="inkscape.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${inkscape.abssrc.dir}/*"
	  to="${inkscape.absdst.dir}/*"/>
	<mapper type="glob" from="*.svg" to="*.pdf"/>
      </chainedmapper>
    </pathconvert>
    <inkscape.clean.macro INKSCAPE.CLEAN.FILES="${inkscape.target.filelist.pdf}" /> 
  </target>
  
  <target name="inkscape.clean.eps"
	  if="inkscape.export.format.eps">
    <pathconvert property="inkscape.target.filelist.eps" pathsep=" ">
      <fileset refid="inkscape.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${inkscape.abssrc.dir}/*"
	  to="${inkscape.absdst.dir}/*"/>
	<mapper type="glob" from="*.svg" to="*.eps"/>
      </chainedmapper>
    </pathconvert>
    <inkscape.clean.macro INKSCAPE.CLEAN.FILES="${inkscape.target.filelist.eps}" /> 
  </target>
  
  <target name="inkscape.clean.ps"
	  if="inkscape.export.format.ps">
    <pathconvert property="inkscape.target.filelist.ps" pathsep=" ">
      <fileset refid="inkscape.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${inkscape.abssrc.dir}/*" 
	  to="${inkscape.absdst.dir}/*"/>
	<mapper type="glob" from="*.svg" to="*.ps"/>
      </chainedmapper>
    </pathconvert>
    <inkscape.clean.macro INKSCAPE.CLEAN.FILES="${inkscape.target.filelist.ps}" /> 
  </target>

  <!-- Clean files produced by inkscape -->
  <target name="inkscape.clean"
          depends="inkscape.init, inkscape.clean.preprocessing,
              inkscape.clean.png, inkscape.clean.pdf, inkscape.clean.eps,
              inkscape.clean.ps"
	  if="inkscape.check" description="Remove files produced by inkscape">
    <echo>inkscape.clean              RUN</echo>
    <echo level="${inkscape.debug.level}">${basedir}</echo>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="inkscape.dump.properties" depends="inkscape.init">
    <echo level="${inkscape.debug.level}"> ------ Inkscape properties ----
    inkscape.exec    ="${inkscape.exec}"
    inkscape.abssrc.dir ="${inkscape.abssrc.dir}"
    inkscape.absdst.dir ="${inkscape.absdst.dir}"
    inkscape.files   ="${inkscape.files}" </echo>
  </target>

  <target name="inkscape.report.YES" depends="inkscape.init"
	  if="inkscape.execution.possible">
    <echo>Inkscape           |     *     |</echo>
  </target>

  <target name="inkscape.report.NO" depends="inkscape.init"
	  unless="inkscape.execution.possible">
    <echo>Inkscape           |           |     * (install ${inkscape.exec})</echo>
  </target>

  <target name="inkscape.report" depends="inkscape.report.YES,
				      inkscape.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="inkscape" depends="inkscape.init, initial.delete.build.out, inkscape.processing"/>
</project>
