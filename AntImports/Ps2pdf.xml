<?xml version="1.0" encoding="UTF-8"?>

<project name="Translate ps files to PDF" default="ps2pdf">
  <description>
    Translate Postscript files to PDF
  </description>
  <!--
      Given the following properties:

      ps2pdf.src.dir: directory from where to take the source files
      ps2pdf.dst.dir: directory where the produced files are stored
      ps2pdf.files: comma/space separated list of files to process

      Produce ??
  -->

  <import file="InitialCheck.xml"/>

  <property name="ps2pdf.exec"           value="ps2pdf"
	    description="Name of the executable used for the translation"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${ps2pdf.exec}"/>
  
  <!-- Private properties -->
  <property name="ps2pdf.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>

  <target name="ps2pdf.init" depends="ada.init" if="ps2pdf.execution.possible">
    <!-- Public Property definition -->
    <property name="ps2pdf.src.dir"        value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="ps2pdf.dst.dir"        value="${ps2pdf.src.dir}"
	      description="Directory where the produced files are created"/>
    <property name="ps2pdf.files"          value=""
	      description="Source file names (no path, it is ps2pdf.src.dir)"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="ps2pdf" ADA.SRC.DIR="${ps2pdf.src.dir}"
      ADA.DST.DIR="${ps2pdf.dst.dir}" ADA.FILES="${ps2pdf.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="ps2pdf.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${ps2pdf.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${ps2pdf.debug.level}">  ps2pdf.check              = "${ps2pdf.check}"
  ps2pdf.execution.possible = ${ps2pdf.execution.possible}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="ps2pdf.processing" depends="ps2pdf.init"
	  if="ps2pdf.check" description="Apply the translation">

    <echo>ps2pdf.processing           RUN</echo>
    <echo level="${ps2pdf.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${ps2pdf.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${ps2pdf.absdst.dir}" 
	   append="yes" failonerror="true" executable="bash" 
	   output="build.out">
      <arg value="${ps2pdf.exec}"/>
      <srcfile/>
      <targetfile/>
      <fileset refid="ps2pdf.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.ps" to="*.pdf"/>
    </apply>    
  </target>

  <!-- Clean files produced by ps2pdf -->
  <target name="ps2pdf.clean" depends="ps2pdf.init"
	  if="ps2pdf.check" description="Remove files produced by ps2pdf">

    <echo>ps2pdf.clean           RUN</echo>
    <echo level="${ps2pdf.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="ps2pdf.target.filelist.property" pathsep=" ">
      <fileset refid="ps2pdf.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${ps2pdf.abssrc.dir}/*" 
		to="${ps2pdf.absdst.dir}/*"/>
	<mapper type="glob" from="*.ps" to="*.pdf"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${ps2pdf.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${ps2pdf.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="ps2pdf.dump.properties" depends="ps2pdf.init">
    <echo level="${ps2pdf.debug.level}"> ------ ps2pdf properties ----
    ps2pdf.exec       ="${ps2pdf.exec}"
    ps2pdf.abssrc.dir ="${ps2pdf.abssrc.dir}"
    ps2pdf.absdst.dir ="${ps2pdf.absdst.dir}"
    ps2pdf.files      ="${ps2pdf.files}"</echo>
  </target>

  <target name="ps2pdf.report.YES" depends="ps2pdf.init"
	  if="ps2pdf.execution.possible">
    <echo>Ps2pdf             |     *     |</echo>
  </target>

  <target name="ps2pdf.report.NO" depends="ps2pdf.init"
	  unless="ps2pdf.execution.possible">
    <echo>Ps2pdf             |           |     * (install ${ps2pdf.exec})</echo>
  </target>

  <target name="ps2pdf.report" depends="ps2pdf.report.YES,
				      ps2pdf.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="ps2pdf" depends="ps2pdf.init, initial.delete.build.out, ps2pdf.processing"/>
</project>
