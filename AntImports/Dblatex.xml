<?xml version="1.0" encoding="UTF-8"?>

<project name="Process docbook with dblatex" default="dblatex">

  <!--
      Given the following properties:

      dblatex.src.dir: directory from where to take the source files
      dblatex.dst.dir: directory where the produced files are stored
      dblatex.files: comma/space separated list of files to process
      dblatex.extra.args: space separated list of extra command-line arguments
      dblatex.compliant.mode: set to true to get the default behavior
                              of dblatex (not the ada-flavored behavior)

      Produce a pdf file directly from a Docbook file
  -->

  <import file="InitialCheck.xml"/>

  <property name="dblatex.exec"           value="dblatex"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${dblatex.exec}"/>
  
  <!-- Private properties -->
  <property name="dblatex.debug.level"    value="${ada.debug.level}"/>
  
  <target name="dblatex.init" depends="ada.init" if="dblatex.execution.possible">
    <!-- Public Property definition -->
    <property name="dblatex.src.dir"        value="${basedir}"/>
    <property name="dblatex.dst.dir"        value="${dblatex.src.dir}"/>
    <property name="dblatex.files"          value=""/>
    <property name="dblatex.extra.args"      value=""/>
    <property name="dblatex.compliant.mode" value=""/>

    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="dblatex" ADA.SRC.DIR="${dblatex.src.dir}"
      ADA.DST.DIR="${dblatex.dst.dir}" ADA.FILES="${dblatex.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="dblatex.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${dblatex.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${dblatex.debug.level}">    dblatex.check          = "${dblatex.check}"
  dblatex.execution.possible = ${dblatex.execution.possible}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="dblatex.processing" depends="dblatex.init"
	  if="dblatex.check" description="Process the given files with dblatex">

    <echo>dblatex.processing          RUN</echo>
    <echo level="${dblatex.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${dblatex.absdst.dir}" />

    <!-- Avoid the revision and authors tables, unless
         ${dblatex.compliant.mode} is true: -->
    <condition property="dblatex.extra.args.internal"
      value="-P doc.collab.show=0 -P latex.output.revhistory=0"
      else="" >
      <not>
	<istrue value="${dblatex.compliant.mode}" />
      </not>
    </condition>

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${dblatex.absdst.dir}" 
	   append="yes" failonerror="true" executable="${dblatex.exec}" 
	   output="build.out">
      <arg value="-o"/>
      <targetfile/>
      <arg line="${dblatex.extra.args.internal}"/>
      <arg line="${dblatex.extra.args}"/>
      <fileset refid="dblatex.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.xml" to="*.pdf"/>
    </apply>    
  </target>

  <!-- Clean files produced by dblatex -->
  <target name="dblatex.clean" depends="dblatex.init"
	  if="dblatex.check" description="Remove files produced by dblatex">

    <echo>dblatex.clean               RUN</echo>
    <echo level="${dblatex.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="dblatex.target.filelist.property" pathsep=" ">
      <fileset refid="dblatex.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${dblatex.abssrc.dir}/*" 
		to="${dblatex.absdst.dir}/*"/>
	<mapper type="glob" from="*.xml" to="*.pdf"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${dblatex.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${dblatex.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="dblatex.dump.properties" depends="dblatex.init">
    <echo level="${dblatex.debug.level}"> ------ dblatex properties ----
    dblatex.exec       ="${dblatex.exec}"
    dblatex.abssrc.dir ="${dblatex.abssrc.dir}"
    dblatex.absdst.dir ="${dblatex.absdst.dir}"
    dblatex.extra.args ="${dblatex.extra.args}"
    dblatex.files      ="${dblatex.files}"</echo>
  </target>

  <target name="dblatex.report.YES" depends="dblatex.init"
	  if="dblatex.execution.possible">
    <echo>Dblatex            |     *     |</echo>
  </target>

  <target name="dblatex.report.NO" depends="dblatex.init"
	  unless="dblatex.execution.possible">
    <echo>Dblatex            |           |     * (install ${dblatex.exec})</echo>
  </target>

  <target name="dblatex.report" depends="dblatex.report.YES,
				      dblatex.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="dblatex" depends="dblatex.init, initial.delete.build.out, dblatex.processing"/>
</project>
