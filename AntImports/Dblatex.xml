<?xml version="1.0" encoding="UTF-8"?>

<project name="Process docbook with dblatex" default="dblatex.processing">

  <!--
      Given the following properties:

      dblatex.src.dir: directory from where to take the source files
      dblatex.dst.dir: directory where the produced files are stored
      dblatex.files: comma/space separated list of files to process

      Produce a pdf file directly from a Docbook file
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>

  <!-- Public Property definition -->
  <property name="dblatex.exec"           value="dblatex"/>
  <property name="dblatex.src.dir"        value="${basedir}"/>
  <property name="dblatex.dst.dir"        value="${dblatex.src.dir}"/>
  <property name="dblatex.files"          value=""/>
  <property name="dblatex.extra.args"      value=""/>

  <!-- Private properties -->
  <property name="dblatex.debug.level"    value="${ada.debug.level}"/>

  <!-- Define two properties containing the absolute src and dst paths -->
  <pathconvert property="dblatex.abssrc.dir" pathsep=" ">
    <path location="${dblatex.src.dir}"/>
  </pathconvert>
  <pathconvert property="dblatex.absdst.dir" pathsep=" ">
    <path  location="${dblatex.dst.dir}"/>
  </pathconvert>

  <!-- Source files to be processed by dblatex (fileset to allow wildcards) -->
  <fileset id="dblatex.fileset" dir="${dblatex.abssrc.dir}"
	   includes="__bogus__file__name ${dblatex.files}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
       executing the regular targets. -->
  <target name="dblatex.check.values" 
	  depends="initial.check, dblatex.dump.properties">

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="dblatex.check">
      <and>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${dblatex.abssrc.dir}" arg2="" trim="true"/></not>
	<!-- There must be some files defined -->
        <not><equals arg1="${dblatex.files}" arg2="" trim="true"/></not>
	<!-- Require a non-empty dst.dir as well -->
        <not><equals arg1="${dblatex.absdst.dir}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <!-- The required condition not to bomb out -->
    <condition property="dblatex.execution.possible">
      <and>
	<available file="${dblatex.exec}${executable.file.extension}"
		   filepath="${env.PATH}"/>
	<available file="${dblatex.abssrc.dir}"/> 
      </and>
    </condition>

    <condition property="dblatex.failure">
      <and>
	<isset property="dblatex.check"/>
	<not><isset property="dblatex.execution.possible"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${dblatex.debug.level}">    dblatex.check          = "${dblatex.check}"
  dblatex.execution.possible = ${dblatex.execution.possible}
  dblatex.failure            = ${dblatex.failure}</echo>
  </target>

  <target name="dblatex.bomb.out" if="dblatex.failure">
    <fail message="Dblatex rule cannot be executed. Review the value of
		   variables dblatex.src.dir and dblatex.exec"/>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="dblatex.processing.NOT" depends="dblatex.bomb.out" 
	  unless="dblatex.check">
    <echo level="${dblatex.debug.level}">dblatex.processing          ---</echo>
    <echo level="${dblatex.debug.level}">${basedir}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true, and it has
  as dependency the NOT target. That way, if the property is not set, this
  target is not executed and instead, the one notifying the user of such event
  is executed. -->
  <target name="dblatex.processing" 
	  depends="dblatex.check.values, dblatex.processing.NOT"
	  if="dblatex.check"
	  description="Process the given files with dblatex">

    <echo>dblatex.processing          RUN</echo>
    <echo level="${dblatex.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${dblatex.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${dblatex.absdst.dir}" 
	   append="yes" failonerror="true" executable="${dblatex.exec}" 
	   output="build.out">
      <arg value="-o"/>
      <targetfile/>
      <arg line="${dblatex.extra.args}"/>
      <fileset refid="dblatex.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.xml" to="*.pdf"/>
    </apply>    
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="dblatex.clean.NOT" unless="dblatex.check">
    <echo level="${dblatex.debug.level}">dblatex.clean               ---</echo>
    <echo level="${dblatex.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean files produced by dblatex -->
  <target name="dblatex.clean" depends="dblatex.check.values, dblatex.clean.NOT"
	  if="dblatex.check" description="Remove files produced by dblatex">

    <echo>dblatex.clean              RUN</echo>
    <echo level="${dblatex.debug.level}">${basedir}</echo>

    <!-- Obtain the filelist with the produced files. -->
    <pathconvert property="dblatex.target.filelist.property" pathsep=" ">
      <fileset refid="dblatex.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${dblatex.abssrc.dir}/*" 
		to="${dblatex.absdst.dir}/*"/>
	<mapper type="glob" from="*.xml" to="*.pdf"/>
      </chainedmapper>
    </pathconvert>
    <filelist id="dblatex.target.filelist"
	      files="${dblatex.target.filelist.property}"/>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${dblatex.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attributge is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <filelist refid="dblatex.target.filelist"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="dblatex.dump.properties" depends="initial.check">
    <echo level="${dblatex.debug.level}"> ------ dblatex properties ----
    dblatex.exec       ="${dblatex.exec}"
    dblatex.abssrc.dir ="${dblatex.abssrc.dir}"
    dblatex.absdst.dir ="${dblatex.absdst.dir}"
    dblatex.extra.args ="${dblatex.extra.args}"
    dblatex.files      ="${dblatex.files}"</echo>
  </target>

  <target name="dblatex.report.YES" depends="dblatex.check.values"
	  if="dblatex.execution.possible">
    <echo>Dblatex            |     *     |</echo>
  </target>

  <target name="dblatex.report.NO" depends="dblatex.check.values"
	  unless="dblatex.execution.possible">
    <echo>Dblatex            |           |     * (install ${dblatex.exec})</echo>
  </target>

  <target name="dblatex.report" depends="dblatex.report.YES,
				      dblatex.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="dblatex" depends="initial.delete.build.out, dblatex.processing"/>
</project>
