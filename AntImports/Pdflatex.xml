<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Process tex files with pdflatex" default="pdflatex.processing">
  <description>
    Produce a pdf file directly from a latex file using pdflatex
  </description>

  <import file="InitialCheck.xml"/>

  <property name="pdflatex.exec"           value="pdflatex"
	    description="Name of the LaTeX processor executable"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${pdflatex.exec}"/>
  
  <!-- Private properties -->
  <property name="pdflatex.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>

  <target name="pdflatex.init" depends="ada.init" if="pdflatex.execution.possible">
    <!-- Public Property definition -->
    <property name="pdflatex.src.dir"        value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="pdflatex.dst.dir"        value="${pdflatex.src.dir}"
	      description="Directory where the produced files are created"/>
    <property name="pdflatex.files"          value=""
	      description="Source file names (no path, it is pdflatex.src.dir)"/>
    <property name="pdflatex.extra.args"     value=""
	      description="Extra arguments to pass to the LaTeX processor"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="pdflatex" ADA.SRC.DIR="${pdflatex.src.dir}"
      ADA.DST.DIR="${pdflatex.dst.dir}" ADA.FILES="${pdflatex.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="pdflatex.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${pdflatex.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${pdflatex.debug.level}">  pdflatex.check          = "${pdflatex.check}"
  pdflatex.execution.possible = ${pdflatex.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="pdflatex.processing" depends="pdflatex.init"
	  if="pdflatex.check" description="Process the given files by pdflatex">

    <echo>pdflatex.processing         RUN</echo>
    <echo level="${pdflatex.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${pdflatex.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${pdflatex.absdst.dir}" 
	   append="yes" failonerror="true" executable="${pdflatex.exec}" 
	   output="build.out">
      <arg value="-output-directory"/>
      <arg value="${pdflatex.dst.dir}"/>
      <arg line="${pdflatex.extra.args}"/>
      <fileset refid="pdflatex.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.tex" to="*.pdf"/>
    </apply>    
  </target>

  <!-- Clean files produced by pdflatex -->
  <target name="pdflatex.clean" depends="pdflatex.init"
	  if="pdflatex.check" description="Remove files produced by pdflatex">

    <echo>pdflatex.clean              RUN</echo>
    <echo level="${pdflatex.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="pdflatex.target.filelist.property" pathsep=" ">
      <fileset refid="pdflatex.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${pdflatex.abssrc.dir}/*" 
		to="${pdflatex.absdst.dir}/*"/>
	<mapper type="glob" from="*.tex" to="*.pdf"/>
      </chainedmapper>
    </pathconvert>

    <!-- Obtain the filelist containing the temporary files produced by latex -->
    <pathconvert property="pdflatex.tmptarget.filelist.property" pathsep=" ">
      <fileset refid="pdflatex.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${pdflatex.abssrc.dir}/*" 
		to="${pdflatex.absdst.dir}/*"/>
	<compositemapper>
	  <mapper type="glob" from="*.tex" to="*.aux"/>
	  <mapper type="glob" from="*.tex" to="*.bbl"/>
	  <mapper type="glob" from="*.tex" to="*.blg"/>
	  <mapper type="glob" from="*.tex" to="*.idx"/>
	  <mapper type="glob" from="*.tex" to="*.ilg"/>
	  <mapper type="glob" from="*.tex" to="*.ind"/>
	  <mapper type="glob" from="*.tex" to="*.lof"/>
	  <mapper type="glob" from="*.tex" to="*.log"/>
	  <mapper type="glob" from="*.tex" to="*.lot"/>
	  <mapper type="glob" from="*.tex" to="*.out"/>
	  <mapper type="glob" from="*.tex" to="*.pdf"/>
	  <mapper type="glob" from="*.tex" to="*.toc"/>
	</compositemapper>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${pdflatex.target.filelist.property}</echo>
    <echo> deleted = ${pdflatex.tmptarget.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${pdflatex.target.filelist.property}"/>
      <files includes="${pdflatex.tmptarget.filelist.property}"/>
    </delete>

  </target>

  <!-- Dump the properties defined in this script -->
  <target name="pdflatex.dump.properties" depends="pdflatex.init">
    <echo level="${pdflatex.debug.level}"> ------ pdflatex properties ----
    pdflatex.exec       ="${pdflatex.exec}"
    pdflatex.abssrc.dir ="${pdflatex.abssrc.dir}"
    pdflatex.absdst.dir ="${pdflatex.absdst.dir}"
    pdflatex.files      ="${pdflatex.files}"
    pdflatex.extra.args ="${pdflatex.extra.args}"</echo>
  </target>

  <target name="pdflatex.report.YES" depends="pdflatex.init"
	  if="pdflatex.execution.possible">
    <echo>Pdflatex           |     *     |</echo>
  </target>

  <target name="pdflatex.report.NO" depends="pdflatex.init"
	  unless="pdflatex.execution.possible">
    <echo>Pdflatex           |           |     * (install ${pdflatex.exec})</echo>
    <echo>                   |           |     * (Does not work in Windows)</echo>
  </target>

  <target name="pdflatex.report" depends="pdflatex.report.YES,
				      pdflatex.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="pdflatex" depends="pdflatex.init, initial.delete.build.out, pdflatex.processing"/>
</project>
