<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Initial Checks" default="initial.check">
  <description>
    Global ADA properties.
  </description>

  <!-- Directory where the toolkit is installed -->
  <property name="ada.home" value="" />

  <!-- Overall debug level for the rule scripts -->
  <property name="ada.debug.level" value="info"
	    description="Debug level to execute of ADA &#10;#
Possible values are 'error', 'warning', 'info', 'verbose' and 'debug'"/>

  <!-- Include the environment as a set of properties -->
  <property environment="env"/>

  <!-- Load the properties from the ada.course.home directory -->
  <property file="${ada.course.home}${file.separator}Ada.properties"/>

  <!-- Default file name to load the propertyes -->
  <property name="ada.local.property.file" value="Properties.txt"/>

  <!-- Load the properties in the basedir directory -->
  <property file="${basedir}${file.separator}${ada.local.property.file}"/>

  <!-- Load the overridable course properties from the ada.course.home directory -->
  <property file="${ada.course.home}${file.separator}CourseProperties.txt"/>

  <!-- Load the local properties from .ant.properties -->
  <property file=".ant.properties"/>

  <!-- Load the properties from the user.home directory -->
  <property file="${user.home}${file.separator}.ant.properties"/>

  <!-- Load the properties from the cygwin.user.home directory -->
  <property file="${cygwin.user.home}${file.separator}.ant.properties"/>

  <!-- Date/time to be considered when processing the audience and
       exportcontrol aspects -->
  <property name="ada.current.datetime" value=""
	    description="Date/time to be set when processing the
resources. &#10;#
Relevant only when profiling with the audience attribute and for &#10;#
exportcontrol"/>

  <!-- Overall profile string for the revision attribute in docbook -->
  <property name="ada.profile.revision" value=""
	    description="Value to profile the revision attribute in XML"/>

  <!-- Detect in which os-family is being executed -->
  <condition  property="ada.os.family.windows" value="true">
    <os family="windows"/>
  </condition>
  <condition  property="ada.os.family.unix" value="true">
    <os family="unix"/>
  </condition>

  <!-- Set the root path prefix to use cygwin in windows -->
  <condition property="root.path.prefix" value="">
    <os family="unix"/>
  </condition>

  <exec executable="cygpath" os="windows" outputproperty="root.path.prefix">
    <arg value="-d"/>
    <arg value="/"/>
  </exec>

  <!-- Default location for the catalog -->
  <property name="xml.catalog.file"
	    value="${root.path.prefix}${file.separator}etc${file.separator}xml${file.separator}catalog" />

  <!-- Check if the xml catalog file is available -->
  <condition property="xml.catalog.file.available" value="true">
    <available file="${xml.catalog.file}" />
  </condition>

  <condition property="ada.xsltproc.net.option" value="--nonet" else="">
    <available file="${xml.catalog.file}" />
  </condition>

  <!-- Check if the ada.home property is set to a meaningful value -->
  <condition property="ada.check.home.property">
    <and>
      <not>
	<equals arg1="${ada.home}" arg2="" trim="true"/>
      </not>
      <available file="${ada.home}" type="dir"/>
    </and>
  </condition>

  <!-- Properties to require certain ADA versions -->
  <property name="ada.exact.version" value=""/>
  <property name="ada.minimum.version" value=""/>
  <property name="ada.maximum.version" value=""/>

  <condition property="ada.skip.check.for.correct.version">
    <and>
      <equals arg1="${ada.exact.version}" arg2="" trim="true"/>
      <equals arg1="${ada.minimum.version}" arg2="" trim="true"/>
      <equals arg1="${ada.maximum.version}" arg2="" trim="true"/>
    </and>
  </condition>

  <!-- Define the file extensions depending on the OS -->
  <condition  property="executable.file.extension" value=".exe">
    <os family="windows"/>
  </condition>
  <condition  property="executable.file.extension" value="">
    <os family="unix"/>
  </condition>

  <!--
       Macro that given an executable name, it sets the NAME.execution.possible
       property
  -->
  <macrodef name="ada.set.execution.possible">
    <attribute name="ADA.EXECUTABLE.NAME"/>
    <attribute name="ADA.PREFIX" default="@{ADA.EXECUTABLE.NAME}"/>
    <sequential>
      <!-- The required condition not to bomb out -->
      <available property="@{ADA.PREFIX}.execution.possible"
		 file="@{ADA.EXECUTABLE.NAME}${executable.file.extension}"
		 filepath="${env.PATH}"/>
    </sequential>
  </macrodef>

  <macrodef name="nomempty.file.match">
    <attribute name="ADA.FILES"/>
    <attribute name="ADA.SOURCE.FILELIST.PROPERTY"/>
    <sequential>
      <!--
	   Check if source files is non empty, but source.filelist.property is
	   empty. This condition is to detect errors by which an incorrect
	   filename is given by the user. Without this check, the rule is
	   quietly ignored and the mistake is not intuitive to fix. The
	   introduction of this check means that if the user has a global
	   definition (for example inkscape.files=*.svg) and such definition
	   matches to nothing in one directory, an empty definition needs to be
	   present in the Properties.txt file in order to avoid failure due to
	   this check.
      -->
      <fail message="File/s: @{ADA.FILES} not found in ${basedir}">
	<condition>
	  <and>
	    <not><equals arg1="@{ADA.FILES}" arg2="" trim="true"/></not>
	    <equals arg1="@{ADA.SOURCE.FILELIST.PROPERTY}" arg2="" trim="true"/>
	  </and>
	</condition>
      </fail>
    </sequential>
  </macrodef>

  <!--
       Define two properties containing the absolute src and dst paths, create
       the fileset with the source files and catch its expanded filename list in
       a property
  -->
  <macrodef name="ada.expand.srcdst.paths">
    <attribute name="ADA.PREFIX"/>
    <attribute name="ADA.SRC.DIR"/>
    <attribute name="ADA.DST.DIR"/>
    <attribute name="ADA.FILES"/>
    <sequential>
      <pathconvert property="@{ADA.PREFIX}.abssrc.dir" pathsep=" ">
	<path location="@{ADA.SRC.DIR}"/>
      </pathconvert>
      <pathconvert property="@{ADA.PREFIX}.absdst.dir" pathsep=" ">
	<path  location="@{ADA.DST.DIR}"/>
      </pathconvert>

      <!-- Source files to be processed (fileset to allow wildcards) -->
      <fileset id="@{ADA.PREFIX}.fileset" dir="${@{ADA.PREFIX}.abssrc.dir}"
	       includes="___bogus___file__name @{ADA.FILES}"/>

      <!-- Obtain the filelist with the source files to see if it is empty -->
      <pathconvert property="@{ADA.PREFIX}.source.filelist.property" pathsep=" ">
	<fileset refid="@{ADA.PREFIX}.fileset"/>
      </pathconvert>

      <nomempty.file.match
	ADA.FILES="@{ADA.FILES}"
	ADA.SOURCE.FILELIST.PROPERTY="@{ADA.PREFIX}.source.filelist.property"/>
    </sequential>
  </macrodef>

  <!-- Initialize all the properties -->
  <target name="ada.check.version" unless="ada.skip.check.for.correct.version">
    <!-- Compare the version numbers -->
    <exec executable="bash"
	  dir="${basedir}"
	  outputproperty="ada.correct.version">
      <arg
	value="${ada.home}${file.separator}bin${file.separator}adacompareversions"/>
      <arg value="${ada.exact.version}"/>
      <arg value="${ada.minimum.version}"/>
      <arg value="${ada.maximum.version}"/>
    </exec>

    <fail message="Incorrect ADA version (${ada.version}). Check
      ada.exact.version, ada.maximum.version and ada.minimum.version">
      <condition>
	<equals arg1="${ada.correct.version}" arg2="false" trim="true"/>
      </condition>
    </fail>
  </target>

  <target name="ada.init"
	  depends="ada.check.version"
	  unless="ada.check.home.property">
    <echo> *** ERROR *** ada.home variable with incorrect value!
  ada.home = "${ada.home}"
  Include ada.home=DIR in the file ${user.home}/.ant.properties </echo>
    <fail message="Include ada.home=DIR in the file ${user.home}/.ant.properties"/>
  </target>

  <target name="ada.properties.init.dump">
    <echo level="${ada.debug.level}">------ Global properties ----
  basedir              = ${basedir}
  user.dir             = ${user.dir}
  user.home            = ${user.home}
  ada.home             = ${ada.home}
  ada.course.home      = ${ada.course.home}
  ada.current.datetime = ${ada.current.datetime}
  ada.profile.revision = ${ada.profile.revision}

  executable.file.extension = ${executable.file.extension}
  xml.catalog.file = ${xml.catalog.file}
  xml.catalog.file.available = ${xml.catalog.file.available}</echo>
  </target>

  <target name="ada.catalog.warning" unless="xml.catalog.file.available">
    <echo>*************** WARNING ***************

Your system does not appear to have the file /etc/xml/catalog
properly installed. This catalog file is used to find the DTDs
and Schemas required to process Docbook documents. You either
have this definitions inserted manually in the file
${ada.home}/DTDs/catalog.template,
or the processing of the stylesheets will be extremelly slow
(because all the imported style sheets are fetched from the net).

****************************************</echo>
  </target>

  <!-- Target to reset the build.out -->
  <target name="initial.delete.build.out">
    <delete file="build.out"/>
  </target>
</project>
