<?xml version="1.0" encoding="UTF-8"?>

<project name="Recursively build other dirs" default="subrecursive">

  <!--
      Given the following properties:

      subrecursive.dirs:       List of directories to call recursively
      subrecursive.dst.dir:    Dir to receive the exported material
      subrecursive.dirs.nodst: Dirs to call recursively but with no dst dir
      subrecursive.target: Target to execute in those directories

      Perform target subrecursive.target in these directories. If the property
      subrecursive.dst.dir is given, it overrides the export.dst.dir in the
      subdirectory. If not given, such value is left to be set in the
      subdirectory. This is to be able to either honor the export location
      stated in a resource, or be able to overwrite it.
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>
  
  <!-- Public Property definition -->
  <property name="subrecursive.dirs"       value=""/>
  <property name="subrecursive.dst.dir"    value="${basedir}"/>
  <property name="subrecursive.dirs.nodst" value=""/>
  <property name="subrecursive.target"     value=""/>

  <!-- Private properties -->
  <property name="subrecursive.debug.level"    value="${ada.debug.level}"/>

  <!-- Define a property containing the absolute dst path -->
  <pathconvert property="subrecursive.absdst.dir" pathsep=" ">
    <path  location="${subrecursive.dst.dir}"/>
  </pathconvert>

  <!-- Dirs to recur  -->
  <filelist id="subrecursive.dirlist" dir="${basedir}"
	    files="${subrecursive.dirs}"/>

  <filelist id="subrecursive.dirlist.nodst" dir="${basedir}"
	    files="${subrecursive.dirs.nodst}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="subrecursive.check.values" 
	  depends="initial.check, subrecursive.dump.properties">

    <!-- Conditions to see which one of the two targets needs to be executed -->
    <condition property="subrecursive.check.withdst">
      <and>
	<not><equals arg1="${subrecursive.dirs}" arg2="" trim="true"/></not>
	<not><equals arg1="${subrecursive.dst.dir}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <condition property="subrecursive.check.nodst">
      <not><equals arg1="${subrecursive.dirs.nodst}" arg2="" trim="true"/></not>
    </condition>

    <!-- Condition to enable/disable the entire rule execution -->
    <condition property="subrecursive.check">
      <or>
	<istrue value="${subrecursive.check.withdst}"/>
	<istrue value="${subrecursive.check.nodst}"/>
      </or>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${subrecursive.debug.level}">    subrecursive.check         = "${subrecursive.check}"
    subrecursive.check.withdst = "${subrecursive.check.withdst}"
    subrecursive.check.nodst   = "${subrecursive.check.nodst}"
    subrecursive.dirs          = "${subrecursive.dirs}"
    subrecursive.absdst.dir    = "${subrecursive.absdst.dir}"
    subrecursive.dirs.nodst    = "${subrecursive.dirs.nodst}"</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="subrecursive.processing.NOT" unless="subrecursive.check">
    <echo level="${subrecursive.debug.level}">subrecursive.processing     ---</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>
  </target>

  <!-- Regular target. Invokes the check and then both sub-targets -->
  <target name="subrecursive.processing" 
	  depends="subrecursive.check.values, subrecursive.processing.NOT,
		   subrecursive.processing.withdstdir,
		   subrecursive.processing.nodstdir"
	  description="Loop over the given dirs"/>
  
  <target name="subrecursive.processing.withdstdir" if="subrecursive.check.withdst">

    <echo>subrecursive.processing.dst RUN</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>

    <echo level="${subrecursive.debug.level}">    subrecursive.dirs="${subrecursive.dirs}"</echo>

    <subant target="${subrecursive.target}" 
	    genericantfile="${ada.home}/AntImports/AllTargets.xml"
	    inheritAll="false" inheritrefs="false">
      <property name="export.dst.dir" value="${subrecursive.dst.dir}" />
      <filelist refid="subrecursive.dirlist"/>
    </subant>
  </target>

  <target name="subrecursive.processing.nodstdir" if="subrecursive.check.nodst">
    <echo>subrecursive.proc..ng.nodst RUN</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>

    <echo level="${subrecursive.debug.level}">    subrecursive.dirs.nodst="${subrecursive.dirs.nodst}"</echo>

    <subant target="${subrecursive.target}" 
	    genericantfile="${ada.home}/AntImports/AllTargets.xml"
	    inheritAll="false" inheritrefs="false">
      <filelist refid="subrecursive.dirlist.nodst"/>
    </subant>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="subrecursive.clean.NOT" unless="subrecursive.check">
    <echo level="${subrecursive.debug.level}">subrecursive.clean          ---</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean the produced files -->
  <target name="subrecursive.clean" 
	  depends="subrecursive.check.values, subrecursive.clean.NOT,
		   subrecursive.clean.withdstdir,
		   subrecursive.clean.nodstdir"
	  description="Delete files produced here"/>

  <target name="subrecursive.clean.withdstdir" if="subrecursive.check.withdst">
    <echo>subrecursive.clean.dst      RUN</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>

    <!-- Call the subdirs with the clean target -->
    <subant target="clean" 
	    genericantfile="${ada.home}/AntImports/AllTargets.xml"
	    inheritAll="false">
      <property name="export.dst.dir" value="${subrecursive.dst.dir}" />
      <filelist refid="subrecursive.dirlist"/>
    </subant>
  </target>

  <target name="subrecursive.clean.nodstdir" if="subrecursive.check.nodst">
    <echo>subrecursive.clean.nodst    RUN</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>

    <!-- Call the subdirs with the clean target -->
    <subant target="clean" 
	    genericantfile="${ada.home}/AntImports/AllTargets.xml"
	    inheritAll="false">
      <filelist refid="subrecursive.dirlist.nodst"/>
    </subant>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="subrecursive.dump.properties" depends="initial.check">
    <echo level="${subrecursive.debug.level}"> ------ Subrecursive properties ----
    subrecursive.dirs       ="${subrecursive.dirs}"
    subrecursive.dst.dir    ="${subrecursive.dst.dir}"
    subrecursive.dirs.nodst ="${subrecursive.dirs.nodst}"
    subrecursive.target     ="${subrecursive.target}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="subrecursive" 
	  depends="initial.delete.build.out, subrecursive.processing"/>
</project>
