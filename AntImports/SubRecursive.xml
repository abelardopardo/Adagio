<?xml version="1.0" encoding="UTF-8"?>

<project name="Recursively build other dirs" default="subrecursive">
  <description>
    Given the following properties:
    
    subrecursive.dirs:       List of directories to call recursively
    subrecursive.dst.dir:    Dir to receive the exported material
    subrecursive.dirs.nodst: Dirs to call recursively but with no dst dir
    subrecursive.target:     Target to execute in those directories
    
    Execute target subrecursive.target in the directories given in the variables
    subrecursive.dirs and subrecursive.dirs.nodst. For those dirs in
    subrecursive.dirs, the files exported by the remote directory are copied in
    the location specified by subrecursive.dst.dir. In those directories
    included in subrecursive.dir.ndst, the files exported by the remote
    directory are copied as specified by the variable export.dst.dir in that
    directory.
  </description>

  <import file="InitialCheck.xml"/>

  <!-- Private properties -->
  <property name="subrecursive.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>
    
  <target name="subrecursive.init" depends="ada.init">
    <!-- Public Property definition -->
    <property name="subrecursive.dirs"       value=""
	      description="Dirs to execute and export resources to ${subrecursive.dst.dir}"/>
    <property name="subrecursive.dst.dir"    value="${basedir}"
	      description="Location where the exported resources in ${subrecursive.dirs} is copied"/>
    <property name="subrecursive.dirs.nodst" value=""
	      description="Dirs to execute and export as specified in their Properties.txt file"/>
    <property name="subrecursive.target"     value=""/>
    
    <!-- Define a property containing the absolute dst path -->
    <pathconvert property="subrecursive.absdst.dir" pathsep=" ">
      <path  location="${subrecursive.dst.dir}"/>
    </pathconvert>
    
    <!-- Dirs to recur  -->
    <filelist id="subrecursive.dirlist" dir="${basedir}"
	      files="${subrecursive.dirs}"/>
    
    <filelist id="subrecursive.dirlist.nodst" dir="${basedir}"
	      files="${subrecursive.dirs.nodst}"/>

    <!-- Conditions to see which one of the two targets needs to be executed -->
    <condition property="subrecursive.check.withdst">
      <not><equals arg1="${subrecursive.dirs}" arg2="" trim="true"/></not>
    </condition>

    <condition property="subrecursive.check.nodst">
      <not><equals arg1="${subrecursive.dirs.nodst}" arg2="" trim="true"/></not>
    </condition>

    <!-- Condition to enable/disable the entire rule execution -->
    <condition property="subrecursive.check">
      <or>
	<istrue value="${subrecursive.check.withdst}"/>
	<istrue value="${subrecursive.check.nodst}"/>
      </or>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${subrecursive.debug.level}">    subrecursive.check         = "${subrecursive.check}"
    subrecursive.check.withdst = "${subrecursive.check.withdst}"
    subrecursive.check.nodst   = "${subrecursive.check.nodst}"
    subrecursive.dirs          = "${subrecursive.dirs}"
    subrecursive.absdst.dir    = "${subrecursive.absdst.dir}"
    subrecursive.dirs.nodst    = "${subrecursive.dirs.nodst}"</echo>
  </target>

  <!-- Regular target. Invokes the check and then both sub-targets -->
  <target name="subrecursive.processing" 
	  depends="subrecursive.init,
		   subrecursive.processing.withdstdir,
		   subrecursive.processing.nodstdir"
	  description="Loop over the given dirs"/>
  
  <target name="subrecursive.processing.withdstdir" if="subrecursive.check.withdst">

    <echo>subrecursive.processing.dst RUN</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>

    <echo level="${subrecursive.debug.level}">    subrecursive.dirs="${subrecursive.dirs}"</echo>

    <subant target="${subrecursive.target}" 
	    genericantfile="${ada.home}/AntImports/AllTargets.xml"
	    inheritAll="false" inheritrefs="false">
      <property name="export.dst.dir" value="${subrecursive.dst.dir}" />
      <filelist refid="subrecursive.dirlist"/>
    </subant>
  </target>

  <target name="subrecursive.processing.nodstdir" if="subrecursive.check.nodst">
    <echo>subrecursive.proc..ng.nodst RUN</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>

    <echo level="${subrecursive.debug.level}">    subrecursive.dirs.nodst="${subrecursive.dirs.nodst}"</echo>

    <subant target="${subrecursive.target}" 
	    genericantfile="${ada.home}/AntImports/AllTargets.xml"
	    inheritAll="false" inheritrefs="false">
      <filelist refid="subrecursive.dirlist.nodst"/>
    </subant>
  </target>

  <!-- Clean the produced files -->
  <target name="subrecursive.clean" 
	  depends="subrecursive.init,
		   subrecursive.clean.withdstdir,
		   subrecursive.clean.nodstdir"
	  description="Delete files produced here"/>

  <target name="subrecursive.clean.withdstdir" if="subrecursive.check.withdst">
    <echo>subrecursive.clean.dst      RUN</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>

    <!-- Call the subdirs with the clean target -->
    <subant target="clean" 
	    genericantfile="${ada.home}/AntImports/AllTargets.xml"
	    inheritAll="false">
      <property name="export.dst.dir" value="${subrecursive.dst.dir}" />
      <filelist refid="subrecursive.dirlist"/>
    </subant>
  </target>

  <target name="subrecursive.clean.nodstdir" if="subrecursive.check.nodst">
    <echo>subrecursive.clean.nodst    RUN</echo>
    <echo level="${subrecursive.debug.level}">${basedir}</echo>

    <!-- Call the subdirs with the clean target -->
    <subant target="clean" 
	    genericantfile="${ada.home}/AntImports/AllTargets.xml"
	    inheritAll="false">
      <filelist refid="subrecursive.dirlist.nodst"/>
    </subant>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="subrecursive.dump.properties" depends="subrecursive.init">
    <echo level="${subrecursive.debug.level}"> ------ Subrecursive properties ----
    subrecursive.dirs       ="${subrecursive.dirs}"
    subrecursive.dst.dir    ="${subrecursive.dst.dir}"
    subrecursive.dirs.nodst ="${subrecursive.dirs.nodst}"
    subrecursive.target     ="${subrecursive.target}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="subrecursive" 
	  depends="initial.delete.build.out, subrecursive.processing"/>
</project>
