<?xml version="1.0" encoding="UTF-8"?>

<project name="Apply stylesheet to bilingual docbook files" default="bilingualdb">

  <!--
      Given the following properties:

      bilingualdb.src.dir: directory from where to take the source files
      bilingualdb.dst.dir: directory where the produced files are stored
      bilingualdb.style.file: Style file to be used
      bilingualdb.output.format: Extension of the output file
      bilingualdb.files: Comma separate list of files to process

      Apply the stylefile to the files in bilingualdb.files first with
      profile.lang in spanish, and then in english
  -->

  <!-- Checks for availability of different binaries -->
  <import file="Docbook.xml"/>

  <!-- Property definition -->
  <property name="bilingualdb.src.dir"       value="."/>
  <property name="bilingualdb.dst.dir"       value="${bilingualdb.src.dir}"/>
  <property name="bilingualdb.output.format" value="html"/>
  <property name="bilingualdb.files"         value=""/>
  <property name="bilingualdb.style.file" 
	    value="${ada.home}/XslStyles/DocbookProfile.xsl"/>

  <!-- Invoke xsltprocessing -->
  <target name="bilingualdb.processing" 
	  description="Call the xsltproc with the given style">

    <echo>bilingualdb.processing      CALL(xsltproc.processing ES)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${bilingualdb.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${bilingualdb.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${bilingualdb.style.file}"/>
      <param name="xsltproc.output.format" value="es.${bilingualdb.output.format}"/>
      <param name="xsltproc.files"         value="${bilingualdb.files}"/>
      <param name="xsltproc.extra.args"    value="--stringparam profile.lang es"/>
    </antcall>

    <echo>bilingualdb.processing      CALL(xsltproc.processing EN)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${bilingualdb.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${bilingualdb.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${bilingualdb.style.file}"/>
      <param name="xsltproc.output.format" value="en.${bilingualdb.output.format}"/>
      <param name="xsltproc.files"         value="${bilingualdb.files}"/>
      <param name="xsltproc.extra.args"    value="--stringparam profile.lang en"/>
    </antcall>
  </target>

  <!-- Clean files produced by bilingualdb -->
  <target name="bilingualdb.clean" description="Remove files produced by bilingualdb">

    <echo>bilingualdb.clean      CALL(xsltproc.clean ES)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${bilingualdb.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${bilingualdb.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${bilingualdb.style.file}"/>
      <param name="xsltproc.output.format" value="es.${bilingualdb.output.format}"/>
      <param name="xsltproc.files"         value="${bilingualdb.files}"/>
    </antcall>

    <echo>bilingualdb.clean      CALL(xsltproc.clean EN)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"         value="${bilingualdb.src.dir}"/>
      <param name="xsltproc.dst.dir"         value="${bilingualdb.dst.dir}"/>
      <param name="xsltproc.style.file"      value="${bilingualdb.style.file}"/>
      <param name="xsltproc.output.format"         value="en.${bilingualdb.output.format}"/>
      <param name="xsltproc.files"           value="${bilingualdb.files}"/>
    </antcall>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="bilingualdb" depends="initial.delete.build.out, bilingualdb.processing"/>
</project>
