<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="@SCRIPT_NAME@" default="@NAME@">

  <!--
      Given the following properties:

      @NAME@.src.dir: directory from where to take the source files
      @NAME@.dst.dir: directory where the produced files are stored
      @NAME@.files: comma/space separated list of files to process

      Do...
  -->

  <import file="InitialCheck.xml"/>
  
  <property name="@NAME@.exec"           value="@NAME@"/>
  
  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${@NAME@.exec}"/>
  
  <!-- Private properties -->
  <property name="@NAME@.debug.level"    value="${ada.debug.level}"/>

  <target name="@NAME@.init" depends="ada.init" if="@NAME@.execution.possible">
    <!-- Public Property definition -->
    <property name="@NAME@.src.dir"        value="${basedir}"/>
    <property name="@NAME@.dst.dir"        value="${@NAME@.src.dir}"/>
    <property name="@NAME@.files"          value=""/>

    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="@NAME@" ADA.SRC.DIR="${@NAME@.src.dir}"
      ADA.DST.DIR="${@NAME@.dst.dir}" ADA.FILES="${@NAME@.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="@NAME@.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${@NAME@.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${@NAME@.debug.level}">@NAME@.check              = "${@NAME@.check}"
@NAME@.execution.possible = ${@NAME@.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="@NAME@.processing" 
	  depends="@NAME@.init, @NAME@.preprocessing"
	  description="@DESCRIPTION@"/>

  <target name="@NAME@.preprocessing" if="@NAME.check">
    <echo>@NAME@.processing           RUN</echo>
    <echo level="${@NAME@.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${@NAME@.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${@NAME@.absdst.dir}" 
	   append="yes" failonerror="true" executable="${@NAME@.exec}" 
	   output="build.out">
      <arg value="???"/>
      <srcfile/>
      <targetfile/>
      <fileset refid="@NAME@.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.@FROM@" to="*.@TO@"/>
    </apply>    
  </target>

  <!-- Clean files produced by @NAME@ -->
  <target name="@NAME@.clean" depends="@NAME@.init"
	  if="@NAME@.check" description="Remove files produced by @NAME@">

    <echo>@NAME@.clean           RUN</echo>
    <echo level="${@NAME@.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="@NAME@.target.filelist.property" pathsep=" ">
      <fileset refid="@NAME@.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${@NAME@.abssrc.dir}/*" 
		to="${@NAME@.absdst.dir}/*"/>
	<mapper type="glob" from="*.@FROM@" to="*.@TO@"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${@NAME@.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${@NAME@.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="@NAME@.dump.properties" depends="@NAME@.init">
    <echo level="${@NAME@.debug.level}"> ------ @NAME@ properties ----
    @NAME@.exec       ="${@NAME@.exec}"
    @NAME@.abssrc.dir ="${@NAME@.abssrc.dir}"
    @NAME@.absdst.dir ="${@NAME@.absdst.dir}"
    @NAME@.files      ="${@NAME@.files}"</echo>
  </target>

  <target name="@NAME@.report.YES" depends="@NAME@.init"
	  if="@NAME@.execution.possible">
    <echo>@NAME@             |     *     |</echo>
  </target>

  <target name="@NAME@.report.NO" depends="@NAME@.init"
	  unless="@NAME@.execution.possible">
    <echo>@NAME@             |           |     * (install ${@NAME@.exec})</echo>
  </target>

  <target name="@NAME@.report" depends="@NAME@.report.YES,
				      @NAME@.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="@NAME@" depends="@NAME@.init, initial.delete.build.out, @NAME@.processing"/>
</project>
