<?xml version="1.0" encoding="UTF-8"?>

<project name="Apply stylesheet to generate RSS channel" default="rss">

  <!--
      Given the following properties:

      rss.src.dir: directory from where to take the source files
      rss.dst.dir: directory where the produced files are stored
      rss.files: Comma separate list of files to process

      Apply the Rss stylefile to the files in rss.files
  -->

  <!-- Checks for availability of different binaries -->
  <import file="BilingualDB.xml"/>

  <!-- Property definition -->
  <property name="rss.src.dir"         value="."/>
  <property name="rss.dst.dir"         value="${rss.src.dir}"/>
  <property name="rss.output.format"   value="_rss.xml"/>
  <property name="rss.extra.args"      value=""/>
  <property name="rss.files"           value=""/>
  <property name="rss.bilingual.files" value=""/>
  <property name="rss.style.file"
	    value="${ada.home}/XslStyles/Rss.xsl"/>
  <property name="rss.style.file.tohtml" 
	    value="${ada.home}/XslStyles/RssToHtml.xsl"/>

  <!-- Private properties -->
  <property name="rss.debug.level"    value="${ada.debug.level}"/>

  <!-- Define two properties containing the absolute src and dst paths -->
  <pathconvert property="rss.abssrc.dir" pathsep=" ">
    <path location="${rss.src.dir}"/>
  </pathconvert>
  <pathconvert property="rss.absdst.dir" pathsep=" ">
    <path  location="${rss.dst.dir}"/>
  </pathconvert>
  
  <!-- Source files to be processed by rss (fileset to allow wildcards) -->
  <fileset id="rss.fileset" dir="${rss.abssrc.dir}"
	   includes="__bogus__file__name ${rss.files}"/>

  <!-- Source files to be processed by rss (fileset to allow wildcards) -->
  <fileset id="rss.bilingual.fileset" dir="${rss.abssrc.dir}"
	   includes="__bogus__file__name ${rss.bilingual.files}"/>

  <!-- Obtain the filelist with the produced files. -->
  <pathconvert property="rss.target.filelist.property" pathsep=" ">
    <fileset refid="rss.fileset"/>
    <chainedmapper>
      <mapper type="glob" from="*.xml" to="*${rss.output.format}"/>
      <mapper type="flatten"/>
    </chainedmapper>
  </pathconvert>

  <filelist id="rss.target.filelist"
	    files="${rss.target.filelist.property}"/>

  <!-- Obtain the filelist with the produced bilingual files. -->
  <pathconvert property="rss.target.bilingual.filelist.property" pathsep=" ">
    <fileset refid="rss.bilingual.fileset"/>
    <compositemapper>
      <chainedmapper>
	<mapper type="glob" from="*.xml" to="*_en${rss.output.format}"/>
	<mapper type="flatten"/>
      </chainedmapper>
      <chainedmapper>
	<mapper type="glob" from="*.xml" to="*_es${rss.output.format}"/>
	<mapper type="flatten"/>
      </chainedmapper>
    </compositemapper>
  </pathconvert>

  <filelist id="rss.target.bilingual.filelist"
	    files="${rss.target.bilingual.filelist.property}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
       executing the regular targets. -->
  <target name="rss.check.values" 
	  depends="initial.check, rss.dump.properties">
    
    <!-- 
    Fetch the date/time in RFC 822 format. I need this hack because the
    EXSLT implementation of the date:time functions does not take into account
    Daylight Savings Time!
    -->
    <exec executable="date" os="Linux" failonerror="true"
      outputproperty="rss.date.rfc822">
      <arg value="-R"/>
    </exec>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="rss.check">
      <and>
	<!-- The src.dir needs to be non-empty. -->
        <not><equals arg1="${rss.src.dir}" arg2="" trim="true"/></not>
	<available file="${rss.src.dir}"/> 
	<!-- There must be some files defined -->
	<or>
	  <not><equals arg1="${rss.files}" arg2="" trim="true"/></not>
	  <not><equals arg1="${rss.bilingual.files}" arg2="" trim="true"/></not>
	</or>
	<!-- Require a non-empty dst.dir -->
        <not><equals arg1="${rss.dst.dir}" arg2="" trim="true"/></not>
	<!-- Require a non-empty and available stylesheet -->
        <not><equals arg1="${rss.style.file}" arg2="" trim="true"/></not>
	<available file="${rss.style.file}"/>
	<!-- Require a non-empty RFC 822 date -->
        <not><equals arg1="${rss.date.rfc822}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${rss.debug.level}">rss.check          = "${rss.check}"</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="rss.processing.NOT" unless="rss.check">
    <echo level="${rss.debug.level}">rss.processing              ---</echo>
    <echo level="${rss.debug.level}">${basedir}</echo>
  </target>

  <!-- Empty target to collect all other targets -->
  <target name="rss.processing" 
	  depends="rss.check.values, rss.processing.NOT, 
		   rss.processing.files, rss.processing.bilingual.files,
		   rss.processing.html"/>

  <!-- Generate the language independent files, if any -->
  <target name="rss.processing.files"
	  if="rss.check"
	  description="Process the files with no language">

    <echo>rss.processing              CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="${rss.output.format}"/>
      <param name="xsltproc.files"         value="${rss.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>

    <echo>rss.processing              END(xsltproc.processing)</echo>

  </target>

  <!-- Generate the bilingual files, if any -->
  <target name="rss.processing.bilingual.files"
	  if="rss.check"
	  description="Process the bilingual files">

    <echo>rss.processing.bilingual    CALL(xsltproc.processing 2 versions)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="_es${rss.output.format}"/>
      <param name="xsltproc.files"         value="${rss.bilingual.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${rss.date.rfc822}'
		    --stringparam profile.lang es
		    ${rss.extra.args}"/>
    </antcall>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="_en${rss.output.format}"/>
      <param name="xsltproc.files"         value="${rss.bilingual.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${rss.date.rfc822}'
		    --stringparam profile.lang en
		    ${rss.extra.args}"/>
    </antcall>

    <echo>rss.processing.bilingual    END(xsltproc.processing)</echo>

  </target>

  <target name="rss.processing.html"
	  if="rss.check"
	  description="Produce HTML rendering of all the RSS files">
    <echo>rss.processing              CALL(xsltproc.processing HTML)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file.tohtml}"/>
      <param name="xsltproc.output.format" value=".html"/>
      <param name="xsltproc.files"
	     value="${rss.target.filelist.property}
		    ${rss.target.bilingual.filelist.property}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>
    <echo>rss.processing              END(xsltproc.processing HTML)</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="rss.clean.NOT" unless="rss.check">
    <echo level="${rss.debug.level}">rss.clean                   ---</echo>
    <echo level="${rss.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean files produced by rss -->
  <target name="rss.clean" 
	  depends="rss.check.values, rss.clean.NOT, rss.clean.html,
		   rss.clean.bilingual.files, rss.clean.files"
	  description="Remove files produced by rss"/>

  <target name="rss.clean.html"
	  if="rss.check"
	  description="Clean the HTML files produced">
    
    <echo>rss.clean                   CALL(xsltproc.clean HTML)</echo>
    
    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file.tohtml}"/>
      <param name="xsltproc.output.format" value=".html"/>
      <param name="xsltproc.files"
	     value="${rss.target.filelist.property}
		    ${rss.target.bilingual.filelist.property}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>
    
    <echo>rss.clean                   END(xsltproc.clean HTML)</echo>
  </target>

  <target name="rss.clean.bilingual.files"
	  if="rss.check"
	  description="Clean the bilingual files produced">
    <echo>rss.clean                   CALL(xsltproc.clean 2 versions)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="_es${rss.output.format}"/>
      <param name="xsltproc.files"         value="${rss.bilingual.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${rss.date.rfc822}'
		    --stringparam profile.lang es
		    ${rss.extra.args}"/>
    </antcall>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="_en${rss.output.format}"/>
      <param name="xsltproc.files"         value="${rss.bilingual.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${rss.date.rfc822}'
		    --stringparam profile.lang en
		    ${rss.extra.args}"/>
    </antcall>

    <echo>rss.clean                   END(xsltproc.clean 2 versions)</echo>
  </target>

  <target name="rss.clean.files"
	  if="rss.check"
	  description="Clean the RSS files produced">

    <echo>rss.clean                   CALL(xsltproc.clean)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="${rss.output.format}"/>
      <param name="xsltproc.files"         value="${rss.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>

    <echo>rss.clean                   END(xsltproc.clean)</echo>
  </target>

  <target name="rss.dump.properties" depends="initial.check">
    <echo level="${rss.debug.level}"> ------ Rss properties ----
    rss.src.dir       ="${rss.src.dir}"
    rss.dst.dir       ="${rss.dst.dir}"
    rss.output.format ="${rss.output.format}"
    rss.style.file    ="${rss.style.file}"
    rss.extra.args    ="${rss.extra.args}"
    rss.files         ="${rss.files}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="rss" depends="initial.delete.build.out, rss.processing"/>
</project>
