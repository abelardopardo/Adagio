<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Apply stylesheet to generate RSS channel" default="rss">
  <description>
    Apply the Rss stylefile to the Docbook files specified in rss.files. This
    Docbook file needs to have a very specific structure to derive from that an
    RSS channel suitable to be published. The rule also creates an HTML
    rendering of the information contained in the RSS file to facilitate its
    review with a browser to detect errors. The style is prepared to include
    also the itunes set of labels. Therefore, the produced channel can be
    processed by the itunes client application.
  </description>

  <!-- Checks for availability of different binaries -->
  <import file="Xsltproc.xml"/>

  <!-- Private properties -->
  <property name="rss.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>
  
  <target name="rss.init" depends="ada.init">
    <!-- Property definition -->
    <property name="rss.src.dir"       value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="rss.dst.dir"       value="${rss.src.dir}"
	      description="Directory where the produced files are created"/>
    <property name="rss.output.format" value="_rss.xml"
	      description="Output file has the same name as the source but the
extension is replaced &#10;# by this value"/>
    <property name="rss.extra.args"    value=""
	      description="Extra arguments to pass to the XSLT processor"/>
    <property name="rss.files"         value=""
	      description="Source file names (no path, it is rss.src.dir)"/>
    <property name="rss.multilingual.files"
	      description="Source file names (no path) to process in
multilingual mode"
	      value=""/>
    <property name="rss.style.file" 
	      value="${ada.home}/ADA_Styles/Rss.xsl"
	      description="Full path to the stylesheet file"/>
    <property name="rss.style.file.tohtml" 
	      value="${ada.home}/ADA_Styles/RssToHtml.xsl"
	      description="Full path to the stylesheet file to produce the HTML"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="rss" ADA.SRC.DIR="${rss.src.dir}"
      ADA.DST.DIR="${rss.dst.dir}" ADA.FILES="${rss.files}"/>

    <!-- Obtain the filelist with the produced files. -->
    <pathconvert property="rss.target.filelist.property" pathsep=" ">
      <fileset refid="rss.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="*.xml" to="*${rss.output.format}"/>
	<mapper type="flatten"/>
      </chainedmapper>
    </pathconvert>

    <!-- Source files to be processed (fileset to allow wildcards) -->
    <fileset id="rss.multilingual.fileset" dir="${rss.abssrc.dir}"
	     includes="___bogus___file__name ${rss.multilingual.files}"/>
    
    <!-- 
	 Obtain the filelist with the multilingual source files to see if it is
	 empty 
    -->
    <pathconvert property="rss.source.multilingual.filelist.property" 
		 pathsep=" ">
      <fileset refid="rss.multilingual.fileset"/>
    </pathconvert>

    <!-- 
    Fetch the date/time in RFC 822 format. I need this hack because the
    EXSLT implementation of the date:time functions does not take into account
    Daylight Savings Time!
    -->
    <exec executable="date" os="Linux" failonerror="true"
      outputproperty="ada.rss.date.rfc822">
      <arg value="-R"/>
    </exec>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="rss.check">
      <and>
	<or>
	  <!-- 
	       There must be some files in either of the  rss fileset 
	  -->
	  <not>
	    <equals arg1="${rss.source.filelist.property}" arg2="" trim="true"/>
	  </not>
	  <not>
	    <equals arg1="${rss.source.multilingual.filelist.property}" arg2=""
		    trim="true"/>
	  </not>
	</or>
	<!-- Require a non-empty and available stylesheet -->
        <not><equals arg1="${rss.style.file}" arg2="" trim="true"/></not>
	<available file="${rss.style.file}"/>
	<!-- Require a non-empty RFC 822 date -->
        <not><equals arg1="${ada.rss.date.rfc822}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${rss.debug.level}">  rss.check          = "${rss.check}"</echo>
  </target>

  <!-- Invoke xsltprocessing -->
  <target name="rss.processing" depends="rss.init"
	  if="rss.check" description="Call the xsltproc with the given style">

    <echo>rss.processing              CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc for language neutral -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="${rss.output.format}"/>
      <param name="xsltproc.files"         value="${rss.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${ada.rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>

    <echo>rss.processing              END(xsltproc.processing)</echo>

    <echo>rss.processing.multilingual CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.multilingual.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="${rss.output.format}"/>
      <param name="xsltproc.multilingual.files"
	     value="${rss.multilingual.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${ada.rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>

    <echo>rss.processing.multilingual END(xsltproc.processing)</echo>

    <echo>rss.processing              CALL(xsltproc.processing HTML)</echo>

    <!-- Obtain the filelist with the produced multilingual files. -->
    <pathconvert property="rss.target.multilingual.filelist.property" pathsep=" ">
      <fileset dir="${rss.dst.dir}" includes="*_*${rss.output.format}"/>
      <chainedmapper>
	<mapper type="flatten"/>
      </chainedmapper>
    </pathconvert>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file.tohtml}"/>
      <param name="xsltproc.output.format" value=".html"/>
      <param name="xsltproc.files"
	     value="${rss.target.filelist.property}
		    ${rss.target.multilingual.filelist.property}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${ada.rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>

    <echo>rss.processing              END(xsltproc.processing HTML)</echo>
  </target>

  <!-- Clean files produced by rss -->
  <target name="rss.clean" depends="rss.init"
	  if="rss.check" description="Remove files produced by rss">

    <!-- Obtain the filelist with the produced multilingual files. -->
    <pathconvert property="rss.target.multilingual.filelist.property" pathsep=" ">
      <fileset dir="${rss.dst.dir}" includes="*_*${rss.output.format}"/>
      <chainedmapper>
	<mapper type="flatten"/>
      </chainedmapper>
    </pathconvert>

    <!-- Call HTML clean -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file.tohtml}"/>
      <param name="xsltproc.output.format" value=".html"/>
      <param name="xsltproc.files"
	     value="${rss.target.filelist.property}
		    ${rss.target.multilingual.filelist.property}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${ada.rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>

    <!-- Call Multilingual clean -->
    <antcall target="xsltproc.multilingual.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="${rss.output.format}"/>
      <param name="xsltproc.multilingual.files"
	     value="${rss.multilingual.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${ada.rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${rss.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${rss.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${rss.style.file}"/>
      <param name="xsltproc.output.format" value="${rss.output.format}"/>
      <param name="xsltproc.files"         value="${rss.files}"/>
      <param name="xsltproc.extra.args"    
	     value="--stringparam ada.rss.date.rfc822 '${ada.rss.date.rfc822}'
		    ${rss.extra.args}"/>
    </antcall>

    <echo>rss.clean                   END(xsltproc.clean)</echo>
  </target>

  <target name="rss.dump.properties" depends="rss.init">
    <echo level="${rss.debug.level}"> ------ Rss properties ----
    rss.src.dir            ="${rss.src.dir}"
    rss.dst.dir            ="${rss.dst.dir}"
    rss.output.format      ="${rss.output.format}"
    rss.style.file         ="${rss.style.file}"
    rss.extra.args         ="${rss.extra.args}"
    rss.files              ="${rss.files}"
    rss.multilingual.files ="${rss.multilingual.files}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="rss" depends="rss.init, initial.delete.build.out, rss.processing"/>
</project>
