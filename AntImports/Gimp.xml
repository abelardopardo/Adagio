<?xml version="1.0" encoding="UTF-8"?>

<project name="XCF Image processing with GIMP" default="gimp">

  <!--
      Given the following properties:

      gimp.src.dir: Source directory from where to process files
      gimp.script.file: script to transform XCF to PNG
      gimp.files: comma/space separated list of files to process

      Translate the files in gimp to the format and leave them in the same
      directory but with different extension.
  -->
  
  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml" />

  <!-- Property definition -->
  <property name="gimp.exec"    value="gimp"/>
  <property name="gimp.src.dir" value="${basedir}"/>
  <property name="gimp.script.file" 
            value="${ada.home}${file.separator}AntImports${file.separator}xcftopng.scm"/>
  <property name="gimp.files"   value=""/>
  <!--  Source files to be processed by Gimp -->
  <fileset id="gimp.fileset" dir="${gimp.src.dir}"
	   includes="${gimp.files}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="gimp.check.values" 
	  depends="initial.check, gimp.dump.properties">

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="gimp.check">
      <and>
	<!-- The required binaries need to be available. -->
	<available file="${gimp.exec}${executable.file.extension}"
		   filepath="${env.PATH}"/>
	<available file="${gimp.script.file}"/>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${gimp.src.dir}" arg2=""/></not>
	<!-- There must be some files defined -->
        <not><equals arg1="${gimp.files}" arg2=""/></not>
      </and>
    </condition>

    <!-- Obtain the fileset containing the produced files. This is done to be
    able to display the deleted files (debugging) -->
    <pathconvert property="gimp.target.fileset.property" pathsep=" ">
      <fileset refid="gimp.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="*.xcf" to="*.png"/>
	<mapper type="flatten"/>
      </chainedmapper>
    </pathconvert>
    <fileset id="gimp.target.fileset" dir="${gimp.src.dir}"
	     includes="${gimp.target.fileset.property}"/>

    <!-- Dump the value of the properties just computed. -->
    <echo level="info">gimp.check          = "${gimp.check}"
    gimp.fileset         = "${gimp.files}"
    gimp.target.fileset     = "${gimp.target.fileset.property}"</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="gimp.processing.NOT" unless="gimp.check">
    <echo>gimp.processing             ---</echo>
    <echo>${basedir}</echo>
  </target>
    
  <!-- Regular target. It is executed if the check property is true, and it has
  as dependency the NOT target. That way, if the property is not set, this
  target is not executed and instead, the one notifying the user of such event
  is executed. -->
  <target name="gimp.processing" 
	  depends="gimp.check.values, gimp.processing.NOT"
	  if="gimp.check" 
	  description="Transform XCF files to PNG">

    <echo>gimp.processing             RUN</echo>
    <echo>${basedir}</echo>

    <!-- Force the dependency checking on changes on the script file -->
    <dependset>
      <srcfileset file="${gimp.script.file}" />
      <targetfileset refid="gimp.target.fileset" />
    </dependset>

    <!-- Transform XCF files to PNG IN THE SAME DIRECTORY -->
    <!-- TARGET BROKEN IN WINDOWS. HAVE TO FIGURE OUT HOW TO INVOKE GIMP -->
    <apply dir="${gimp.src.dir}" parallel="false" dest="${gimp.src.dir}" 
	   append="yes"  failonerror="true" executable="${gimp.exec}" 
	   output="build.out" osfamily="unix"
	   input="${gimp.script.file}">
      <arg value="--no-data" />
      <arg value="--no-fonts" />
      <arg value="--no-interface" />
      <arg value="-b" />
      <arg value="-" />
      <fileset refid="gimp.fileset"/>
      <!-- Mapper to catch dependencies -->
      <mapper type="glob" from="*.xcf" to="*.png"/>
    </apply>

    <fail message="Gimp does not work in this setting in Windows">
      <condition>
	<os family="windows"/>
      </condition>
    </fail>
  </target>

  <!-- Clean files produced by gimp -->
  <target name="gimp.clean" depends="gimp.check.values"
	  if="gimp.check" description="Remove files produced by gimp">
    
    <echo>gimp.clean             RUN</echo>
    <echo>${basedir}</echo>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${gimp.target.fileset.property}</echo>
    
    <!-- Perform the delete operation. The failonerror attributge is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false">
      <fileset dir="${gimp.src.dir}"
	       includes="${gimp.target.fileset.property}">
	<include name="__bogus__file__to__avoid__empty__fileset"/>
      </fileset>
    </delete>
    
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="gimp.dump.properties" depends="initial.check">
    <echo level="info"> ------ Gimp properties ----
    gimp.exec        ="${gimp.exec}"
    gimp.src.dir     = "${gimp.src.dir}"
    gimp.script.file = "${gimp.script.file}"
    gimp.files       ="${gimp.files}" </echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="gimp" depends="initial.delete.build.out, gimp.processing"/>
</project>
