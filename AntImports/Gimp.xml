<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="XCF Image processing with GIMP" default="gimp">

  <description>
    Process files using the Gimp translator.
  </description>

  <!--
      Given the following properties:

      gimp.src.dir: Source directory from where to process files
      gimp.script.file: script to transform XCF to PNG
      gimp.files: comma/space separated list of files to process

      Translate the files in gimp to the format and leave them in the same
      directory but with different extension.
  -->

  <import file="InitialCheck.xml" />

  <property name="gimp.exec"    value="gimp"
	    description="Name of the Gimp executable"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${gimp.exec}"/>

  <!-- Private properties -->
  <property name="gimp.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>
    
  <target name="gimp.init" depends="ada.init" if="gimp.execution.possible">
    <!-- Public Property definition -->
    <property name="gimp.src.dir" value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="gimp.script.file" 
	      value="${ada.home}${file.separator}AntImports${file.separator}xcftopng.scm"
	      description="GIMP script file to use"/>
    <property name="gimp.files" value=""
	      description="Source file names (no path, it is gimp.src.dir)"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="gimp" ADA.SRC.DIR="${gimp.src.dir}"
      ADA.DST.DIR="${gimp.dst.dir}" ADA.FILES="${gimp.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="gimp.check">
      <and>
	<available file="${gimp.script.file}"/>
	<!-- 
	     There must be some files in the fileset (after regexp expansion) 
	-->
        <not>
	  <equals arg1="${gimp.source.filelist.property}" arg2="" trim="true"/>
	</not>
      </and>
    </condition>

    <!-- 
	 Obtain the fileset containing the produced files to be used in a
	 dependency check
    -->
    <pathconvert property="gimp.target.filelist.property" pathsep=" ">
      <fileset refid="gimp.fileset"/>
      <mapper type="glob" from="*.xcf" to="*.png"/>
    </pathconvert>
    <filelist id="gimp.target.filelist"
	      files="${gimp.target.filelist.property}"/>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${gimp.debug.level}">gimp.check          = "${gimp.check}"
gimp.target.filelist     = "${gimp.target.filelist.property}"
gimp.execution.possible = ${gimp.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="gimp.processing" depends="gimp.init" if="gimp.check" 
	  description="Transform XCF files to PNG">

    <echo>gimp.processing             RUN</echo>
    <echo level="${gimp.debug.level}">${basedir}</echo>

    <!-- Force the dependency checking on changes on the script file -->
    <dependset>
      <srcfileset file="${gimp.script.file}" />
      <targetfilelist refid="gimp.target.filelist" />
    </dependset>

    <!-- Transform XCF files to PNG IN THE SAME DIRECTORY -->
    <!-- TARGET BROKEN IN WINDOWS. HAVE TO FIGURE OUT HOW TO INVOKE GIMP -->
    <apply dir="${gimp.abssrc.dir}" parallel="false" dest="${gimp.abssrc.dir}" 
	   append="yes"  failonerror="true" executable="${gimp.exec}" 
	   output="build.out" osfamily="unix"
	   input="${gimp.script.file}">
      <arg value="--no-data" />
      <arg value="--no-fonts" />
      <arg value="--no-interface" />
      <arg value="-b" />
      <arg value="-" />
      <fileset refid="gimp.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.xcf" to="*.png"/>
    </apply>

    <fail message="Gimp does not work in this setting in Windows">
      <condition>
	<os family="windows"/>
      </condition>
    </fail>
  </target>

  <!-- Clean files produced by gimp -->
  <target name="gimp.clean" depends="gimp.init"
	  if="gimp.check" description="Remove files produced by gimp">
    
    <echo>gimp.clean                  RUN</echo>
    <echo level="${gimp.debug.level}">${basedir}</echo>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${gimp.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${gimp.target.filelist.property}"/>
    </delete>
    
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="gimp.dump.properties" depends="gimp.init">
    <echo level="${gimp.debug.level}"> ------ Gimp properties ----
    gimp.exec        ="${gimp.exec}"
    gimp.abssrc.dir     = "${gimp.abssrc.dir}"
    gimp.script.file = "${gimp.script.file}"
    gimp.files       ="${gimp.files}" </echo>
  </target>

  <target name="gimp.report.YES" depends="gimp.init"
	  if="gimp.execution.possible">
    <echo>Gimp               |     *     |</echo>
  </target>

  <target name="gimp.report.NO" depends="gimp.init"
	  unless="gimp.execution.possible">
    <echo>Gimp               |           |     * (install ${gimp.exec})</echo>
  </target>

  <target name="gimp.report" depends="gimp.report.YES,
				      gimp.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="gimp" depends="initial.delete.build.out, gimp.processing"/>
</project>
