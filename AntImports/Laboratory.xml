<?xml version="1.0" encoding="UTF-8"?>

<project name="Create documents for a lab" default="laboratory.processing">

  <!--
      Given the following properties and fileset:

      laboratory.src.dir: directory from where to take the source files
      laboratory.dst.dir: directory where the produced files are stored
      laboratory.output.format: Extension of the output file
      laboratory.style.file: Style file to be used
      laboratory.files: comma/space separated list of files to process
      laboratory.multilingual.files: list of files to process multiple languages

      It invokes three times xsltproc to generate the regular HTML document, the
      one with the solution and pguide profiles.
  -->

  <import file="Cleaning.xml"/>
  <import file="SubRecursive.xml"/>
  <import file="Xsltproc.xml"/>

  <!-- Private properties -->
  <property name="laboratory.debug.level"    value="${ada.debug.level}"/>
  
  <target name="laboratory.init" depends="ada.init">
    <!-- Property definition -->
    <property name="laboratory.src.dir"       value="${basedir}"/>
    <property name="laboratory.dst.dir"       value="${laboratory.src.dir}"/>
    <property name="laboratory.style.file" 
	      value="${ada.home}/XslStyles/Laboratory.xsl"/>
    <property name="laboratory.submit.style.file" 
	      value="${ada.home}/XslStyles/Submit.xsl"/>
    <property name="laboratory.extra.args" value=""/>
    <property name="laboratory.output.format"   value=".html"/>
    <property name="laboratory.files"           value=""/>
    <property name="laboratory.multilingual.files" value=""/>
    
    <!-- Private properties -->
    <property name="laboratory.creating.files"  value=""/>
    <property name="laboratory.creating.multilingual.files"  
	      value=""/>
    <property name="laboratory.manipulate.target" 
	      value="xsltproc.processing"/>

    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="laboratory" ADA.SRC.DIR="${laboratory.src.dir}"
      ADA.DST.DIR="${laboratory.dst.dir}" ADA.FILES="${laboratory.files}"/>

    <!-- Source files to be processed (fileset to allow wildcards) -->
    <fileset id="laboratory.multilingual.fileset" dir="${laboratory.abssrc.dir}"
	     includes="___bogus___file__name ${laboratory.multilingual.files}"/>
    
    <!-- 
	 Obtain the filelist with the multilingual source files to see if it is
	 empty 
    -->
    <pathconvert property="laboratory.source.multilingual.filelist.property" 
		 pathsep=" ">
      <fileset refid="laboratory.multilingual.fileset"/>
    </pathconvert>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="laboratory.check">
      <!-- There must be some files defined -->
      <or>
	<not>
	  <equals arg1="${laboratory.source.filelist.property}" arg2=""
		  trim="true"/>
	</not>
	<not>
	  <equals arg1="${laboratory.source.multilingual.filelist.property}"
		  arg2="" trim="true"/>
	</not>
      </or>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${laboratory.debug.level}">    laboratory.check          = "${laboratory.check}"</echo>
  </target>

  <!-- Invoke xsltprocessing -->
  <target name="laboratory.processing" depends="laboratory.init"
	  if="laboratory.check" description="Call all the multiple xsltprocs">

    <echo>laboratory.processing       CALL(xsltproc.processing 3 versions)</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${laboratory.dst.dir}" />

    <!-- Create all the files (language neutral) -->
    <antcall target="laboratory.manipulate.files" inheritAll="false">
      <param name="laboratory.creating.files" value="${laboratory.files}"/>
    </antcall>

    <!-- Create all the multilingual files -->
    <antcall target="laboratory.manipulate.files" inheritAll="false">
      <param name="laboratory.creating.multilingual.files" 
	     value="${laboratory.multilingual.files}"/>
      <param name="laboratory.manipulate.target" 
	     value="xsltprocmultilingual.processing"/>
    </antcall>

    <echo>laboratory.processing       END(xsltproc.processing 3 versions)</echo>
  </target>

  <!-- Clean files produced by laboratory -->
  <target name="laboratory.clean" depends="laboratory.init"
	  if="laboratory.check" description="Remove files produced by laboratory">

    <echo>laboratory.clean            CALL(xsltproc.processing 3 versions)</echo>

    <!-- Delete all the multilingual files -->
    <antcall target="laboratory.clean.files" inheritAll="false">
      <param name="laboratory.creating.multilingual.files" 
	     value="${laboratory.multilingual.files}"/>
      <param name="laboratory.manipulate.target" 
	     value="xsltprocmultilingual.clean"/>
    </antcall>

    <!-- Delete all the language neutral files -->
    <antcall target="laboratory.clean.files" inheritAll="false">
      <param name="laboratory.creating.files" value="${laboratory.files}"/>
      <param name="laboratory.manipulate.target" value="xsltproc.clean"/>
    </antcall>

    <echo>laboratory.clean            END(xsltproc.processing 3 versions)</echo>
  </target>

  <target name="laboratory.dump.properties" depends="laboratory.init">
    <echo level="${laboratory.debug.level}"> ------ Laboratory properties ----
    laboratory.src.dir           ="${laboratory.src.dir}"
    laboratory.dst.dir           ="${laboratory.dst.dir}"
    laboratory.style.file        ="${laboratory.style.file}"
    laboratory.submit.style.file ="${laboratory.style.file}"
    laboratory.output.format     ="${laboratory.output.format}"
    laboratory.extra.args        ="${laboratory.extra.args}"
    laboratory.files             ="${laboratory.files}"
    laboratory.multilingual.files="${laboratory.files}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="laboratory" depends="initial.delete.build.out, laboratory.processing"/>

  <!-- Create the regular file, solution and professor guide -->
  <target name="laboratory.manipulate.files" depends="laboratory.init">

    <!-- Call xsltproc with no extra options -->
    <antcall target="${laboratory.manipulate.target}" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${laboratory.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${laboratory.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${laboratory.style.file}"/>
      <param name="xsltproc.output.format" value="${laboratory.output.format}"/>
      <param name="xsltproc.files"         value="${laboratory.creating.files}"/>
      <param name="xsltproc.multilingual.files"
	     value="${laboratory.creating.multilingual.files}"/>
      <param name="xsltproc.extra.args" value="${laboratory.extra.args}"/>
    </antcall>

    <!-- Call xsltproc to generate the solution -->
    <antcall target="${laboratory.manipulate.target}" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${laboratory.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${laboratory.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${laboratory.style.file}"/>
      <param name="xsltproc.output.format"
	     value="_solution${laboratory.output.format}"/>
      <param name="xsltproc.files"      value="${laboratory.creating.files}"/>
      <param name="xsltproc.multilingual.files"
	     value="${laboratory.creating.multilingual.files}"/>
      <param name="xsltproc.extra.args" 
	     value="${laboratory.extra.args} 
                    --stringparam solutions.include.guide yes"/>
    </antcall>

    <!-- Call xsltproc to generate the professor guide -->
    <antcall target="${laboratory.manipulate.target}" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${laboratory.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${laboratory.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${laboratory.style.file}"/>
      <param name="xsltproc.output.format"
	     value="_pguide${laboratory.output.format}"/>
      <param name="xsltproc.files"      value="${laboratory.creating.files}"/>
      <param name="xsltproc.multilingual.files"
	     value="${laboratory.creating.multilingual.files}"/>
      <param name="xsltproc.extra.args" 
	     value="${laboratory.extra.args} 
                    --stringparam professorguide.include.guide yes
                    --stringparam solutions.include.guide yes"/>
    </antcall>

    <!-- Call xsltproc to generate the submission page -->
    <antcall target="${laboratory.manipulate.target}" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${laboratory.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${laboratory.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${laboratory.submit.style.file}"/>
      <param name="xsltproc.output.format"
	     value="_submit${laboratory.output.format}"/>
      <param name="xsltproc.files"      value="${laboratory.creating.files}"/>
      <param name="xsltproc.multilingual.files"
	     value="${laboratory.creating.multilingual.files}"/>
      <param name="xsltproc.extra.args" value="${laboratory.extra.args}"/>
    </antcall>
  </target>

  <!-- Create the regular file, solution and professor guide -->
  <target name="laboratory.clean.files" depends="laboratory.init">

    <!-- Call xsltproc to generate the submission page -->
    <antcall target="${laboratory.manipulate.target}" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${laboratory.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${laboratory.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${laboratory.submit.style.file}"/>
      <param name="xsltproc.output.format"
	     value="_submit${laboratory.output.format}"/>
      <param name="xsltproc.files"      value="${laboratory.creating.files}"/>
      <param name="xsltproc.multilingual.files"
	     value="${laboratory.creating.multilingual.files}"/>
      <param name="xsltproc.extra.args" value="${laboratory.extra.args}"/>
    </antcall>

    <!-- Call xsltproc to generate the professor guide -->
    <antcall target="${laboratory.manipulate.target}" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${laboratory.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${laboratory.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${laboratory.style.file}"/>
      <param name="xsltproc.output.format"
	     value="_pguide${laboratory.output.format}"/>
      <param name="xsltproc.files"      value="${laboratory.creating.files}"/>
      <param name="xsltproc.multilingual.files"
	     value="${laboratory.creating.multilingual.files}"/>
      <param name="xsltproc.extra.args" 
	     value="${laboratory.extra.args} 
                    --stringparam professorguide.include.guide yes
                    --stringparam solutions.include.guide yes"/>
    </antcall>

    <!-- Call xsltproc to generate the solution -->
    <antcall target="${laboratory.manipulate.target}" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${laboratory.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${laboratory.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${laboratory.style.file}"/>
      <param name="xsltproc.output.format"
	     value="_solution${laboratory.output.format}"/>
      <param name="xsltproc.files"      value="${laboratory.creating.files}"/>
      <param name="xsltproc.multilingual.files"
	     value="${laboratory.creating.multilingual.files}"/>
      <param name="xsltproc.extra.args" 
	     value="${laboratory.extra.args} 
                    --stringparam solutions.include.guide yes"/>
    </antcall>

    <!-- Call xsltproc with no extra options -->
    <antcall target="${laboratory.manipulate.target}" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${laboratory.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${laboratory.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${laboratory.style.file}"/>
      <param name="xsltproc.output.format" value="${laboratory.output.format}"/>
      <param name="xsltproc.files"         value="${laboratory.creating.files}"/>
      <param name="xsltproc.multilingual.files"
	     value="${laboratory.creating.multilingual.files}"/>
      <param name="xsltproc.extra.args" value="${laboratory.extra.args}"/>
    </antcall>

  </target>

</project>

