<?xml version="1.0" encoding="UTF-8"?>

<project name="Run latex over a file twice" default="latex">
  <description>
    Execute the LaTeX processor over a set of files
  </description>

  <import file="InitialCheck.xml"/>

  <property name="latex.exec"           value="latex"
	    description="Name of the LaTeX processor executable"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${latex.exec}"/>
  
  <!-- Private properties -->
  <property name="latex.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>

  <target name="latex.init" depends="ada.init" if="latex.execution.possible">
    <!-- Public Property definition -->
    <property name="latex.src.dir"        value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="latex.dst.dir"        value="${latex.src.dir}"
	      description="Directory where the produced files are created"/>
    <property name="latex.files"          value=""
	      description="Source file names (no path, it is latex.src.dir)"/>
    <property name="latex.extra.args"     value=""
	      description="Extra arguments to pass to the LaTeX processor"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="latex" ADA.SRC.DIR="${latex.src.dir}"
      ADA.DST.DIR="${latex.dst.dir}" ADA.FILES="${latex.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="latex.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${latex.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${latex.debug.level}">  latex.check              = "${latex.check}"
  latex.execution.possible = ${latex.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="latex.processing" depends="latex.init"
	  if="latex.check" description="Execute latex twice to make sure refs. are solved.">

    <echo>latex.processing            RUN</echo>
    <echo level="${latex.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${latex.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${latex.absdst.dir}" 
	   append="yes" failonerror="true" executable="${latex.exec}" 
	   output="build.out">
      <arg line="${latex.extra.args}"/>
      <srcfile/>
      <fileset refid="latex.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.tex" to="*.dvi"/>
    </apply>    
  </target>

  <!-- Clean files produced by latex -->
  <target name="latex.clean" depends="latex.init"
	  if="latex.check" description="Remove files produced by latex">

    <echo>latex.clean                 RUN</echo>
    <echo level="${latex.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="latex.target.filelist.property" pathsep=" ">
      <fileset refid="latex.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${latex.abssrc.dir}/*" 
		to="${latex.absdst.dir}/*"/>
	<mapper type="glob" from="*.tex" to="*.dvi"/>
      </chainedmapper>
    </pathconvert>

    <!-- Obtain the fileset containing the temporary files produced by latex -->
    <pathconvert property="latex.tmptarget.filelist.property" pathsep=" ">
      <fileset refid="latex.fileset"/>
      <chainedmapper>
	<compositemapper>
	  <mapper type="glob" from="*.tex" to="*.aux"/>
	  <mapper type="glob" from="*.tex" to="*.bbl"/>
	  <mapper type="glob" from="*.tex" to="*.blg"/>
	  <mapper type="glob" from="*.tex" to="*.idx"/>
	  <mapper type="glob" from="*.tex" to="*.ilg"/>
	  <mapper type="glob" from="*.tex" to="*.ind"/>
	  <mapper type="glob" from="*.tex" to="*.lof"/>
	  <mapper type="glob" from="*.tex" to="*.log"/>
	  <mapper type="glob" from="*.tex" to="*.lot"/>
	  <mapper type="glob" from="*.tex" to="*.out"/>
	  <mapper type="glob" from="*.tex" to="*.toc"/>
	</compositemapper>
	<mapper type="glob" from="${latex.abssrc.dir}/*" 
		to="${latex.absdst.dir}/*"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${latex.target.filelist.property}</echo>
    <echo> deleted = ${latex.tmptarget.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${latex.target.filelist.property}"/>
      <files includes="${latex.tmptarget.filelist.property}"/>
      <fileset file="${basedir}/texput.log"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="latex.dump.properties" depends="latex.init">
    <echo level="${latex.debug.level}"> ------ latex properties ----
    latex.exec       ="${latex.exec}"
    latex.abssrc.dir ="${latex.abssrc.dir}"
    latex.absdst.dir ="${latex.absdst.dir}"
    latex.files      ="${latex.files}"
    latex.extra.args ="${latex.extra.args}"</echo>
  </target>

  <target name="latex.report.YES" depends="latex.init"
	  if="latex.execution.possible">
    <echo>Latex              |     *     |</echo>
  </target>

  <target name="latex.report.NO" depends="latex.init"
	  unless="latex.execution.possible">
    <echo>Latex              |           |     * (install ${latex.exec})</echo>
  </target>

  <target name="latex.report" depends="latex.report.YES,
				      latex.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="latex" depends="latex.init, initial.delete.build.out, latex.processing"/>
</project>
