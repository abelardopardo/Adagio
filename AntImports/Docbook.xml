<?xml version="1.0" encoding="UTF-8"?>

<project name="Apply stylesheet to docbook files" default="docbook">

  <!--
      Given the following properties:

      docbook.src.dir: directory from where to take the source files
      docbook.dst.dir: directory where the produced files are stored
      docbook.style.file: Style file to be used
      docbook.output.format: Extension of the output file
      docbook.extra.args: Extra arguments to invoke xsltproc
      docbook.files: Comma separate list of files to process

      Produce the aplication of a stylefile to the files in docbook.files
  -->

  <!-- Property definition -->
  <property name="docbook.src.dir"        value="${basedir}"/>
  <property name="docbook.dst.dir"        value="${docbook.src.dir}"/>
  <property name="docbook.output.format"  value=".html"/>
  <property name="docbook.extra.args"     value=""/>
  <property name="docbook.files"          value=""/>
  <property name="docbook.style.file"     
	    value="${ada.home}/XslStyles/DocbookProfile.xsl"/>

  <!-- Private properties -->
  <property name="docbook.debug.level"    value="${ada.debug.level}"/>

  <!-- Preliminary target to verify that certain minimum conditions hold before
       executing the regular targets. -->
  <target name="docbook.check.values" 
	  depends="ada.init, docbook.dump.properties">
    
    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="docbook.check">
      <and>
	<!-- The src.dir needs to be non-empty. -->
        <not><equals arg1="${docbook.src.dir}" arg2="" trim="true"/></not>
	<available file="${docbook.src.dir}"/> 
	<!-- There must be some files defined -->
	<not><equals arg1="${docbook.files}" arg2="" trim="true"/></not>
	<!-- Require a non-empty dst.dir -->
        <not><equals arg1="${docbook.dst.dir}" arg2="" trim="true"/></not>
	<!-- Require a non-empty and available stylesheet -->
        <not><equals arg1="${docbook.style.file}" arg2="" trim="true"/></not>
	<available file="${docbook.style.file}"/>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${docbook.debug.level}">    docbook.check          = "${docbook.check}"</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="docbook.processing.NOT" unless="docbook.check">
    <echo level="${docbook.debug.level}">docbook.processing          ---</echo>
    <echo level="${docbook.debug.level}">${basedir}</echo>
  </target>

  <!-- Invoke xsltprocessing -->
  <target name="docbook.processing" 
	  depends="docbook.check.values, docbook.processing.NOT"
	  if="docbook.check" 
	  description="Call the xsltproc with the given style">

    <echo>docbook.processing          CALL(xsltproc.processing)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.processing" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${docbook.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${docbook.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${docbook.style.file}"/>
      <param name="xsltproc.output.format" value="${docbook.output.format}"/>
      <param name="xsltproc.files"         value="${docbook.files}"/>
      <param name="xsltproc.extra.args"    value="${docbook.extra.args}"/>
    </antcall>

    <echo>docbook.processing          END(xsltproc.processing)</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="docbook.clean.NOT" unless="docbook.check">
    <echo level="${docbook.debug.level}">docbook.clean               ---</echo>
    <echo level="${docbook.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean files produced by docbook -->
  <target name="docbook.clean" 
	  depends="docbook.check.values, docbook.clean.NOT"
	  if="docbook.check"
	  description="Remove files produced by docbook">

    <echo>docbook.clean               CALL(xsltproc.clean)</echo>

    <!-- Call xsltproc -->
    <antcall target="xsltproc.clean" inheritAll="false">
      <param name="xsltproc.src.dir"       value="${docbook.src.dir}"/>
      <param name="xsltproc.dst.dir"       value="${docbook.dst.dir}"/>
      <param name="xsltproc.style.file"    value="${docbook.style.file}"/>
      <param name="xsltproc.output.format" value="${docbook.output.format}"/>
      <param name="xsltproc.extra.args"    value="${docbook.extra.args}"/>
      <param name="xsltproc.files"         value="${docbook.files}"/>
    </antcall>

    <echo>docbook.clean               END(xsltproc.clean)</echo>
  </target>

  <target name="docbook.dump.properties" depends="ada.init">
    <echo level="${docbook.debug.level}"> ------ Docbook properties ----
    docbook.src.dir       ="${docbook.src.dir}"
    docbook.dst.dir       ="${docbook.dst.dir}"
    docbook.style.file    ="${docbook.style.file}"
    docbook.output.format ="${docbook.output.format}"
    docbook.extra.args    ="${docbook.extra.args}"
    docbook.files         ="${docbook.files}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="docbook" depends="initial.delete.build.out, docbook.processing"/>
</project>
