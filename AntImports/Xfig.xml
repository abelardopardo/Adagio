<?xml version="1.0" encoding="UTF-8"?>

<project name="Figure Processing with xfig" default="xfig">

  <!--
      Given the following properties:

      xfig.src.dir: directory from where to take the source files
      xfig.dst.dir: directory where the translated files are stored
      xfig.files: Files to translate
      xfig.output.format : Format to translate the xfigs
      xfig.border : pixels to include the border in a figure (only xfig)
      xfig.smooth : smooth factor for figures (only xfig)
      xfig.extra.args: Other options to give to fig2dev

      Process files in fileset with xfig. They are translated to the format
      specified in mode with the pixels given in border and the smooth factor in
      smooth.
  -->

  <import file="InitialCheck.xml"/>

  <property name="xfig.exec"          value="fig2dev"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${xfig.exec}"/>
  
  <!-- Private properties -->
  <property name="xfig.debug.level"    value="${ada.debug.level}"/>

  <target name="xfig.init" depends="ada.init" if="xfig.execution.possible">
    <!-- Public Property definition -->
    <property name="xfig.src.dir"       value="${basedir}"/>
    <property name="xfig.dst.dir"       value="${xfig.src.dir}"/>
    <property name="xfig.output.format" value="png"/>
    <property name="xfig.border"        value="2"/>
    <property name="xfig.smooth"        value="4"/>
    <property name="xfig.extra.args"    value=""/>
    <property name="xfig.files"         value=""/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="xfig" ADA.SRC.DIR="${xfig.src.dir}"
      ADA.DST.DIR="${xfig.dst.dir}" ADA.FILES="${xfig.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="xfig.check">
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
      <not>
	<equals arg1="${xfig.source.filelist.property}" arg2="" trim="true"/>
      </not>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${xfig.debug.level}">xfig.check              = "${xfig.check}"
xfig.execution.possible = ${xfig.execution.possible}</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="xfig.processing" 
	  depends="xfig.init" if="xfig.check" description="creates the figures from the fig files">

    <echo level="${xfig.debug.level}">${basedir}</echo>
    
    <!-- Create the dst directory -->
    <mkdir dir="${xfig.absdst.dir}" />
    
    <apply dir="${basedir}" parallel="false"
	   dest="${xfig.absdst.dir}" append="yes" failonerror="true"
	   executable="${xfig.exec}" forwardslash="true" output="build.out">
      <arg value="-L"/>
      <arg value="${xfig.output.format}"/>
      <arg value="-b"/>
      <arg value="${xfig.border}"/>
      <arg value="-S"/>
      <arg value="${xfig.smooth}"/>
      <arg line="${xfig.extra.args}"/>
      <srcfile/>
      <targetfile/>
      <fileset refid="xfig.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.fig" to="*.${xfig.output.format}"/>
    </apply>
  </target>

  <!-- Clean files produced by xfig -->
  <target name="xfig.clean" depends="xfig.init"
	  if="xfig.check" description="Remove files produced by xfig">

    <echo>xfig.clean                  RUN</echo>
    <echo level="${xfig.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="xfig.target.filelist.property" pathsep=" ">
      <fileset refid="xfig.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${xfig.abssrc.dir}/*"
		to="${xfig.absdst.dir}/*"/>
	<mapper type="glob" from="*.fig" to="*.${xfig.output.format}"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${xfig.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${xfig.target.filelist.property}"/>
    </delete>

    <!-- Backup and *.out files in figure dir -->
    <delete>
      <fileset dir="${xfig.src.dir}">
        <include name="*.fig.bak"/>
        <include name="fig2dev.out"/>
      </fileset>
    </delete>

  </target>

  <!-- Dump the properties defined in this script -->
  <target name="xfig.dump.properties" depends="xfig.init">
    <echo level="${xfig.debug.level}"> ------ Xfig properties ----
    xfig.exec          ="${xfig.exec}"
    xfig.abssrc.dir    ="${xfig.abssrc.dir}"
    xfig.absdst.dir    ="${xfig.absdst.dir}"
    xfig.output.format ="${xfig.output.format}"
    xfig.border        ="${xfig.border}"
    xfig.smooth        ="${xfig.smooth}"
    xfig.extra.args    ="${xfig.extra.args}"
    xfig.files         ="${xfig.files}" </echo>
  </target>

  <target name="xfig.report.YES" depends="xfig.init"
	  if="xfig.execution.possible">
    <echo>Xfig               |     *     |</echo>
  </target>

  <target name="xfig.report.NO" depends="xfig.init"
	  unless="xfig.execution.possible">
    <echo>Xfig               |           |     * (install ${xfig.exec})</echo>
  </target>

  <target name="xfig.report" depends="xfig.report.YES,
				      xfig.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="xfig" depends="xfig.init, initial.delete.build.out, xfig.processing"/>
</project>
