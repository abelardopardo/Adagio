<?xml version="1.0" encoding="UTF-8"?>

<project name="Figure Processing with xfig" default="xfig">

  <!--
      Given the following properties:

      xfig.src.dir: directory from where to take the source files
      xfig.dst.dir: directory where the translated files are stored
      xfig.files: Files to translate
      xfig.output.format : Format to translate the xfigs
      xfig.border : pixels to include the border in a figure (only xfig)
      xfig.smooth : smooth factor for figures (only xfig)
      xfig.extra.args: Other options to give to fig2dev

      Process files in fileset with xfig. They are translated to the format
      specified in mode with the pixels given in border and the smooth factor in
      smooth.
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>

  <!-- Public Property definition -->
  <property name="xfig.exec"          value="fig2dev"/>
  <property name="xfig.src.dir"       value="${basedir}"/>
  <property name="xfig.dst.dir"       value="${xfig.src.dir}"/>
  <property name="xfig.output.format" value="png"/>
  <property name="xfig.border"        value="2"/>
  <property name="xfig.smooth"        value="4"/>
  <property name="xfig.extra.args"    value=""/>
  <property name="xfig.files"         value=""/>

  <!-- Private properties -->
  <property name="xfig.debug.level"    value="${ada.debug.level}"/>

  <!-- Define two properties containing the absolute src and dst paths -->
  <pathconvert property="xfig.abssrc.dir" pathsep=" ">
    <path location="${xfig.src.dir}"/>
  </pathconvert>
  <pathconvert property="xfig.absdst.dir" pathsep=" ">
    <path  location="${xfig.dst.dir}"/>
  </pathconvert>

  <!-- Source files to be processed by fig2dev (fileset to allow wildcards) -->
  <fileset id="xfig.fileset" dir="${xfig.abssrc.dir}"
	   includes="${xfig.files}"/>
  
  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="xfig.check.values" 
	  depends="initial.check, xfig.dump.properties">

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="xfig.check">
      <and>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${xfig.abssrc.dir}" arg2=""/></not>
	<!-- There must be some files defined -->
        <not><equals arg1="${xfig.files}" arg2=""/></not>
	<!-- Require a non-empty dst.dir as well -->
        <not><equals arg1="${xfig.absdst.dir}" arg2=""/></not>
      </and>
    </condition>

    <!-- The required condition not to bomb out -->
    <condition property="xfig.execution.possible">
      <and>
	<available file="${xfig.exec}${executable.file.extension}"
		   filepath="${env.PATH}"/>
	<available file="${xfig.abssrc.dir}"/> 
      </and>
    </condition>

    <condition property="xfig.failure">
      <and>
	<isset property="xfig.check"/>
	<not><isset property="xfig.execution.possible"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${xfig.debug.level}">  xfig.check  = "${xfig.check}"
  xfig.execution.possible = ${xfig.execution.possible}
  xfig.failure            = ${xfig.failure}</echo>
  </target>

  <target name="xfig.bomb.out" if="xfig.failure">
    <fail message="xfig rule cannot be executed. Review the value of
		   variables xfig.src.dir and xfig.exec"/>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="xfig.processing.NOT" depends="xfig.bomb.out"
	  unless="xfig.check">
    <echo level="${xfig.debug.level}">xfig.processing             ---</echo>
    <echo level="${xfig.debug.level}">${basedir}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true, and it has
  as dependency the NOT target. That way, if the property is not set, this
  target is not executed and instead, the one notifying the user of such event
  is executed. -->
  <target name="xfig.processing" 
	  depends="xfig.check.values, xfig.processing.NOT"
	  if="xfig.check" description="creates the figures from the fig files">

    <echo>xfig.processing             RUN</echo>
    <echo level="${xfig.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${xfig.absdst.dir}" />

    <apply dir="${basedir}" parallel="false"
      dest="${xfig.absdst.dir}" append="yes" failonerror="true"
      executable="${xfig.exec}" forwardslash="true" output="build.out">
      <arg value="-L"/>
      <arg value="${xfig.output.format}"/>
      <arg value="-b"/>
      <arg value="${xfig.border}"/>
      <arg value="-S"/>
      <arg value="${xfig.smooth}"/>
      <arg line="${xfig.extra.args}"/>
      <srcfile/>
      <targetfile/>
      <fileset refid="xfig.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.fig" to="*.${xfig.output.format}"/>
    </apply>    
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="xfig.clean.NOT" unless="xfig.check">
    <echo level="${xfig.debug.level}">xfig.clean                  ---</echo>
    <echo level="${xfig.debug.level}">${basedir}</echo>
  </target>

  <!-- Clean the produced files -->
  <target name="xfig.clean" depends="xfig.check.values, xfig.clean.NOT"
	  if="xfig.check" 
	  description="Clean files derived from the fig files"> 

    <echo>xfig.clean                  RUN</echo>
    <echo level="${xfig.debug.level}">${basedir}</echo>

    <!-- Obtain the fileset with the produced files. -->
    <pathconvert property="xfig.target.filelist.property" pathsep=" ">
      <fileset refid="xfig.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${xfig.abssrc.dir}/*"
		to="${xfig.absdst.dir}/*"/>
	<mapper type="glob" from="*.fig" to="*.${xfig.output.format}"/>
      </chainedmapper>
    </pathconvert>

    <filelist id="xfig.target.filelist"
	      files="${xfig.target.filelist.property}"/>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${xfig.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attributge is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <filelist refid="xfig.target.filelist"/>
    </delete>

    <!-- Backup and *.out files in figure dir -->
    <delete>
      <fileset dir="${xfig.src.dir}">
        <include name="*.fig.bak"/>
        <include name="fig2dev.out"/>
      </fileset>
    </delete>

  </target>

  <!-- Dump the properties defined in this script -->
  <target name="xfig.dump.properties" depends="initial.check">
    <echo level="${xfig.debug.level}"> ------ Xfig properties ----
    xfig.exec          ="${xfig.exec}"
    xfig.abssrc.dir    ="${xfig.abssrc.dir}"
    xfig.absdst.dir    ="${xfig.absdst.dir}"
    xfig.output.format ="${xfig.output.format}"
    xfig.border        ="${xfig.border}"
    xfig.smooth        ="${xfig.smooth}"
    xfig.extra.args    ="${xfig.extra.args}"
    xfig.files         ="${xfig.files}" </echo>
  </target>

  <target name="xfig.report.YES" depends="xfig.check.values"
	  if="xfig.execution.possible">
    <echo>Xfig               |     *     |</echo>
  </target>

  <target name="xfig.report.NO" depends="xfig.check.values"
	  unless="xfig.execution.possible">
    <echo>Xfig               |           |     * (install ${xfig.exec})</echo>
  </target>

  <target name="xfig.report" depends="xfig.report.YES,
				      xfig.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="xfig" depends="initial.delete.build.out, xfig.processing"/>
</project>
