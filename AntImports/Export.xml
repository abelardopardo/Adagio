<?xml version="1.0" encoding="UTF-8"?>

<project name="Copy files outside the resource" default="export">
  <description>
    Export files produced in the current directory
    
    These variables control if certain files are copied to a different location.
    
    The copy is actually performed only if the exportcontrol.check variable is
    true. If exportcontrol.check is not set or set to false, the export is not
    executed. The value of this variable can be controled either directly, with
    a date/time window or if a given value is contained in a previously given
    profile (set of semi-colon separated strings)
    
    See the following section for a detailed description of the
    exportcontrol.check mechanism.
  </description>

  <import file="Copyfiles.xml"/>
  <import file="ExportControl.xml"/>

  <!-- Private properties -->
  <property name="export.debug.level"    value="${ada.debug.level}"
	    description="Debug level for the export process (see ada.debug.level)"/>

  <target name="export.init" depends="ada.init">
    <!-- Public Property definition -->
    <property name="export.src.dir" value="${basedir}" 
	      description="Directory where the sources are taken"/>
    <property name="export.dst.dir" value="${export.src.dir}" 
	      description="Directory where the produced files are created"/>
    <property name="export.files"   value=""
	      description="Source file names (no path, it is export.src.dir)"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="export" ADA.SRC.DIR="${export.src.dir}"
      ADA.DST.DIR="${export.dst.dir}" ADA.FILES="${export.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="export.files.given">
      <and>
      <!-- 
	   There must be some files in the fileset (after regexp expansion) 
      -->
	<not>
	  <equals arg1="${export.source.filelist.property}" arg2="" trim="true"/>
	</not>
	<!-- SRC and DST directories must be different -->
	<not>
	  <equals arg1="${export.absdst.dir}" arg2="${export.abssrc.dir}" trim="true"/>
	</not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${export.debug.level}">export.check          = "${export.check}"</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="export.processing" depends="export.init, exportcontrol"
	  if="exportcontrol.check" description="It only invokes copyfiles">
    
    <echo>export.processing           CALL(copyfiles.processing)</echo>

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <antcall target="copyfiles.processing" inheritAll="false">
      <param name="copyfiles.src.dir"      value="${export.src.dir}" />
      <param name="copyfiles.dst.dir"      value="${export.dst.dir}" />
      <param name="copyfiles.files"        value="${export.files}"/>
    </antcall>

    <echo>export.processing           END(copyfiles.processing)</echo>
  </target>

  <!-- Clean the produced files -->
  <target name="export.clean" depends="export.init, exportcontrol"
	  if="exportcontrol.check"
	  description="Delete files copied to dst">

    <echo>export.clean                CALL(copyfiles.clean)</echo>

    <antcall target="copyfiles.clean" inheritAll="false">
      <param name="copyfiles.src.dir" value="${export.src.dir}" />
      <param name="copyfiles.dst.dir" value="${export.dst.dir}" />
      <param name="copyfiles.files"   value="${export.files}"/>
    </antcall>

    <echo>export.clean                END(copyfiles.clean)</echo>
  </target>

  <target name="export.check.garbage.clean" depends="export.init, exportcontrol"
	  description="Check if the garbage clean is needed">
    <condition property="export.check.garbage">
      <and>
	<isset property="exportcontrol.check"/>
	<equals arg1="${exportcontrol.check}" arg2="true"/>
	<not><equals arg1="${export.src.dir}" arg2="${export.dst.dir}"/></not>
      </and>
    </condition>

    <echo level="${export.debug.level}">export.check.garbage = "${export.check.garbage}"</echo>
  </target>

  <target name="export.garbage.clean" depends="export.check.garbage.clean"
	  if="export.check.garbage"
	  description="Second pass at removing export garbage">

    <!-- Define a property containing the absolute dst path -->
    <pathconvert property="export.absdst.dir" pathsep=" ">
      <path location="${export.dst.dir}"/>
    </pathconvert>

    <echo>export.garbage.clean        RUN</echo>
    <echo> delete (if not empty) = ${export.absdst.dir}</echo>

    <delete failonerror="false" includeemptydirs="true">
      <!-- 
	   Watch out for this line, it is there for very special reasons. It
	   tries to delete the directory used to place the files to copy. The
	   trick is that ANT will not delete the directory if it is not
	   empty. By including this line, a nice effect is achieved. If a bunch
	   of files are copied to a directory somewhere else, and such directory
	   is used ONLY for that purpose, the cleaning operation will remove
	   such directory. 

           Also, if several source directories transfer files to the same
           destination directory, all of them, when cleaning, will try to delete
           it, but only the last one will be succeed because it will find it
	   empty.

           This will hopefully increase the effectiveness of the clean target at
           avoiding leaving temporary directories behind that need to be erased
           by the users by hand.
      -->
      <filelist files="${export.absdst.dir}"/>
    </delete>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="export" depends="initial.delete.build.out, export.processing"/>
</project>
