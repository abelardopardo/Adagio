<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Image processing with convert" default="convert">
  <description>
    Post-process images (resize, crop, etc.) with convert.
  </description>

  <!--
      Given the following properties:

      convert.src.dir: Source directory from where to process files
      convert.dst.dir: Directory where the files are stored
      convert.geometry: Geometry for the images
      convert.crop: Geometry to obtain after crop
      convert.format: Format to process the file
      convert.files: files to be processed

      Process the files in convert.files with convert. This script is mainly
      for chainging the geometry of a PNG file and cropping part of it. 
  -->

  <import file="InitialCheck.xml" />

  <property name="convert.exec"     value="convert"
	    description="Name of the executable to manipulate images"/>

  <ada.set.execution.possible ADA.EXECUTABLE.NAME="${convert.exec}"/>

  <!-- Private properties -->
  <property name="convert.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>
    
  <target name="convert.init" depends="ada.init" if="convert.execution.possible">
    <!-- Public Property definition -->
    <property name="convert.src.dir"  value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="convert.dst.dir"  value="${convert.src.dir}"
	      description="Directory where the produced files are created"/>
    <property name="convert.geometry" value=""
	      description="Geometry to convert image (wxh)"/>
    <property name="convert.suffix"   value="${convert.geometry}"
	      description="Suffix to add to the produced file"/>
    <property name="convert.crop"     value=""
	      description="Crop option -crop widthxheight+x+y"/>
    <property name="convert.format"   value="png"
	      description="Format to translate the image"/>
    <property name="convert.files"    value=""
	      description="Source file names (no path, it is convert.src.dir)"/>
    
    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="convert" ADA.SRC.DIR="${convert.src.dir}"
      ADA.DST.DIR="${convert.dst.dir}" ADA.FILES="${convert.files}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="convert.check">
      <and>
	<!-- 
	     There must be some files in the fileset (after regexp expansion)
	-->
        <not>
	  <equals arg1="${convert.source.filelist.property}" arg2="" trim="true"/>
	</not>
	<!-- Require a non-empty geometry -->
        <not><equals arg1="${convert.geometry}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${convert.debug.level}">convert.check          = "${convert.check}"
  convert.execution.possible = ${convert.execution.possible}</echo>
  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="convert.processing" depends="convert.init"
	  if="convert.check" description="converts the given images">
    
    <echo>convert.processing          RUN</echo>
    <echo level="${convert.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${convert.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${convert.absdst.dir}" 
	   append="yes" failonerror="true" executable="${convert.exec}" 
	   output="build.out">
      <srcfile />
      <arg value="-scale"/>
      <arg value="${convert.geometry}" />
      <arg line="${convert.crop}" />
      <targetfile />
      <fileset refid="convert.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.png" 
        to="*_${convert.suffix}.${convert.format}"/>
    </apply>
  </target>

  <!-- Clean files produced by convert -->
  <target name="convert.clean" depends="convert.init"
	  if="convert.check" description="Remove files produced by convert">
    
    <echo>convert.clean              RUN</echo>
    <echo level="${convert.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="convert.target.filelist.property" pathsep=" ">
      <fileset refid="convert.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${convert.abssrc.dir}/*"
		to="${convert.absdst.dir}/*"/>
        <mapper type="glob" from="*.png"
                to="*_${convert.suffix}.${convert.format}"/>
      </chainedmapper>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${convert.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${convert.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="convert.dump.properties" depends="convert.init">
    <echo level="${convert.debug.level}"> ------ Convert properties ----
    convert.exec       ="${convert.exec}"
    convert.abssrc.dir ="${convert.abssrc.dir}"
    convert.absdst.dir ="${convert.absdst.dir}"
    convert.geometry   ="${convert.geometry}"
    convert.suffix     ="${convert.suffix}"
    convert.crop       ="${convert.crop}"
    convert.format     ="${convert.format}"
    convert.files      ="${convert.files}"</echo>
  </target>

  <target name="convert.report.YES" depends="convert.init"
	  if="convert.execution.possible">
    <echo>Convert            |     *     |</echo>
  </target>

  <target name="convert.report.NO" depends="convert.init"
	  unless="convert.execution.possible">
    <echo>Convert            |           |     * (install ImageMagick)</echo>
  </target>

  <target name="convert.report" depends="convert.report.YES,
				      convert.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="convert" depends="convert.init, initial.delete.build.out, convert.processing"/>
</project>
