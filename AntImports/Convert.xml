<?xml version="1.0" encoding="UTF-8"?>

<project name="Image processing with convert" default="convert">

  <!--
      Given the following properties:

      convert.src.dir: Source directory from where to process files
      convert.dst.dir: Directory where the files are stored
      convert.geometry: Geometry for the images
      convert.crop: Geometry to obtain after crop
      convert.format: Format to process the file
      convert.files: files to be processed

      Process the files in convert.files with convert. This script is mainly
      for chainging the geometry of a PNG file and cropping part of it. 
  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml" />

  <!-- Property definition -->
  <property name="convert.exec"     value="convert"/>
  <property name="convert.src.dir"  value="${basedir}"/>
  <property name="convert.dst.dir"  value="${convert.src.dir}"/>
  <property name="convert.geometry" value=""/>
  <property name="convert.suffix"   value="${convert.geometry}"/>
  <property name="convert.crop"     value=""/>
  <property name="convert.format"   value="png"/>
  <property name="convert.files"    value=""/>

  <!-- Private properties -->
  <property name="convert.debug.level"    value="${ada.debug.level}"/>

  <!-- Define two properties containing the absolute src and dst paths -->
  <pathconvert property="convert.abssrc.dir" pathsep=" ">
    <path location="${convert.src.dir}"/>
  </pathconvert>
  <pathconvert property="convert.absdst.dir" pathsep=" ">
    <path  location="${convert.dst.dir}"/>
  </pathconvert>

  <!-- Source files to be processed by convert (fileset to allow wildcards) -->
  <fileset id="convert.fileset" dir="${convert.abssrc.dir}"
	   includes="__bogus__file__name ${convert.files}"/>


  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="convert.check.values" 
	  depends="initial.check, convert.dump.properties">

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="convert.check">
      <and>
	<!-- The src.dir needs to be non-empty. It is very dangerous to have an
	empty definition of this variable. At least a . needs to be present -->
        <not><equals arg1="${convert.abssrc.dir}" arg2="" trim="true"/></not>
	<!-- There must be some files defined -->
        <not><equals arg1="${convert.files}" arg2="" trim="true"/></not>
	<!-- Require a non-empty dst.dir as well -->
        <not><equals arg1="${convert.absdst.dir}" arg2="" trim="true"/></not>
	<!-- Require a non-empty geometry -->
        <not><equals arg1="${convert.geometry}" arg2="" trim="true"/></not>
      </and>
    </condition>

    <!-- The required condition not to bomb out -->
    <condition property="convert.execution.possible">
      <and>
	<available file="${convert.exec}${executable.file.extension}"
		   filepath="${env.PATH}"/>
	<available file="${convert.abssrc.dir}"/> 
      </and>
    </condition>

    <condition property="convert.failure">
      <and>
	<isset property="convert.check"/>
	<not><isset property="convert.execution.possible"/></not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${convert.debug.level}">convert.check          = "${convert.check}"
  convert.execution.possible = ${convert.execution.possible}
  convert.failure            = ${convert.failure}</echo>
  </target>

  <target name="convert.bomb.out" if="convert.failure">
    <fail message="Convert rule cannot be executed. Review the value of
		   variables convert.src.dir and convert.exec"/>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="convert.processing.NOT"  depends="convert.bomb.out" 
	  unless="convert.check">
    <echo level="${convert.debug.level}">convert.processing          ---</echo>
    <echo level="${convert.debug.level}">${basedir}</echo>
  </target>
    
  <!-- Regular target. It is executed if the check property is true, and it has
  as dependency the NOT target. That way, if the property is not set, this
  target is not executed and instead, the one notifying the user of such event
  is executed. -->
  <target name="convert.processing" 
	  depends="convert.check.values, convert.processing.NOT"
	  if="convert.check"
	  description="converts the given images">
    
    <echo>convert.processing          RUN</echo>
    <echo level="${convert.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${convert.absdst.dir}" />

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false" dest="${convert.absdst.dir}" 
	   append="yes" failonerror="true" executable="${convert.exec}" 
	   output="build.out">
      <srcfile />
      <arg value="-scale"/>
      <arg value="${convert.geometry}" />
      <arg line="${convert.crop}" />
      <targetfile />
      <fileset refid="convert.fileset"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.png" 
        to="*_${convert.suffix}.${convert.format}"/>
    </apply>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="convert.clean.NOT" unless="convert.check">
    <echo level="${convert.debug.level}">convert.clean               ---</echo>
    <echo level="${convert.debug.level}">${basedir}</echo>
  </target>
    
  <!-- Clean files produced by convert -->
  <target name="convert.clean" 
	  depends="convert.check.values, convert.clean.NOT"
	  if="convert.check" 
	  description="Remove files produced by convert">
    
    <echo>convert.clean              RUN</echo>
    <echo level="${convert.debug.level}">${basedir}</echo>

    <!-- Obtain the filelist with the produced files. -->
    <pathconvert property="convert.target.filelist.property" pathsep=" ">
      <fileset refid="convert.fileset"/>
      <chainedmapper>
	<mapper type="glob" from="${convert.abssrc.dir}/*"
		to="${convert.absdst.dir}/*"/>
        <mapper type="glob" from="*.png"
                to="*_${convert.suffix}.${convert.format}"/>
      </chainedmapper>
    </pathconvert>
    <filelist id="convert.target.filelist"
	      files="${convert.target.filelist.property}"/>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${convert.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attributge is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <filelist refid="convert.target.filelist"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="convert.dump.properties" depends="initial.check">
    <echo level="${convert.debug.level}"> ------ Convert properties ----
    convert.exec       ="${convert.exec}"
    convert.abssrc.dir ="${convert.abssrc.dir}"
    convert.absdst.dir ="${convert.absdst.dir}"
    convert.geometry   ="${convert.geometry}"
    convert.suffix     ="${convert.suffix}"
    convert.crop       ="${convert.crop}"
    convert.format     ="${convert.format}"
    convert.files      ="${convert.files}"</echo>
  </target>

  <target name="convert.report.YES" depends="convert.check.values"
	  if="convert.execution.possible">
    <echo>Convert            |     *     |</echo>
  </target>

  <target name="convert.report.NO" depends="convert.check.values"
	  unless="convert.execution.possible">
    <echo>Convert            |           |     * (install ImageMagick)</echo>
  </target>

  <target name="convert.report" depends="convert.report.YES,
				      convert.report.NO"/>

  <!-- If entering through this target, build.out is deleted -->
  <target name="convert" depends="initial.delete.build.out, convert.processing"/>
</project>
