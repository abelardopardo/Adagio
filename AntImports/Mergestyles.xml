<?xml version="1.0" encoding="UTF-8"?>

<project name="Merge two stylesheets" default="mergestyles">

  <!--
      Given the following properties:

      mergestyles.dst.dir: Dir from where to take the master style
      mergestyles.master.style: List of Master styles to use as base
      mergestyles.file.to.import: style to imported at bottom of master

      Creates a new stylesheet with the content of the master and an import
      of the file.to.import and the resulting file is written in dst.dir. The
      name is changed to [master.style].[file.to.import]

      ant -v -Dbasedir=$PWD -Dmergestyles.dst.dir=. -Dmergestyles.master.style
      $PWD/../Params.xml -Dmergestyles.file.to.import ../../../XslStyles/HeadTail.xsl
      -f ../../../AntImports/Mergestyles.xml

      mergestyles.master.style Params.xml
      mergestyles.file.to.import HeadTail.xsl

  -->

  <!-- Checks for availability of different binaries -->
  <import file="InitialCheck.xml"/>

  <!-- Property definition -->
  <property name="mergestyles.exec"           value="xsltproc"/>
  <property name="mergestyles.src.dir"        value="${basedir}"/>
  <property name="mergestyles.master.style"   value=""/>
  <property name="mergestyles.dst.dir"        value="${mergestyles.dst.dir}"/>
  <property name="mergestyles.file.to.import" value=""/>
  <property name="mergestyles.style.file"     
	    value="${ada.home}/XslStyles/Mergesheets.xsl"/>

  <!-- Private properties -->
  <property name="mergestyles.debug.level"    value="${ada.debug.level}"/>

  <!-- Source files to be processed by mergestyles -->
  <filelist id="mergestyles.master.filelist" dir="${mergestyles.src.dir}"
	    files="${mergestyles.master.style}"/>


  <!-- Local variables -->
  <pathconvert property="mergestyles.output.prefix">
    <filelist refid="mergestyles.master.filelist"/>
    <chainedmapper>
      <mapper type="glob" from="*.xml" to="*"/>
      <mapper type="flatten"/>
    </chainedmapper>
  </pathconvert>
  <pathconvert property="mergestyles.output.suffix">
    <filelist id="mergestyles.import.filelist" 
	      files="${mergestyles.file.to.import}"/>
    <mapper type="flatten"/>
  </pathconvert>

  <!-- Preliminary target to verify that certain minimum conditions hold before
  executing the regular targets. -->
  <target name="mergestyles.check.values" 
	  depends="initial.check, mergestyles.dump.properties"> 

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="mergestyles.check">
      <and>
	<!-- The required binaries need to be available. -->
	<available file="${mergestyles.exec}${executable.file.extension}"
		   filepath="${env.PATH}"/>
	<!-- There must be some files defined -->
        <not><equals arg1="${mergestyles.src.dir}" arg2=""/></not>
        <not><equals arg1="${mergestyles.master.style}" arg2=""/></not>
	<available file="${mergestyles.src.dir}/${mergestyles.master.style}"/>
	<!-- Require a non-empty dst.dir as well -->
        <not><equals arg1="${mergestyles.dst.dir}" arg2=""/></not>
	<!-- Require a non-empty style file -->
        <not><equals arg1="${mergestyles.file.to.import}" arg2=""/></not>
	<available file="${mergestyles.file.to.import}"/>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${mergestyles.debug.level}">    mergestyles.check          = "${mergestyles.check}"</echo>
  </target>

  <!-- Target to notify that the regular target has not been executed. This is
  to notify the user -->
  <target name="mergestyles.processing.NOT" unless="mergestyles.check">
    <echo level="${mergestyles.debug.level}">mergestyles.processing       ---</echo>
    <echo level="${mergestyles.debug.level}">${basedir}</echo>
  </target>

  <!-- Invoke xsltproc -->
  <target name="mergestyles.processing" 
	  depends="mergestyles.check.values, mergestyles.processing.NOT"
	  if="mergestyles.check"
	  description="Apply the mergestyle to the master style">

    <echo>mergestyles.processing      RUN</echo>
    <echo level="${mergestyles.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${mergestyles.dst.dir}" />

    <!-- Force the dependency checking on changes on the style sheet -->
    <dependset>
      <srcfilelist files="${mergestyles.style.file}" />
      <srcfilelist files="${mergestyles.file.to.import}" />
      <srcfileset dir="${ada.home}/XslStyles">
	<include name="*.xsl" />
      </srcfileset>
      <targetfilelist 
	dir="${mergestyles.dst.dir}"
	files="${mergestyles.output.prefix}_${mergestyles.output.suffix}"/>
    </dependset>

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <apply dir="${basedir}" parallel="false"
	   dest="${mergestyles.dst.dir}" append="yes" failonerror="true"
	   executable="${mergestyles.exec}"  output="build.out">
      <arg value="--xinclude"/>
      <arg value="--stringparam"/>
      <arg value="mergesheets.file.to.fold"/>
      <arg value="${mergestyles.file.to.import}"/>
      <arg value="-o"/>
      <targetfile/>
      <arg value="${mergestyles.style.file}"/>
      <filelist refid="mergestyles.master.filelist"/>
      <!-- Mapper from source files to produced files -->
      <mapper type="glob" from="*.xml" to="*_${mergestyles.output.suffix}"/>
    </apply>
  </target>

  <!-- Clean files produced by mergestyles -->
  <target name="mergestyles.clean" 
	  depends="mergestyles.check.values"
	  if="mergestyles.check"
	  description="Remove files produced by mergestyles">

    <echo>mergestyles.clean          CALL(mergestyles.clean)</echo>
    <echo level="${mergestyles.debug.level}">${basedir}</echo>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${mergestyles.output.prefix}_${mergestyles.output.suffix}</echo>

    <delete 
      file="${mergestyles.dst.dir}/${mergestyles.output.prefix}_${mergestyles.output.suffix}"/>
  </target>

  <!-- Dump the properties and filelists defined in this script -->
  <target name="mergestyles.dump.properties" depends="initial.check">
    <echo level="${mergestyles.debug.level}"> ------ mergestyles properties ----
    mergestyles.src.dir        ="${mergestyles.src.dir}"
    mergestyles.dst.dir        ="${mergestyles.dst.dir}"
    mergestyles.master.style   ="${mergestyles.master.style}"
    mergestyles.file.to.import ="${mergestyles.file.to.import}"
    mergestyles.output.prefix  ="${mergestyles.output.prefix}"
    mergestyles.output.suffix  ="${mergestyles.output.suffix}"</echo>     
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="mergestyles" depends="initial.delete.build.out, mergestyles.processing"/>
</project>
