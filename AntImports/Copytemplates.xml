<?xml version="1.0" encoding="UTF-8"?>

<!--
  Copyright (C) 2008 Carlos III University of Madrid
  This file is part of the ADA: Agile Distributed Authoring Toolkit

  This program is free software; you can redistribute it and/or
  modify it under the terms of the GNU General Public License
  as published by the Free Software Foundation; either version 2
  of the License, or (at your option) any later version.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor
  Boston, MA  02110-1301, USA.

-->

<project name="Copy templates from SRC to DST applying a filter"
	 default="copytemplates">
  <description>
    Copy copytemplates.files in copytemplates.src.dir to
    copytemplates.dst.dir. The copy is performed by applying the filter given in
    copytemplates.filter.file and only if source files are not overwritten.
  </description>

  <import file="InitialCheck.xml"/>

  <!-- Private properties -->
  <property name="copytemplates.debug.level"    value="${ada.debug.level}"
	    description="Debug level to apply to these rules (see ada.debug.level)"/>

  <target name="copytemplates.init" depends="ada.init">
    <!-- Public Property definition -->
    <property name="copytemplates.src.dir"      value="${basedir}"
	      description="Directory where the sources are taken"/>
    <property name="copytemplates.dst.dir"      value="${basedir}"
	      description="Directory where the produced files are created"/>
    <property name="copytemplates.files"        value=""
	      description="Source file names (no path, it is copytemplates.src.dir)"/>
    <property name="copytemplates.filter.file"  value=""
	      description="Absolute path to a file containing var=value pairs to replace in source files."/>
    <property name="copytemplates.begintoken" value="@"
	      description="Character to denote the beginning of a string to replace in the template"/>
    <property name="copytemplates.endtoken" value="@"
	      description="Character to denote the end of a string to replace in the template"/>

    <!-- Define two properties containing the absolute src and dst paths -->
    <ada.expand.srcdst.paths
      ADA.PREFIX="copytemplates" ADA.SRC.DIR="${copytemplates.src.dir}"
      ADA.DST.DIR="${copytemplates.dst.dir}" ADA.FILES="${copytemplates.files}"/>

    <!-- Obtain the filelist with the produced files. -->
    <pathconvert property="copytemplates.target.filelist.property" pathsep=" ">
      <fileset refid="copytemplates.fileset"/>
      <mapper type="regexp" from="${copytemplates.abssrc.dir}/(.*)\.([^.]+)$$"
	      to="${copytemplates.absdst.dir}/\1.${copytemplates.output.format}"/>
    </pathconvert>
    <filelist id="copytemplates.target.filelist"
	      files="${copytemplates.target.filelist.property}"/>

    <!-- Condition to enable/disable the rest of the execution -->
    <condition property="copytemplates.check">
      <and>
	<!--
	     There must be some files in the fileset (after regexp expansion)
	-->
	<not>
	  <equals arg1="${copytemplates.source.filelist.property}" arg2=""
		  trim="true"/>
	</not>

	<!-- The output format cannot be empty -->
	<not>
	  <equals arg1="${copytemplates.output.format}"
		  arg2="" trim="true"/>
	</not>
      </and>
    </condition>

    <!-- Dump the value of the properties just computed. -->
    <echo level="${copytemplates.debug.level}">  copytemplates.check          = "${copytemplates.check}"</echo>

  </target>

  <!-- Regular target. It is executed if the check property is true -->
  <target name="copytemplates.processing" depends="copytemplates.init"
	  if="copytemplates.check" description="Actually perform the copy">

    <echo>copytemplates.processing    RUN</echo>
    <echo level="${copytemplates.debug.level}">${basedir}</echo>

    <!-- Create the dst directory -->
    <mkdir dir="${copytemplates.absdst.dir}" />

    <!-- Force the dependency checking on changes on the filter file -->
    <dependset>
      <srcfileset file="${ada.local.property.file}" />
      <srcfileset file="${copytemplates.filter.file}" />
      <targetfilelist refid="copytemplates.target.filelist"/>
    </dependset>

    <!-- Execute the command. Watch out for src.dir and dst.dir -->
    <copy todir="${copytemplates.absdst.dir}">
      <fileset refid="copytemplates.fileset"/>
      <filterset begintoken="${copytemplates.begintoken}"
		 endtoken="${copytemplates.endtoken}"
		 filtersfile="${copytemplates.filter.file}"/>
      <mapper type="regexp" from="(.*)\.([^.]+)$$"
	      to="\1.${copytemplates.output.format}"/>
    </copy>

  </target>

  <!-- Clean the copied files -->
  <target name="copytemplates.clean" depends="copytemplates.init"
    if="copytemplates.check" description="Delete files copied to dst">

    <echo>copytemplates.clean             RUN</echo>
    <echo level="${copytemplates.debug.level}">${basedir}</echo>

    <!-- Obtain a property with the produced files. -->
    <pathconvert property="copytemplates.target.filelist.property" pathsep=" ">
      <fileset refid="copytemplates.fileset"/>
      <mapper type="regexp" from="${copytemplates.abssrc.dir}/(.*)\.([^.]+)$$"
	      to="${copytemplates.absdst.dir}/\1.${copytemplates.output.format}"/>
    </pathconvert>

    <!-- Dump explicitly the files to be deleted -->
    <echo> deleted = ${copytemplates.target.filelist.property}</echo>

    <!-- Perform the delete operation. The failonerror attribute is needed
	 and must be set fo false because the dst directory might have been
	 removed  -->
    <delete failonerror="false" includeemptydirs="true">
      <files includes="${copytemplates.target.filelist.property}"/>
    </delete>
  </target>

  <!-- Dump the properties defined in this script -->
  <target name="copytemplates.dump.properties" depends="copytemplates.init">
    <echo level="${copytemplates.debug.level}"> ------ Copytemplates properties ----
    copytemplates.abssrc.dir ="${copytemplates.abssrc.dir}"
    copytemplates.absdst.dir ="${copytemplates.absdst.dir}"
    copytemplates.files      ="${copytemplates.files}"
    copytemplates.output.format="${copytemplates.output.format}"
    copytemplates.filter.file="${copytemplates.filter.file}"</echo>
  </target>

  <!-- If entering through this target, build.out is deleted -->
  <target name="copytemplates" depends="copytemplates.init, initial.delete.build.out, copytemplates.processing"/>
</project>
